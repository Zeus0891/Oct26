// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIAction {
  id                  String        @id @default(uuid(7)) @db.Uuid
  status              String        @default("ACTIVE")
  version             Int           @default(1)
  createdAt           DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime      @db.Timestamptz(6)
  tenantId            String        @db.Uuid
  deletedAt           DateTime?     @db.Timestamptz(6)
  deletedByActorId    String?       @db.Uuid
  createdByActorId    String?       @db.Uuid
  updatedByActorId    String?       @db.Uuid
  name                String        @db.VarChar(200)
  actionType          ActionType
  description         String?
  category            String?       @db.VarChar(100)
  actionConfig        String?
  inputSchema         String?
  outputSchema        String?
  validationRules     String?
  isActive            Boolean       @default(true)
  requiresApproval    Boolean       @default(false)
  maxExecutionTime    Int?          @default(300)
  retryPolicy         String?
  businessEntityTypes String?
  permissions         String?
  complianceLevel     String?       @db.VarChar(50)
  Tenant              Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  AIActionRun         AIActionRun[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, actionType])
  @@index([tenantId, category])
  @@index([tenantId, isActive])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIActionRun {
  id                 String      @id @default(uuid(7)) @db.Uuid
  status             AIJobStatus @default(QUEUED)
  version            Int         @default(1)
  createdAt          DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime    @db.Timestamptz(6)
  tenantId           String      @db.Uuid
  deletedAt          DateTime?   @db.Timestamptz(6)
  deletedByActorId   String?     @db.Uuid
  createdByActorId   String?     @db.Uuid
  updatedByActorId   String?     @db.Uuid
  actionId           String      @db.Uuid
  jobId              String?     @db.Uuid
  runNumber          Int         @default(1)
  name               String?     @db.VarChar(200)
  inputData          String?
  outputData         String?
  errorMessage       String?
  errorCode          String?     @db.VarChar(100)
  startedAt          DateTime?   @db.Timestamptz(6)
  completedAt        DateTime?   @db.Timestamptz(6)
  executionTime      Int?
  businessEntityType String?     @db.VarChar(100)
  businessEntityId   String?     @db.Uuid
  triggeredBy        String?     @db.VarChar(100)
  AIAction           AIAction    @relation(fields: [actionId], references: [id], onDelete: Cascade)
  AIJob              AIJob?      @relation(fields: [jobId], references: [id])
  Tenant             Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, actionId])
  @@index([tenantId, startedAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIAssistantProfile {
  id                  String          @id @default(uuid(7)) @db.Uuid
  status              String          @default("ACTIVE")
  version             Int             @default(1)
  createdAt           DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime        @db.Timestamptz(6)
  tenantId            String          @db.Uuid
  deletedAt           DateTime?       @db.Timestamptz(6)
  deletedByActorId    String?         @db.Uuid
  createdByActorId    String?         @db.Uuid
  updatedByActorId    String?         @db.Uuid
  name                String          @db.VarChar(200)
  displayName         String?         @db.VarChar(300)
  description         String?
  assistantType       String          @db.VarChar(100)
  modelProvider       AIModelProvider @default(OPENAI)
  modelName           String          @db.VarChar(100)
  systemPrompt        String?
  temperature         Float           @default(0.7)
  maxTokens           Int             @default(2000)
  personality         String?
  communicationStyle  String?         @db.VarChar(100)
  expertise           String?
  capabilities        String?
  isActive            Boolean         @default(true)
  allowedModules      String?
  allowedRoles        String?
  dataAccessLevel     String?         @db.VarChar(50)
  businessArea        String?         @db.VarChar(100)
  departmentScope     String?
  workflowIntegration String?
  totalInteractions   Int             @default(0)
  totalTokensUsed     Int             @default(0)
  lastUsedAt          DateTime?       @db.Timestamptz(6)
  averageRating       Float?
  Tenant              Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assistantType])
  @@index([tenantId, businessArea])
  @@index([tenantId, isActive])
  @@index([tenantId, lastUsedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIDocumentChunk {
  id                   String          @id @default(uuid(7)) @db.Uuid
  status               String          @default("ACTIVE")
  version              Int             @default(1)
  createdAt            DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime        @db.Timestamptz(6)
  tenantId             String          @db.Uuid
  deletedAt            DateTime?       @db.Timestamptz(6)
  deletedByActorId     String?         @db.Uuid
  createdByActorId     String?         @db.Uuid
  updatedByActorId     String?         @db.Uuid
  documentIndexId      String          @db.Uuid
  chunkType            ChunkType       @default(PARAGRAPH)
  chunkIndex           Int
  content              String
  title                String?         @db.VarChar(300)
  startPosition        Int?
  endPosition          Int?
  pageNumber           Int?
  sectionNumber        String?         @db.VarChar(50)
  tokenCount           Int?
  characterCount       Int
  preprocessingApplied String?
  language             String?         @db.VarChar(5)
  qualityScore         Float?
  relevanceScore       Float?
  AIDocumentIndex      AIDocumentIndex @relation(fields: [documentIndexId], references: [id], onDelete: Cascade)
  Tenant               Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  AIEmbedding          AIEmbedding[]

  @@unique([tenantId, documentIndexId, chunkIndex])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, chunkType])
  @@index([tenantId, documentIndexId])
  @@index([tenantId, qualityScore])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIDocumentIndex {
  id                  String              @id @default(uuid(7)) @db.Uuid
  status              DocumentIndexStatus @default(PENDING)
  version             Int                 @default(1)
  createdAt           DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime            @db.Timestamptz(6)
  tenantId            String              @db.Uuid
  deletedAt           DateTime?           @db.Timestamptz(6)
  deletedByActorId    String?             @db.Uuid
  createdByActorId    String?             @db.Uuid
  updatedByActorId    String?             @db.Uuid
  documentId          String              @db.Uuid
  documentType        String              @db.VarChar(100)
  title               String              @db.VarChar(500)
  summary             String?
  language            String              @default("en") @db.VarChar(5)
  embeddingModel      EmbeddingModel      @default(TEXT_EMBEDDING_ADA_002)
  indexingMethod      String              @db.VarChar(100)
  chunkingStrategy    String              @db.VarChar(100)
  chunkSize           Int                 @default(1000)
  chunkOverlap        Int                 @default(200)
  totalChunks         Int                 @default(0)
  processedChunks     Int                 @default(0)
  indexedAt           DateTime?           @db.Timestamptz(6)
  processingTime      Int?
  indexSize           Int?
  indexQualityScore   Float?
  searchPerformance   String?
  optimizationApplied String?
  businessEntityType  String?             @db.VarChar(100)
  businessEntityId    String?             @db.Uuid
  accessLevel         String?             @db.VarChar(50)
  dataClassification  String?             @db.VarChar(50)
  AIDocumentChunk     AIDocumentChunk[]
  Tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, documentId])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, businessEntityType, businessEntityId])
  @@index([tenantId, documentType])
  @@index([tenantId, indexedAt])
  @@index([tenantId, language])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIEmbedding {
  id                  String           @id @default(uuid(7)) @db.Uuid
  status              String           @default("ACTIVE")
  version             Int              @default(1)
  createdAt           DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime         @db.Timestamptz(6)
  tenantId            String           @db.Uuid
  deletedAt           DateTime?        @db.Timestamptz(6)
  deletedByActorId    String?          @db.Uuid
  createdByActorId    String?          @db.Uuid
  updatedByActorId    String?          @db.Uuid
  chunkId             String?          @db.Uuid
  content             String
  embeddingVector     String
  embeddingModel      EmbeddingModel   @default(TEXT_EMBEDDING_ADA_002)
  vectorDimensions    Int              @default(1536)
  generatedAt         DateTime         @default(now()) @db.Timestamptz(6)
  processingTime      Int?
  modelVersion        String?          @db.VarChar(50)
  tokenCount          Int?
  similarityThreshold Float?           @default(0.8)
  indexingOptimized   Boolean          @default(false)
  compressionApplied  Boolean          @default(false)
  businessEntityType  String?          @db.VarChar(100)
  businessEntityId    String?          @db.Uuid
  AIDocumentChunk     AIDocumentChunk? @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  Tenant              Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, businessEntityType, businessEntityId])
  @@index([tenantId, chunkId])
  @@index([tenantId, embeddingModel])
  @@index([tenantId, generatedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIInsight {
  id                     String              @id @default(uuid(7)) @db.Uuid
  status                 InsightStatus       @default(PENDING)
  version                Int                 @default(1)
  createdAt              DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime            @db.Timestamptz(6)
  tenantId               String              @db.Uuid
  deletedAt              DateTime?           @db.Timestamptz(6)
  deletedByActorId       String?             @db.Uuid
  createdByActorId       String?             @db.Uuid
  updatedByActorId       String?             @db.Uuid
  title                  String              @db.VarChar(300)
  summary                String
  description            String?
  insightType            InsightType
  severity               InsightSeverity     @default(MEDIUM)
  category               String              @db.VarChar(100)
  jobId                  String?             @db.Uuid
  artifactId             String?             @db.Uuid
  promptTemplateId       String?             @db.Uuid
  modelProvider          AIModelProvider?
  modelName              String?             @db.VarChar(100)
  generationMethod       String?             @db.VarChar(100)
  findings               String?
  evidence               String?
  dataPoints             String?
  sourceReferences       String?
  rawData                String?
  confidenceScore        Float?
  accuracyScore          Float?
  reliabilityScore       Float?
  impactScore            Float?
  priorityScore          Float?
  qualityScore           Float?
  businessEntityType     String?             @db.VarChar(100)
  businessEntityId       String?             @db.Uuid
  businessArea           String?             @db.VarChar(100)
  impactDescription      String?
  riskLevel              String?             @db.VarChar(50)
  opportunityLevel       String?             @db.VarChar(50)
  recommendations        String?
  suggestedActions       String?
  automatableActions     String?
  manualActions          String?
  urgencyLevel           String?             @db.VarChar(50)
  estimatedEffort        String?             @db.VarChar(100)
  validationStatus       String?             @db.VarChar(50)
  validationNotes        String?
  reviewedAt             DateTime?           @db.Timestamptz(6)
  reviewedById           String?             @db.Uuid
  reviewNotes            String?
  humanVerified          Boolean             @default(false)
  processedAt            DateTime?           @db.Timestamptz(6)
  acknowledgedAt         DateTime?           @db.Timestamptz(6)
  acknowledgedById       String?             @db.Uuid
  implementedAt          DateTime?           @db.Timestamptz(6)
  implementedById        String?             @db.Uuid
  resolvedAt             DateTime?           @db.Timestamptz(6)
  resolvedById           String?             @db.Uuid
  trendDirection         String?             @db.VarChar(50)
  patternId              String?             @db.Uuid
  seasonality            String?             @db.VarChar(100)
  frequency              String?             @db.VarChar(50)
  recurrence             String?
  complianceImplications String?
  riskFactors            String?
  mitigationStrategies   String?
  regulatoryImpact       String?
  auditFlags             String?
  alertSent              Boolean             @default(false)
  alertRecipients        String?
  notificationSent       Boolean             @default(false)
  escalationLevel        Int                 @default(0)
  lastEscalatedAt        DateTime?           @db.Timestamptz(6)
  externalInsightId      String?             @db.VarChar(200)
  externalSystemId       String?             @db.VarChar(100)
  syncStatus             String?             @db.VarChar(50)
  lastSyncAt             DateTime?           @db.Timestamptz(6)
  correlationData        String?
  statisticalData        String?
  benchmarkData          String?
  historicalContext      String?
  predictiveIndicators   String?
  customProperties       String?
  tags                   String?
  metadata               String?
  AIJobArtifact          AIJobArtifact?      @relation(fields: [artifactId], references: [id])
  AIJob                  AIJob?              @relation(fields: [jobId], references: [id])
  Tenant                 Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  AIInsightFeedback      AIInsightFeedback[]

  @@unique([tenantId, id])
  @@index([artifactId])
  @@index([createdAt], type: Brin)
  @@index([jobId])
  @@index([tenantId, alertSent])
  @@index([tenantId, businessEntityType, businessEntityId])
  @@index([tenantId, category])
  @@index([tenantId, confidenceScore])
  @@index([tenantId, impactScore])
  @@index([tenantId, insightType])
  @@index([tenantId, priorityScore])
  @@index([tenantId, processedAt])
  @@index([tenantId, reviewedAt])
  @@index([tenantId, riskLevel])
  @@index([tenantId, severity])
  @@index([tenantId, status])
  @@index([updatedAt], type: Brin)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIInsightFeedback {
  id                    String    @id @default(uuid(7)) @db.Uuid
  status                String    @default("ACTIVE")
  version               Int       @default(1)
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime  @db.Timestamptz(6)
  tenantId              String    @db.Uuid
  deletedAt             DateTime? @db.Timestamptz(6)
  deletedByActorId      String?   @db.Uuid
  createdByActorId      String?   @db.Uuid
  updatedByActorId      String?   @db.Uuid
  insightId             String    @db.Uuid
  feedbackType          String    @db.VarChar(100)
  rating                Float?
  isAccurate            Boolean?
  isRelevant            Boolean?
  isUseful              Boolean?
  comments              String?
  correctedData         String?
  suggestedImprovements String?
  providedById          String    @db.Uuid
  businessValue         Float?
  implementationStatus  String?   @db.VarChar(50)
  implementationNotes   String?
  outcomeDescription    String?
  improvementData       String?
  trainingWeight        Float?    @default(1.0)
  feedbackCategory      String?   @db.VarChar(100)
  AIInsight             AIInsight @relation(fields: [insightId], references: [id], onDelete: Cascade)
  Tenant                Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([providedById])
  @@index([tenantId, feedbackType])
  @@index([tenantId, insightId])
  @@index([tenantId, rating])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIJob {
  id                   String            @id @default(uuid(7)) @db.Uuid
  status               AIJobStatus       @default(QUEUED)
  version              Int               @default(1)
  createdAt            DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime          @db.Timestamptz(6)
  tenantId             String            @db.Uuid
  deletedAt            DateTime?         @db.Timestamptz(6)
  deletedByActorId     String?           @db.Uuid
  createdByActorId     String?           @db.Uuid
  updatedByActorId     String?           @db.Uuid
  name                 String            @db.VarChar(200)
  description          String?
  jobType              AIJobType
  priority             AIJobPriority     @default(NORMAL)
  promptTemplateId     String?           @db.Uuid
  promptText           String?
  systemPrompt         String?
  inputData            String?
  inputParameters      String?
  contextData          String?
  modelProvider        AIModelProvider   @default(OPENAI)
  modelName            String            @db.VarChar(100)
  modelVersion         String?           @db.VarChar(50)
  temperature          Float?            @default(0.7)
  maxTokens            Int?              @default(1000)
  topP                 Float?            @default(1.0)
  frequencyPenalty     Float?            @default(0.0)
  presencePenalty      Float?            @default(0.0)
  stopSequences        String?
  queuedAt             DateTime?         @db.Timestamptz(6)
  startedAt            DateTime?         @db.Timestamptz(6)
  completedAt          DateTime?         @db.Timestamptz(6)
  timeoutAt            DateTime?         @db.Timestamptz(6)
  estimatedDuration    Int?
  actualDuration       Int?
  resourcePool         String?           @db.VarChar(100)
  maxMemoryMB          Int?              @default(512)
  maxCpuCores          Float?            @default(1.0)
  gpuRequired          Boolean           @default(false)
  maxRetries           Int               @default(3)
  currentRetries       Int               @default(0)
  retryDelay           Int               @default(5000)
  lastError            String?
  errorCode            String?           @db.VarChar(100)
  errorCategory        String?           @db.VarChar(100)
  recoveryStrategy     String?           @db.VarChar(100)
  tokenUsage           String?
  responseTime         Int?
  processingTime       Int?
  queueTime            Int?
  totalCost            Decimal?          @db.Decimal(10, 4)
  costBreakdown        String?
  outputData           String?
  outputText           String?
  outputMetadata       String?
  outputFormat         String?           @db.VarChar(50)
  outputSize           Int?
  outputHash           String?           @db.VarChar(128)
  qualityScore         Float?
  confidenceScore      Float?
  relevanceScore       Float?
  accuracyScore        Float?
  validationStatus     String?           @db.VarChar(50)
  validationErrors     String?
  humanReviewed        Boolean           @default(false)
  humanRating          Float?
  businessEntityType   String?           @db.VarChar(100)
  businessEntityId     String?           @db.Uuid
  businessContext      String?
  triggeredBy          String?           @db.VarChar(100)
  triggerEventId       String?           @db.Uuid
  parentJobId          String?           @db.Uuid
  dependsOnJobs        String?
  childJobIds          String?
  workflowId           String?           @db.Uuid
  workflowStepId       String?           @db.Uuid
  batchId              String?           @db.Uuid
  correlationId        String?           @db.Uuid
  scheduledFor         DateTime?         @db.Timestamptz(6)
  cronExpression       String?           @db.VarChar(100)
  isRecurring          Boolean           @default(false)
  nextExecutionAt      DateTime?         @db.Timestamptz(6)
  executionCount       Int               @default(0)
  securityLevel        String?           @db.VarChar(50)
  dataClassification   String?           @db.VarChar(50)
  complianceFlags      String?
  auditRequired        Boolean           @default(false)
  piiDetected          Boolean           @default(false)
  externalJobId        String?           @db.VarChar(200)
  externalSystemId     String?           @db.VarChar(100)
  callbackUrl          String?
  webhookSecret        String?           @db.VarChar(256)
  customSettings       String?
  environmentVariables String?
  debugMode            Boolean           @default(false)
  verboseLogging       Boolean           @default(false)
  AIActionRun          AIActionRun[]
  AIInsight            AIInsight[]
  AIJob                AIJob?            @relation("AIJobToAIJob", fields: [parentJobId], references: [id])
  other_AIJob          AIJob[]           @relation("AIJobToAIJob")
  AIPromptTemplate     AIPromptTemplate? @relation(fields: [promptTemplateId], references: [id])
  Tenant               Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  AIJobArtifact        AIJobArtifact[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([parentJobId])
  @@index([promptTemplateId])
  @@index([tenantId, batchId])
  @@index([tenantId, businessEntityType, businessEntityId])
  @@index([tenantId, completedAt])
  @@index([tenantId, correlationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isRecurring, nextExecutionAt])
  @@index([tenantId, jobType])
  @@index([tenantId, modelProvider])
  @@index([tenantId, priority])
  @@index([tenantId, queuedAt])
  @@index([tenantId, scheduledFor])
  @@index([tenantId, securityLevel])
  @@index([tenantId, startedAt])
  @@index([tenantId, status])
  @@index([tenantId, workflowId])
  @@index([updatedAt], type: Brin)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIJobArtifact {
  id                  String          @id @default(uuid(7)) @db.Uuid
  status              String          @default("ACTIVE")
  version             Int             @default(1)
  createdAt           DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime        @db.Timestamptz(6)
  tenantId            String          @db.Uuid
  deletedAt           DateTime?       @db.Timestamptz(6)
  deletedByActorId    String?         @db.Uuid
  createdByActorId    String?         @db.Uuid
  updatedByActorId    String?         @db.Uuid
  jobId               String          @db.Uuid
  artifactType        String          @db.VarChar(100)
  name                String          @db.VarChar(200)
  displayName         String?         @db.VarChar(300)
  description         String?
  contentText         String?
  contentJson         String?
  contentBinary       Bytes?
  contentUrl          String?
  contentPath         String?         @db.VarChar(500)
  contentMimeType     String?         @db.VarChar(100)
  contentEncoding     String?         @db.VarChar(50)
  contentSize         Int?
  contentHash         String?         @db.VarChar(128)
  outputFormat        String?         @db.VarChar(50)
  dataSchema          String?
  templateUsed        String?         @db.VarChar(200)
  formatVersion       String?         @db.VarChar(20)
  qualityScore        Float?
  confidenceScore     Float?
  accuracyScore       Float?
  completenessScore   Float?
  validationStatus    String?         @db.VarChar(50)
  validationErrors    String?
  humanVerified       Boolean         @default(false)
  humanRating         Float?
  businessEntityType  String?         @db.VarChar(100)
  businessEntityId    String?         @db.Uuid
  businessCategory    String?         @db.VarChar(100)
  targetAudience      String?         @db.VarChar(100)
  usageContext        String?
  artifactVersion     Int             @default(1)
  previousVersionId   String?         @db.Uuid
  changeDescription   String?
  isLatestVersion     Boolean         @default(true)
  processingTime      Int?
  generationMethod    String?         @db.VarChar(100)
  sourceDataSources   String?
  transformationRules String?
  postProcessingSteps String?
  externalArtifactId  String?         @db.VarChar(200)
  externalSystemId    String?         @db.VarChar(100)
  syncStatus          String?         @db.VarChar(50)
  lastSyncAt          DateTime?       @db.Timestamptz(6)
  securityLevel       String?         @db.VarChar(50)
  dataClassification  String?         @db.VarChar(50)
  encryptionStatus    String?         @db.VarChar(50)
  accessRestrictions  String?
  retentionPolicy     String?         @db.VarChar(100)
  piiDetected         Boolean         @default(false)
  complianceFlags     String?
  downloadCount       Int             @default(0)
  viewCount           Int             @default(0)
  shareCount          Int             @default(0)
  lastAccessedAt      DateTime?       @db.Timestamptz(6)
  lastDownloadedAt    DateTime?       @db.Timestamptz(6)
  storageLocation     String?         @db.VarChar(200)
  storageClass        String?         @db.VarChar(50)
  compressionMethod   String?         @db.VarChar(50)
  compressionRatio    Float?
  archivedAt          DateTime?       @db.Timestamptz(6)
  customProperties    String?
  tags                String?
  metadata            String?
  AIInsight           AIInsight[]
  AIJob               AIJob           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  AIJobArtifact       AIJobArtifact?  @relation("AIJobArtifactToAIJobArtifact", fields: [previousVersionId], references: [id])
  other_AIJobArtifact AIJobArtifact[] @relation("AIJobArtifactToAIJobArtifact")
  Tenant              Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, jobId, name, artifactVersion])
  @@index([contentHash])
  @@index([createdAt], type: Brin)
  @@index([tenantId, artifactType])
  @@index([tenantId, businessEntityType, businessEntityId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isLatestVersion])
  @@index([tenantId, jobId])
  @@index([tenantId, lastAccessedAt])
  @@index([tenantId, securityLevel])
  @@index([tenantId, storageClass])
  @@index([tenantId, validationStatus])
  @@index([updatedAt], type: Brin)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIPlaybook {
  id                   String           @id @default(uuid(7)) @db.Uuid
  status               PlaybookStatus   @default(DRAFT)
  version              Int              @default(1)
  createdAt            DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime         @db.Timestamptz(6)
  tenantId             String           @db.Uuid
  deletedAt            DateTime?        @db.Timestamptz(6)
  deletedByActorId     String?          @db.Uuid
  createdByActorId     String?          @db.Uuid
  updatedByActorId     String?          @db.Uuid
  name                 String           @db.VarChar(200)
  displayName          String?          @db.VarChar(300)
  description          String?
  category             String           @db.VarChar(100)
  businessArea         String?          @db.VarChar(100)
  triggerType          PlaybookTrigger  @default(MANUAL)
  triggerConfig        String?
  cronExpression       String?          @db.VarChar(100)
  eventFilters         String?
  isActive             Boolean          @default(false)
  priority             AIJobPriority    @default(NORMAL)
  maxConcurrentRuns    Int              @default(1)
  timeoutMinutes       Int              @default(60)
  retryPolicy          String?
  majorVersion         Int              @default(1)
  minorVersion         Int              @default(0)
  patchVersion         Int              @default(0)
  publishedAt          DateTime?        @db.Timestamptz(6)
  isLatestVersion      Boolean          @default(true)
  totalExecutions      Int              @default(0)
  successfulExecutions Int              @default(0)
  failedExecutions     Int              @default(0)
  averageExecutionTime Int?
  lastExecutedAt       DateTime?        @db.Timestamptz(6)
  businessEntityTypes  String?
  integrationContext   String?
  complianceLevel      String?          @db.VarChar(50)
  Tenant               Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  AIPlaybookStep       AIPlaybookStep[]

  @@unique([tenantId, id])
  @@unique([tenantId, name, majorVersion, minorVersion, patchVersion])
  @@index([createdAt], type: Brin)
  @@index([tenantId, category])
  @@index([tenantId, isActive])
  @@index([tenantId, isLatestVersion])
  @@index([tenantId, publishedAt])
  @@index([tenantId, status])
  @@index([tenantId, triggerType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIPlaybookStep {
  id               String            @id @default(uuid(7)) @db.Uuid
  status           String            @default("ACTIVE")
  version          Int               @default(1)
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @db.Timestamptz(6)
  tenantId         String            @db.Uuid
  deletedAt        DateTime?         @db.Timestamptz(6)
  deletedByActorId String?           @db.Uuid
  createdByActorId String?           @db.Uuid
  updatedByActorId String?           @db.Uuid
  playbookId       String            @db.Uuid
  stepNumber       Int
  name             String            @db.VarChar(200)
  stepType         String            @db.VarChar(100)
  description      String?
  promptTemplateId String?           @db.Uuid
  actionType       ActionType?
  actionConfig     String?
  conditionalLogic String?
  timeoutSeconds   Int?              @default(300)
  retryAttempts    Int               @default(3)
  AIPlaybook       AIPlaybook        @relation(fields: [playbookId], references: [id], onDelete: Cascade)
  AIPromptTemplate AIPromptTemplate? @relation(fields: [promptTemplateId], references: [id])
  Tenant           Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, playbookId, stepNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, playbookId])
  @@index([tenantId, stepType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AIPromptTemplate {
  id                                                                          String             @id @default(uuid(7)) @db.Uuid
  status                                                                      TemplateStatus     @default(ACTIVE)
  version                                                                     Int                @default(1)
  createdAt                                                                   DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt                                                                   DateTime           @db.Timestamptz(6)
  tenantId                                                                    String             @db.Uuid
  deletedAt                                                                   DateTime?          @db.Timestamptz(6)
  deletedByActorId                                                            String?            @db.Uuid
  createdByActorId                                                            String?            @db.Uuid
  updatedByActorId                                                            String?            @db.Uuid
  name                                                                        String             @db.VarChar(200)
  displayName                                                                 String             @db.VarChar(300)
  description                                                                 String?
  category                                                                    String             @db.VarChar(100)
  templateType                                                                PromptTemplateType
  promptText                                                                  String
  systemPrompt                                                                String?
  temperature                                                                 Float              @default(0.7)
  maxTokens                                                                   Int                @default(1000)
  topP                                                                        Float?             @default(1.0)
  frequencyPenalty                                                            Float?             @default(0.0)
  presencePenalty                                                             Float?             @default(0.0)
  stopSequences                                                               String?
  modelProvider                                                               AIModelProvider    @default(OPENAI)
  modelName                                                                   String             @db.VarChar(100)
  modelVersion                                                                String?            @db.VarChar(50)
  fallbackModels                                                              String?
  parametersSchema                                                            String?
  requiredParameters                                                          String?
  defaultParameters                                                           String?
  parameterValidation                                                         String?
  majorVersion                                                                Int                @default(1)
  minorVersion                                                                Int                @default(0)
  patchVersion                                                                Int                @default(0)
  previousVersionId                                                           String?            @db.Uuid
  parentTemplateId                                                            String?            @db.Uuid
  isLatestVersion                                                             Boolean            @default(true)
  publishedAt                                                                 DateTime?          @db.Timestamptz(6)
  deprecatedAt                                                                DateTime?          @db.Timestamptz(6)
  retiredAt                                                                   DateTime?          @db.Timestamptz(6)
  experimentId                                                                String?            @db.Uuid
  experimentVariant                                                           String?            @db.VarChar(50)
  experimentWeight                                                            Float?             @default(1.0)
  experimentStartDate                                                         DateTime?          @db.Timestamptz(6)
  experimentEndDate                                                           DateTime?          @db.Timestamptz(6)
  totalExecutions                                                             Int                @default(0)
  successfulExecutions                                                        Int                @default(0)
  failedExecutions                                                            Int                @default(0)
  averageResponseTime                                                         Int?
  averageTokensUsed                                                           Int?
  totalCost                                                                   Decimal?           @db.Decimal(15, 4)
  averageCost                                                                 Decimal?           @db.Decimal(10, 4)
  lastExecutedAt                                                              DateTime?          @db.Timestamptz(6)
  averageRating                                                               Float?
  totalRatings                                                                Int                @default(0)
  accuracyScore                                                               Float?
  relevanceScore                                                              Float?
  consistencyScore                                                            Float?
  isPublic                                                                    Boolean            @default(false)
  isShared                                                                    Boolean            @default(false)
  allowedRoles                                                                String?
  allowedDepartments                                                          String?
  restrictedModules                                                           String?
  primaryLanguage                                                             String             @default("en") @db.VarChar(5)
  supportedLanguages                                                          String?
  translationStatus                                                           String?            @db.VarChar(50)
  businessDomain                                                              String?            @db.VarChar(100)
  integrationContext                                                          String?
  triggerEvents                                                               String?
  outputFormat                                                                String?            @db.VarChar(50)
  validationRules                                                             String?
  complianceLevel                                                             String?            @db.VarChar(50)
  dataClassification                                                          String?            @db.VarChar(50)
  retentionPolicy                                                             String?            @db.VarChar(100)
  auditRequired                                                               Boolean            @default(false)
  piiHandling                                                                 String?            @db.VarChar(100)
  baseTemplateId                                                              String?            @db.Uuid
  compositionRules                                                            String?
  overrideRules                                                               String?
  inheritanceChain                                                            String?
  externalTemplateId                                                          String?            @db.VarChar(200)
  sourceSystem                                                                String?            @db.VarChar(100)
  syncStatus                                                                  String?            @db.VarChar(50)
  lastSyncAt                                                                  DateTime?          @db.Timestamptz(6)
  customSettings                                                              String?
  environmentVariables                                                        String?
  preprocessingSteps                                                          String?
  postprocessingSteps                                                         String?
  AIJob                                                                       AIJob[]
  AIPlaybookStep                                                              AIPlaybookStep[]
  AIPromptTemplate_AIPromptTemplate_baseTemplateIdToAIPromptTemplate          AIPromptTemplate?  @relation("AIPromptTemplate_baseTemplateIdToAIPromptTemplate", fields: [baseTemplateId], references: [id])
  other_AIPromptTemplate_AIPromptTemplate_baseTemplateIdToAIPromptTemplate    AIPromptTemplate[] @relation("AIPromptTemplate_baseTemplateIdToAIPromptTemplate")
  AIPromptTemplate_AIPromptTemplate_parentTemplateIdToAIPromptTemplate        AIPromptTemplate?  @relation("AIPromptTemplate_parentTemplateIdToAIPromptTemplate", fields: [parentTemplateId], references: [id])
  other_AIPromptTemplate_AIPromptTemplate_parentTemplateIdToAIPromptTemplate  AIPromptTemplate[] @relation("AIPromptTemplate_parentTemplateIdToAIPromptTemplate")
  AIPromptTemplate_AIPromptTemplate_previousVersionIdToAIPromptTemplate       AIPromptTemplate?  @relation("AIPromptTemplate_previousVersionIdToAIPromptTemplate", fields: [previousVersionId], references: [id])
  other_AIPromptTemplate_AIPromptTemplate_previousVersionIdToAIPromptTemplate AIPromptTemplate[] @relation("AIPromptTemplate_previousVersionIdToAIPromptTemplate")
  Tenant                                                                      Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, name, majorVersion, minorVersion, patchVersion])
  @@index([createdAt], type: Brin)
  @@index([experimentId])
  @@index([tenantId, averageRating])
  @@index([tenantId, businessDomain])
  @@index([tenantId, category])
  @@index([tenantId, complianceLevel])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isLatestVersion])
  @@index([tenantId, isPublic])
  @@index([tenantId, lastExecutedAt])
  @@index([tenantId, modelProvider])
  @@index([tenantId, primaryLanguage])
  @@index([tenantId, publishedAt])
  @@index([tenantId, status])
  @@index([tenantId, templateType])
  @@index([tenantId, totalExecutions])
  @@index([updatedAt], type: Brin)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model APBill {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             APBillStatus     @default(DRAFT)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  globalId           String           @unique @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  billNumber         String           @db.VarChar(50)
  invoiceDate        DateTime         @db.Date
  dueDate            DateTime         @db.Date
  totalAmount        Decimal          @db.Decimal(12, 2)
  currency           String           @default("USD") @db.VarChar(3)
  description        String?
  vendorId           String           @db.Uuid
  vendorName         String           @db.VarChar(255)
  paidAmount         Decimal?         @db.Decimal(12, 2)
  paidDate           DateTime?        @db.Date
  Tenant             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Vendor             Vendor           @relation(fields: [tenantId, vendorId], references: [tenantId, id])

  APBillLine   APBillLine[]
  BillApproval BillApproval[]
  BillPayment  BillPayment[]

  // Actor audit relationships
  CreatedByActor Actor? @relation("APBillCreatedByActor", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("APBillUpdatedByActor", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor? @relation("APBillDeletedByActor", fields: [deletedByActorId], references: [id])

  @@unique([tenantId, id])
  @@unique([tenantId, vendorId, billNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, status])
  @@index([tenantId, vendorId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model APBillLine {
  id                  String                   @id @default(uuid(7)) @db.Uuid
  status              ProcurementChildStatus   @default(ACTIVE)
  version             Int                      @default(1)
  createdAt           DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime                 @db.Timestamptz(6)
  tenantId            String                   @db.Uuid
  deletedAt           DateTime?                @db.Timestamptz(6)
  deletedByActorId    String?                  @db.Uuid
  createdByActorId    String?                  @db.Uuid
  updatedByActorId    String?                  @db.Uuid
  auditCorrelationId  String?                  @db.Uuid
  dataClassification  String                   @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  lineNumber          Int                      @default(1)
  description         String                   @db.VarChar(500)
  quantity            Decimal                  @db.Decimal(12, 3)
  unitOfMeasure       ProcurementUnitOfMeasure @default(EA)
  unitPrice           Decimal                  @db.Decimal(12, 2)
  lineSubtotal        Decimal                  @db.Decimal(15, 2)
  discountAmount      Decimal?                 @default(0) @db.Decimal(12, 2)
  taxAmount           Decimal?                 @default(0) @db.Decimal(12, 2)
  lineTotal           Decimal                  @db.Decimal(15, 2)
  itemCode            String?                  @db.VarChar(50)
  itemDescription     String?
  itemCategory        String?                  @db.VarChar(100)
  taxCode             String?                  @db.VarChar(20)
  taxRate             Decimal?                 @db.Decimal(5, 4)
  isTaxExempt         Boolean                  @default(false)
  projectId           String?                  @db.Uuid
  budgetLineId        String?                  @db.Uuid
  costCode            String?                  @db.VarChar(50)
  costCategory        String?                  @db.VarChar(100)
  glAccountCode       String?                  @db.VarChar(20)
  glAccountName       String?                  @db.VarChar(100)
  purchaseOrderLineId String?                  @db.Uuid
  goodsReceiptLineId  String?                  @db.Uuid
  matchedQuantity     Decimal?                 @db.Decimal(12, 3)
  varianceAmount      Decimal?                 @db.Decimal(12, 2)
  internalNotes       String?
  currency            String                   @default("USD") @db.VarChar(3)
  exchangeRate        Decimal?                 @db.Decimal(10, 6)
  apBillId            String                   @db.Uuid
  APBill              APBill                   @relation(fields: [tenantId, apBillId], references: [tenantId, id], onDelete: Cascade)
  Tenant              Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  GoodsReceiptLine    GoodsReceiptLine?        @relation(fields: [tenantId, goodsReceiptLineId], references: [tenantId, id], onDelete: NoAction)
  Project             Project?                 @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  PurchaseOrderLine   PurchaseOrderLine?       @relation(fields: [tenantId, purchaseOrderLineId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, apBillId, lineNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, apBillId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, costCode])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, glAccountCode])
  @@index([tenantId, goodsReceiptLineId])
  @@index([tenantId, itemCode])
  @@index([tenantId, projectId])
  @@index([tenantId, purchaseOrderLineId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AbsenceBalance {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  workerId           String                 @db.Uuid
  leaveType          LeaveType
  balanceYear        Int
  entitledDays       Decimal                @db.Decimal(8, 2)
  accrualRateDays    Decimal                @db.Decimal(8, 4)
  usedDays           Decimal                @default(0) @db.Decimal(8, 2)
  pendingDays        Decimal                @default(0) @db.Decimal(8, 2)
  availableDays      Decimal                @db.Decimal(8, 2)
  carryOverDays      Decimal                @default(0) @db.Decimal(8, 2)
  maxCarryOver       Decimal?               @db.Decimal(8, 2)
  maxAccrual         Decimal?               @db.Decimal(8, 2)
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Worker             Worker                 @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, leaveType, balanceYear])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, balanceYear])
  @@index([tenantId, dataClassification])
  @@index([tenantId, leaveType])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Account {
  id                  String             @id @default(uuid(7)) @db.Uuid
  status              AccountStatus      @default(ACTIVE)
  version             Int                @default(1)
  createdAt           DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime           @db.Timestamptz(6)
  tenantId            String             @db.Uuid
  deletedAt           DateTime?          @db.Timestamptz(6)
  deletedByActorId    String?            @db.Uuid
  createdByActorId    String?            @db.Uuid
  updatedByActorId    String?            @db.Uuid
  globalId            String             @db.Uuid
  auditCorrelationId  String?            @db.Uuid
  dataClassification  String             @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  name                String             @db.VarChar(255)
  accountNumber       String?            @db.VarChar(50)
  accountType         String             @db.VarChar(50)
  industry            String?            @db.VarChar(100)
  website             String?            @db.VarChar(255)
  description         String?
  annualRevenue       Decimal?           @db.Decimal(15, 2)
  employeeCount       Int?
  creditLimit         Decimal?           @db.Decimal(12, 2)
  clientNotes         String?
  internalNotes       String?
  specialRequirements String?
  leadId              String?            @db.Uuid
  Lead                Lead?              @relation(fields: [tenantId, leadId], references: [tenantId, id])
  AccountAddress      AccountAddress[]
  AccountInsurance    AccountInsurance[]
  Activity            Activity[]
  ApprovalRule        ApprovalRule[]
  Contact             Contact[]
  Contract            Contract[]
  CreditMemo          CreditMemo[]
  Estimate            Estimate[]
  Invoice             Invoice[]
  JournalLine         JournalLine[]
  Opportunity         Opportunity[]
  Payment             Payment[]
  Project             Project[]
  Quote               Quote[]

  @@unique([tenantId, accountNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([globalId])
  @@index([tenantId, accountType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, industry])
  @@index([tenantId, leadId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AccountAddress {
  id                   String           @id @default(uuid(7)) @db.Uuid
  status               CRMChildStatus   @default(ACTIVE)
  version              Int              @default(1)
  createdAt            DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime         @db.Timestamptz(6)
  tenantId             String           @db.Uuid
  deletedAt            DateTime?        @db.Timestamptz(6)
  deletedByActorId     String?          @db.Uuid
  createdByActorId     String?          @db.Uuid
  updatedByActorId     String?          @db.Uuid
  auditCorrelationId   String?          @db.Uuid
  dataClassification   String           @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  // Address Classification
  addressType          AddressType // BILLING, SHIPPING, JOB_SITE, CORPORATE, MAILING
  addressName          String?          @db.VarChar(100) // "Main Office", "Project Site Alpha", etc.
  // Core Address Fields
  street1              String           @db.VarChar(255)
  street2              String?          @db.VarChar(255)
  city                 String           @db.VarChar(100)
  state                String?          @db.VarChar(50) // State/Province
  postalCode           String?          @db.VarChar(20) // ZIP/Postal Code
  country              String           @db.VarChar(50) // Country code or name
  county               String?          @db.VarChar(100) // Important for construction permits
  // Business Flags
  isPrimary            Boolean          @default(false) // Primary address for this type
  isDefault            Boolean          @default(false) // Default for all operations
  isBillingDefault     Boolean          @default(false) // Default for billing
  isShippingDefault    Boolean          @default(false) // Default for shipping/delivery
  isJobSite            Boolean          @default(false) // Construction job site
  // Construction-Specific Fields
  siteContactName      String?          @db.VarChar(200) // On-site contact person
  siteContactPhone     String?          @db.VarChar(20) // Emergency contact
  accessInstructions   String? // Gate codes, directions, restrictions
  deliveryInstructions String? // Material delivery specifics
  workingHours         String?          @db.VarChar(100) // Site working hours
  permitRequired       Boolean          @default(false) // Requires permits/permissions
  // Geocoding for Route Optimization
  latitude             Decimal?         @db.Decimal(10, 8)
  longitude            Decimal?         @db.Decimal(11, 8)
  timezone             String?          @db.VarChar(50)
  // Validation & Status
  isValidated          Boolean          @default(false) // Address validation status
  validatedAt          DateTime?        @db.Timestamptz(6)
  validationSource     String?          @db.VarChar(50) // USPS, Google, Manual, etc.
  isActive             Boolean          @default(true)
  deactivatedAt        DateTime?        @db.Timestamptz(6)
  deactivationReason   String?          @db.VarChar(255)
  // Relationships
  accountId            String           @db.Uuid
  Account              Account          @relation(fields: [tenantId, accountId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, accountId, addressType, isPrimary], map: "unique_primary_address_per_type")
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountId])
  @@index([tenantId, addressType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, city, state])
  @@index([tenantId, country])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, isBillingDefault])
  @@index([tenantId, isDefault])
  @@index([tenantId, isJobSite])
  @@index([tenantId, isPrimary])
  @@index([tenantId, isShippingDefault])
  @@index([tenantId, isValidated])
  @@index([tenantId, latitude, longitude])
  @@index([tenantId, postalCode])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Activity {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             ActivityStatus       @default(SCHEDULED)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  activityType       String               @db.VarChar(50)
  subject            String               @db.VarChar(255)
  description        String?
  priority           String               @db.VarChar(20)
  scheduledAt        DateTime?            @db.Timestamptz(6)
  completedAt        DateTime?            @db.Timestamptz(6)
  dueDate            DateTime?            @db.Date
  duration           Int?
  outcome            String?              @db.VarChar(100)
  followUpDate       DateTime?            @db.Date
  notes              String?
  accountId          String?              @db.Uuid
  contactId          String?              @db.Uuid
  opportunityId      String?              @db.Uuid
  quoteId            String?              @db.Uuid
  leadId             String?              @db.Uuid
  Account            Account?             @relation(fields: [tenantId, accountId], references: [tenantId, id])
  Contact            Contact?             @relation(fields: [tenantId, contactId], references: [tenantId, id])
  Lead               Lead?                @relation(fields: [tenantId, leadId], references: [tenantId, id])
  Opportunity        Opportunity?         @relation(fields: [tenantId, opportunityId], references: [tenantId, id])
  Quote              Quote?               @relation(fields: [tenantId, quoteId], references: [tenantId, id])
  ActivityAttachment ActivityAttachment[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountId])
  @@index([tenantId, activityType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contactId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, leadId])
  @@index([tenantId, opportunityId])
  @@index([tenantId, priority])
  @@index([tenantId, quoteId])
  @@index([tenantId, scheduledAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ActivityAttachment {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CRMChildStatus   @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  fileName           String           @db.VarChar(255)
  fileUrl            String
  fileSize           Int?
  mimeType           String?          @db.VarChar(100)
  activityId         String           @db.Uuid
  Activity           Activity         @relation(fields: [tenantId, activityId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, activityId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Allowance {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  allowanceCode      String                 @db.Citext
  allowanceName      String                 @db.VarChar(100)
  description        String?
  allowanceType      String                 @db.VarChar(50)
  amount             Decimal?               @db.Decimal(12, 4)
  percentage         Decimal?               @db.Decimal(8, 4)
  hourlyRate         Decimal?               @db.Decimal(12, 4)
  minimumAmount      Decimal?               @db.Decimal(12, 4)
  maximumAmount      Decimal?               @db.Decimal(12, 4)
  annualLimit        Decimal?               @db.Decimal(12, 4)
  isTaxable          Boolean                @default(true)
  taxCategory        String?                @db.VarChar(50)
  effectiveDate      DateTime               @db.Date
  expirationDate     DateTime?              @db.Date
  isActive           Boolean                @default(true)
  employeeGroup      String?                @db.VarChar(50)
  department         String?                @db.VarChar(50)
  jobTitle           String?                @db.VarChar(100)
  glAccount          String?                @db.VarChar(50)
  costCenter         String?                @db.VarChar(50)

  @@unique([tenantId, allowanceCode])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, allowanceType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, employeeGroup])
  @@index([tenantId, isActive])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AnomalyCase {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CaseStatus       @default(OPEN)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Case Fields
  caseNumber  String          @db.VarChar(50) // Human-readable case number
  title       String          @db.VarChar(255)
  description String?
  priority    CasePriority    @default(MEDIUM)
  severity    AnomalySeverity @default(MEDIUM)
  category    CaseCategory    @default(ANOMALY_DETECTION)

  // Source Information
  fraudPolicyId   String? @db.Uuid
  anomalySignalId String? @db.Uuid
  sourceSystem    String? @db.VarChar(100)
  sourceReference String? @db.VarChar(255)

  // Assignment and Ownership
  assignedTo   String?   @db.Uuid // Member ID
  assignedTeam String?   @db.VarChar(100)
  assignedAt   DateTime? @db.Timestamptz(6)

  // Investigation Details
  investigationStarted DateTime? @db.Timestamptz(6)
  investigationNotes   String?
  evidenceCollected    Json? // Evidence and artifacts

  // Risk Assessment
  riskScore        Decimal?       @db.Decimal(3, 2) // 0.0 to 1.0
  impactAssessment String?
  businessImpact   BusinessImpact @default(LOW)
  financialImpact  Decimal?       @db.Decimal(15, 2)

  // Resolution
  resolution         String?
  resolutionCategory ResolutionCategory?
  resolvedAt         DateTime?           @db.Timestamptz(6)
  resolvedBy         String?             @db.Uuid

  // Escalation
  escalatedAt      DateTime? @db.Timestamptz(6)
  escalatedTo      String?   @db.Uuid
  escalationReason String?

  // SLA and Timing
  slaDeadline    DateTime? @db.Timestamptz(6)
  responseTime   Int? // Minutes to first response
  resolutionTime Int? // Minutes to resolution

  // Communication
  customerNotified   Boolean   @default(false)
  customerNotifiedAt DateTime? @db.Timestamptz(6)
  externalReference  String?   @db.VarChar(255) // External ticket/case number

  // Compliance and Reporting
  regulatoryReporting Boolean   @default(false)
  reportedToRegulator DateTime? @db.Timestamptz(6)
  complianceNotes     String?

  // Related Cases
  parentCaseId String?  @db.Uuid
  relatedCases String[] @db.Uuid

  // Metrics and Analytics
  falsePositive Boolean?
  truePositive  Boolean?
  feedbackScore Int? // 1-5 rating

  // Configuration
  metadata Json?
  tags     String[] @db.VarChar(50)

  // Relations
  Tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  FraudPolicy       FraudPolicy?        @relation(fields: [fraudPolicyId], references: [id])
  AnomalySignal     AnomalySignal?      @relation(fields: [anomalySignalId], references: [id])
  ParentCase        AnomalyCase?        @relation("CaseHierarchy", fields: [parentCaseId], references: [id])
  ChildCases        AnomalyCase[]       @relation("CaseHierarchy")
  AnomalyCaseAction AnomalyCaseAction[]

  @@unique([tenantId, id])
  @@unique([tenantId, caseNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, anomalySignalId])
  @@index([tenantId, assignedTo])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, businessImpact])
  @@index([tenantId, category])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, fraudPolicyId])
  @@index([tenantId, parentCaseId])
  @@index([tenantId, priority])
  @@index([tenantId, resolvedAt])
  @@index([tenantId, riskScore])
  @@index([tenantId, severity])
  @@index([tenantId, slaDeadline])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AnomalyCaseAction {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             String           @default("ACTIVE")
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Action Fields
  anomalyCaseId String         @db.Uuid
  actionType    CaseActionType @default(COMMENT)
  title         String         @db.VarChar(255)
  description   String?

  // Action Details
  actionData    Json? // Action-specific data
  previousValue Json? // Previous state for audit
  newValue      Json? // New state for audit

  // Execution Context
  executedBy        String?  @db.Uuid // Member ID
  executedAt        DateTime @default(now()) @db.Timestamptz(6)
  executionDuration Int? // Milliseconds

  // Workflow Integration
  workflowStepId     String? @db.Uuid
  workflowInstanceId String? @db.Uuid
  isAutomated        Boolean @default(false)
  automationRule     String? @db.VarChar(255)

  // Communication
  notificationSent       Boolean  @default(false)
  notificationRecipients String[] @db.Uuid // Member IDs
  externalNotification   Boolean  @default(false)

  // Approval Process
  requiresApproval Boolean   @default(false)
  approvedBy       String?   @db.Uuid
  approvedAt       DateTime? @db.Timestamptz(6)
  approvalNotes    String?

  // Impact and Results
  impactDescription String?
  resultStatus      ActionResultStatus @default(SUCCESS)
  errorMessage      String?

  // Follow-up Actions
  triggersFollowUp Boolean   @default(false)
  followUpActions  String[]  @db.VarChar(100) // Action types to trigger
  followUpDeadline DateTime? @db.Timestamptz(6)

  // Integration
  externalSystemId  String? @db.VarChar(100)
  externalReference String? @db.VarChar(255)
  apiEndpoint       String? @db.VarChar(500)

  // Performance Metrics
  processingTime Int? // Milliseconds
  retryCount     Int       @default(0)
  lastRetryAt    DateTime? @db.Timestamptz(6)

  // Configuration
  metadata Json?
  tags     String[] @db.VarChar(50)

  // Relations
  Tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  AnomalyCase AnomalyCase @relation(fields: [anomalyCaseId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, actionType])
  @@index([tenantId, anomalyCaseId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, executedAt])
  @@index([tenantId, executedBy])
  @@index([tenantId, isAutomated])
  @@index([tenantId, requiresApproval])
  @@index([tenantId, resultStatus])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AnomalySignal {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             AnomalyStatus    @default(DETECTED)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Signal Fields
  name        String          @db.VarChar(255)
  description String?
  anomalyType AnomalyType     @default(STATISTICAL)
  severity    AnomalySeverity @default(MEDIUM)
  confidence  Decimal         @db.Decimal(3, 2) // 0.0 to 1.0

  // Detection Context
  entityType      String  @db.VarChar(100) // What entity was analyzed
  entityId        String  @db.Uuid // Specific entity ID
  detectionMethod String  @db.VarChar(100) // Algorithm/method used
  detectionModel  String? @db.VarChar(100) // ML model name/version

  // Signal Data
  observedValue  Decimal? @db.Decimal(15, 4)
  expectedValue  Decimal? @db.Decimal(15, 4)
  deviationScore Decimal? @db.Decimal(10, 4)
  threshold      Decimal? @db.Decimal(15, 4)

  // Time Context
  detectedAt        DateTime @db.Timestamptz(6)
  observationWindow Int      @default(60) // Minutes
  baselinePeriod    Int      @default(1440) // Minutes (24h)

  // Statistical Metrics
  zScore     Decimal? @db.Decimal(10, 4)
  pValue     Decimal? @db.Decimal(10, 8)
  percentile Decimal? @db.Decimal(5, 2)

  // Feature Data
  features          Json? // Feature vector used for detection
  featureImportance Json? // Feature importance scores

  // Context and Environment
  businessContext      Json? // Business-specific context
  environmentalFactors Json? // External factors (holidays, events)

  // Processing Status
  isProcessed Boolean   @default(false)
  processedAt DateTime? @db.Timestamptz(6)
  processedBy String?   @db.Uuid

  // Investigation
  requiresInvestigation Boolean   @default(true)
  investigatedAt        DateTime? @db.Timestamptz(6)
  investigatedBy        String?   @db.Uuid
  investigationNotes    String?

  // Resolution
  isFalsePositive Boolean?
  resolvedAt      DateTime? @db.Timestamptz(6)
  resolvedBy      String?   @db.Uuid
  resolutionNotes String?

  // Related Signals
  parentSignalId    String?  @db.Uuid
  correlatedSignals String[] @db.Uuid

  // Configuration
  metadata Json?
  tags     String[] @db.VarChar(50)

  // Relations
  Tenant               Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  ParentSignal         AnomalySignal?         @relation("SignalHierarchy", fields: [parentSignalId], references: [id])
  ChildSignals         AnomalySignal[]        @relation("SignalHierarchy")
  AnomalySignalFeature AnomalySignalFeature[]
  AnomalyCase          AnomalyCase[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, anomalyType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, confidence])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, detectedAt])
  @@index([tenantId, entityId])
  @@index([tenantId, entityType])
  @@index([tenantId, isProcessed])
  @@index([tenantId, parentSignalId])
  @@index([tenantId, requiresInvestigation])
  @@index([tenantId, severity])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AnomalySignalFeature {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             String           @default("ACTIVE")
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Feature Fields
  anomalySignalId String          @db.Uuid
  name            String          @db.VarChar(255)
  description     String?
  featureType     FeatureType     @default(NUMERICAL)
  dataType        FeatureDataType @default(DECIMAL)

  // Feature Value
  rawValue     String? // Original raw value as string
  numericValue Decimal?  @db.Decimal(15, 4)
  stringValue  String?   @db.VarChar(1000)
  booleanValue Boolean?
  dateValue    DateTime? @db.Timestamptz(6)
  jsonValue    Json?

  // Statistical Properties
  mean              Decimal? @db.Decimal(15, 4)
  median            Decimal? @db.Decimal(15, 4)
  standardDeviation Decimal? @db.Decimal(15, 4)
  variance          Decimal? @db.Decimal(15, 4)
  minimum           Decimal? @db.Decimal(15, 4)
  maximum           Decimal? @db.Decimal(15, 4)

  // Percentiles
  percentile25 Decimal? @db.Decimal(15, 4)
  percentile50 Decimal? @db.Decimal(15, 4)
  percentile75 Decimal? @db.Decimal(15, 4)
  percentile90 Decimal? @db.Decimal(15, 4)
  percentile95 Decimal? @db.Decimal(15, 4)
  percentile99 Decimal? @db.Decimal(15, 4)

  // Feature Engineering
  isNormalized        Boolean  @default(false)
  normalizationMethod String?  @db.VarChar(50) // z-score, min-max, etc.
  normalizedValue     Decimal? @db.Decimal(10, 6)

  // Categorical Features
  categoryValue     String? @db.VarChar(255)
  categoryFrequency Int?
  categoryRank      Int?
  isRareCategory    Boolean @default(false)

  // Time-based Features
  timeWindow        Int? // Minutes for time-based aggregation
  aggregationMethod AggregationFunction @default(SUM)
  seasonalComponent Decimal?            @db.Decimal(10, 6)
  trendComponent    Decimal?            @db.Decimal(10, 6)

  // Feature Importance and Selection
  importance       Decimal? @db.Decimal(5, 4) // 0.0 to 1.0
  correlationScore Decimal? @db.Decimal(5, 4) // -1.0 to 1.0
  informationGain  Decimal? @db.Decimal(10, 6)
  chiSquareScore   Decimal? @db.Decimal(15, 4)

  // Anomaly Contribution
  contributionScore Decimal? @db.Decimal(5, 4) // How much this feature contributed to anomaly
  isAnomalous       Boolean  @default(false)
  anomalyThreshold  Decimal? @db.Decimal(15, 4)

  // Feature Lineage
  sourceTable         String?  @db.VarChar(100)
  sourceColumn        String?  @db.VarChar(100)
  transformationSteps String[] @db.VarChar(255)

  // Quality Metrics
  completeness Decimal? @db.Decimal(3, 2) // 0.0 to 1.0
  uniqueness   Decimal? @db.Decimal(3, 2) // 0.0 to 1.0
  validity     Decimal? @db.Decimal(3, 2) // 0.0 to 1.0

  // Configuration
  metadata Json?
  tags     String[] @db.VarChar(50)

  // Relations
  Tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  AnomalySignal AnomalySignal @relation(fields: [anomalySignalId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, anomalySignalId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, anomalySignalId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contributionScore])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, featureType])
  @@index([tenantId, importance])
  @@index([tenantId, isAnomalous])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ApiKey {
  id                                      String           @id @default(uuid(7)) @db.Uuid
  status                                  ApiKeyStatus     @default(ACTIVE)
  version                                 Int              @default(1)
  createdAt                               DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                               DateTime         @db.Timestamptz(6)
  tenantId                                String           @db.Uuid
  deletedAt                               DateTime?        @db.Timestamptz(6)
  deletedByActorId                        String?          @db.Uuid
  createdByActorId                        String?          @db.Uuid
  updatedByActorId                        String?          @db.Uuid
  auditCorrelationId                      String?          @db.Uuid
  dataClassification                      String           @default("CONFIDENTIAL")
  retentionPolicy                         RetentionPolicy?
  userId                                  String?          @db.Uuid
  memberId                                String?          @db.Uuid
  serviceAccountId                        String?          @db.Uuid
  name                                    String           @db.VarChar(255)
  description                             String?
  keyPrefix                               String           @db.VarChar(20)
  hashedKey                               String           @unique @db.VarChar(255)
  keyHint                                 String           @db.VarChar(10)
  scope                                   ApiKeyScope      @default(READ_ONLY)
  permissions                             String[]         @db.VarChar(100)
  allowedIps                              String[]         @db.VarChar(45)
  allowedDomains                          String[]         @db.VarChar(255)
  isActive                                Boolean          @default(true)
  expiresAt                               DateTime?        @db.Timestamptz(6)
  lastUsedAt                              DateTime?        @db.Timestamptz(6)
  useCount                                Int              @default(0)
  dailyLimit                              Int?
  monthlyLimit                            Int?
  currentDailyUse                         Int              @default(0)
  currentMonthlyUse                       Int              @default(0)
  rateLimit                               Int?
  rateLimitWindow                         Int?             @default(60)
  riskScore                               Int              @default(0)
  suspiciousActivity                      Boolean          @default(false)
  lastFailureAt                           DateTime?        @db.Timestamptz(6)
  failureCount                            Int              @default(0)
  revokedAt                               DateTime?        @db.Timestamptz(6)
  revocationReason                        String?
  revokedByMemberId                       String?          @db.Uuid
  rotatedAt                               DateTime?        @db.Timestamptz(6)
  rotatedFromKeyId                        String?          @db.Uuid
  environment                             String           @default("production") @db.VarChar(20)
  tags                                    String[]         @db.VarChar(50)
  metadata                                Json?
  Member_ApiKey_memberIdToMember          Member?          @relation("ApiKey_memberIdToMember", fields: [memberId], references: [id], onDelete: Cascade)
  Member_ApiKey_revokedByMemberIdToMember Member?          @relation("ApiKey_revokedByMemberIdToMember", fields: [revokedByMemberId], references: [id])
  ApiKey                                  ApiKey?          @relation("ApiKeyToApiKey", fields: [rotatedFromKeyId], references: [id])
  other_ApiKey                            ApiKey[]         @relation("ApiKeyToApiKey")
  Tenant                                  Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  User                                    User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, name])
  @@index([createdAt], type: Brin)
  @@index([revokedByMemberId])
  @@index([rotatedFromKeyId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, environment])
  @@index([tenantId, expiresAt])
  @@index([tenantId, isActive])
  @@index([tenantId, lastUsedAt])
  @@index([tenantId, memberId])
  @@index([tenantId, scope])
  @@index([tenantId, serviceAccountId])
  @@index([tenantId, status])
  @@index([tenantId, suspiciousActivity])
  @@index([tenantId, userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ApprovalDecision {
  id                                                       String                 @id @default(uuid(7)) @db.Uuid
  status                                                   ApprovalDecisionStatus @default(PENDING)
  version                                                  Int                    @default(1)
  createdAt                                                DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                                                DateTime               @db.Timestamptz(6)
  tenantId                                                 String                 @db.Uuid
  deletedAt                                                DateTime?              @db.Timestamptz(6)
  deletedByActorId                                         String?                @db.Uuid
  createdByActorId                                         String?                @db.Uuid
  updatedByActorId                                         String?                @db.Uuid
  auditCorrelationId                                       String?                @db.Uuid
  dataClassification                                       String                 @default("CONFIDENTIAL")
  retentionPolicy                                          RetentionPolicy?
  decisionType                                             ApprovalDecisionType   @default(INDIVIDUAL)
  sequenceNumber                                           Int                    @default(1)
  level                                                    Int                    @default(1)
  approvalRequestId                                        String                 @db.Uuid
  approverId                                               String                 @db.Uuid
  approverRole                                             String?                @db.VarChar(100)
  isDelegated                                              Boolean                @default(false)
  delegatedFromId                                          String?                @db.Uuid
  delegatedAt                                              DateTime?              @db.Timestamptz(6)
  decision                                                 ApprovalDecisionStatus @default(PENDING)
  decisionAt                                               DateTime?              @db.Timestamptz(6)
  comments                                                 String?
  reasonCodeId                                             String?                @db.Uuid
  assignedAt                                               DateTime?              @db.Timestamptz(6)
  dueDate                                                  DateTime?              @db.Timestamptz(6)
  reminderSentAt                                           DateTime?              @db.Timestamptz(6)
  escalatedAt                                              DateTime?              @db.Timestamptz(6)
  deviceInfo                                               String?
  ipAddress                                                String?                @db.VarChar(45)
  geolocation                                              String?
  userAgent                                                String?
  hasConditions                                            Boolean                @default(false)
  conditions                                               String?
  conditionsMet                                            Boolean?
  attachmentIds                                            String?
  evidenceRequired                                         Boolean                @default(false)
  evidenceProvided                                         Boolean                @default(false)
  notificationSent                                         Boolean                @default(false)
  notificationSentAt                                       DateTime?              @db.Timestamptz(6)
  reminderCount                                            Int                    @default(0)
  ApprovalRequest                                          ApprovalRequest        @relation(fields: [tenantId, approvalRequestId], references: [tenantId, id], onDelete: Cascade)
  Member_ApprovalDecision_tenantId_approverIdToMember      Member                 @relation("ApprovalDecision_tenantId_approverIdToMember", fields: [tenantId, approverId], references: [tenantId, id])
  Member_ApprovalDecision_tenantId_delegatedFromIdToMember Member?                @relation("ApprovalDecision_tenantId_delegatedFromIdToMember", fields: [tenantId, delegatedFromId], references: [tenantId, id], onDelete: NoAction)
  Tenant                                                   Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  ReasonCode                                               ReasonCode?            @relation(fields: [tenantId, reasonCodeId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, approvalRequestId, sequenceNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([level])
  @@index([sequenceNumber])
  @@index([tenantId, approvalRequestId])
  @@index([tenantId, approverId])
  @@index([tenantId, assignedAt])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, decisionAt])
  @@index([tenantId, decisionType])
  @@index([tenantId, decision])
  @@index([tenantId, delegatedFromId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, isDelegated])
  @@index([tenantId, reasonCodeId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ApprovalRequest {
  id                                                      String                  @id @default(uuid(7)) @db.Uuid
  status                                                  ApprovalRequestStatus   @default(DRAFT)
  version                                                 Int                     @default(1)
  createdAt                                               DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt                                               DateTime                @db.Timestamptz(6)
  tenantId                                                String                  @db.Uuid
  deletedAt                                               DateTime?               @db.Timestamptz(6)
  deletedByActorId                                        String?                 @db.Uuid
  createdByActorId                                        String?                 @db.Uuid
  updatedByActorId                                        String?                 @db.Uuid
  auditCorrelationId                                      String?                 @db.Uuid
  dataClassification                                      String                  @default("CONFIDENTIAL")
  retentionPolicy                                         RetentionPolicy?
  requestNumber                                           String                  @db.VarChar(50)
  title                                                   String                  @db.VarChar(255)
  description                                             String?
  priority                                                ApprovalRequestPriority @default(NORMAL)
  source                                                  ApprovalRequestSource   @default(AUTOMATIC)
  entityType                                              ApprovalEntityType
  entityId                                                String                  @db.Uuid
  entityNumber                                            String?                 @db.VarChar(100)
  entityAmount                                            Decimal?                @db.Decimal(18, 2)
  currency                                                String?                 @default("USD") @db.VarChar(3)
  approvalRuleId                                          String                  @db.Uuid
  totalApprovers                                          Int                     @default(1)
  approvedCount                                           Int                     @default(0)
  rejectedCount                                           Int                     @default(0)
  requiredApprovals                                       Int                     @default(1)
  isSequential                                            Boolean                 @default(true)
  submittedAt                                             DateTime?               @db.Timestamptz(6)
  dueDate                                                 DateTime?               @db.Timestamptz(6)
  completedAt                                             DateTime?               @db.Timestamptz(6)
  escalatedAt                                             DateTime?               @db.Timestamptz(6)
  submittedById                                           String?                 @db.Uuid
  submitterComments                                       String?
  currentApprover                                         String?                 @db.Uuid
  currentLevel                                            Int                     @default(1)
  nextApprover                                            String?                 @db.Uuid
  finalDecision                                           String?                 @db.VarChar(20)
  finalDecisionAt                                         DateTime?               @db.Timestamptz(6)
  finalDecisionBy                                         String?                 @db.Uuid
  finalComments                                           String?
  tags                                                    String?
  metadata                                                String?
  attachmentCount                                         Int                     @default(0)
  ApprovalDecision                                        ApprovalDecision[]
  ApprovalRule                                            ApprovalRule            @relation(fields: [tenantId, approvalRuleId], references: [tenantId, id])
  Member_ApprovalRequest_tenantId_currentApproverToMember Member?                 @relation("ApprovalRequest_tenantId_currentApproverToMember", fields: [tenantId, currentApprover], references: [tenantId, id], onDelete: NoAction)
  Member_ApprovalRequest_tenantId_finalDecisionByToMember Member?                 @relation("ApprovalRequest_tenantId_finalDecisionByToMember", fields: [tenantId, finalDecisionBy], references: [tenantId, id], onDelete: NoAction)
  Tenant                                                  Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_ApprovalRequest_tenantId_submittedByIdToMember   Member?                 @relation("ApprovalRequest_tenantId_submittedByIdToMember", fields: [tenantId, submittedById], references: [tenantId, id], onDelete: NoAction)
  EstimateApproval                                        EstimateApproval[]
  weather_alerts                                          weather_alerts[]

  // Actor Audit Relationships
  CreatedByActor Actor? @relation("ApprovalRequestCreatedByActor", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("ApprovalRequestUpdatedByActor", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor? @relation("ApprovalRequestDeletedByActor", fields: [deletedByActorId], references: [id])

  @@unique([tenantId, id])
  @@unique([tenantId, requestNumber])
  @@index([createdAt], type: Brin)
  @@index([entityAmount])
  @@index([tenantId, approvalRuleId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, completedAt])
  @@index([tenantId, currentApprover])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, entityId])
  @@index([tenantId, entityType])
  @@index([tenantId, priority])
  @@index([tenantId, source])
  @@index([tenantId, status])
  @@index([tenantId, submittedAt])
  @@index([tenantId, submittedById])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ApprovalRule {
  id                     String                   @id @default(uuid(7)) @db.Uuid
  status                 ApprovalRuleStatus       @default(ACTIVE)
  version                Int                      @default(1)
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                 @db.Timestamptz(6)
  tenantId               String                   @db.Uuid
  deletedAt              DateTime?                @db.Timestamptz(6)
  deletedByActorId       String?                  @db.Uuid
  createdByActorId       String?                  @db.Uuid
  updatedByActorId       String?                  @db.Uuid
  auditCorrelationId     String?                  @db.Uuid
  dataClassification     String                   @default("INTERNAL")
  retentionPolicy        RetentionPolicy?
  ruleName               String                   @db.VarChar(255)
  description            String?
  ruleType               ApprovalRuleType         @default(AMOUNT_BASED)
  scope                  ApprovalRuleScope        @default(GLOBAL)
  priority               Int                      @default(1)
  entityType             ApprovalEntityType
  entityAttribute        String?                  @db.VarChar(100)
  amountThreshold        Decimal?                 @db.Decimal(18, 2)
  currency               String?                  @default("USD") @db.VarChar(3)
  conditions             String?
  customLogic            String?
  requiredApprovals      Int                      @default(1)
  isSequential           Boolean                  @default(true)
  allowDelegation        Boolean                  @default(true)
  allowSelfApproval      Boolean                  @default(false)
  timeoutHours           Int?
  departmentId           String?                  @db.Uuid
  projectId              String?                  @db.Uuid
  vendorId               String?                  @db.Uuid
  customerId             String?                  @db.Uuid
  moduleScope            String?                  @db.VarChar(50)
  escalationEnabled      Boolean                  @default(false)
  escalationHours        Int?
  escalationLevel        Int?                     @default(1)
  isActive               Boolean                  @default(true)
  effectiveFrom          DateTime                 @db.Date
  effectiveTo            DateTime?                @db.Date
  lastTriggeredAt        DateTime?                @db.Timestamptz(6)
  usageCount             Int                      @default(0)
  ApprovalRequest        ApprovalRequest[]
  Account                Account?                 @relation(fields: [tenantId, customerId], references: [tenantId, id], onDelete: NoAction)
  Department             Department?              @relation(fields: [tenantId, departmentId], references: [tenantId, id], onDelete: NoAction)
  Tenant                 Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project                Project?                 @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  Vendor                 Vendor?                  @relation(fields: [tenantId, vendorId], references: [tenantId, id], onDelete: NoAction)
  external_data_policies external_data_policies[]

  @@unique([tenantId, id])
  @@unique([tenantId, ruleName])
  @@index([amountThreshold])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, customerId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, departmentId])
  @@index([tenantId, effectiveFrom])
  @@index([tenantId, effectiveTo])
  @@index([tenantId, entityType])
  @@index([tenantId, isActive])
  @@index([tenantId, priority])
  @@index([tenantId, projectId])
  @@index([tenantId, ruleType])
  @@index([tenantId, scope])
  @@index([tenantId, status])
  @@index([tenantId, vendorId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Asset {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             AssetStatus         @default(ACTIVE)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  assetNumber        String              @db.VarChar(50)
  assetName          String              @db.VarChar(255)
  assetType          String              @db.VarChar(100)
  category           String?             @db.VarChar(100)
  subcategory        String?             @db.VarChar(100)
  description        String?             @db.VarChar(500)
  manufacturer       String?             @db.VarChar(255)
  model              String?             @db.VarChar(255)
  serialNumber       String?             @db.VarChar(100)
  yearManufactured   Int?
  condition          AssetCondition      @default(GOOD)
  purchasePrice      Decimal?            @db.Decimal(12, 4)
  currentValue       Decimal?            @db.Decimal(12, 4)
  depreciationMethod String?             @db.VarChar(50)
  usefulLife         Int?
  locationId         String?             @db.Uuid
  assignedTo         String?             @db.Uuid
  assignedDate       DateTime?           @db.Timestamptz(6)
  purchaseDate       DateTime?           @db.Date
  warrantyExpiration DateTime?           @db.Date
  lastServiceDate    DateTime?           @db.Date
  nextServiceDate    DateTime?           @db.Date
  regulatoryCode     String?             @db.VarChar(50)
  safetyRating       String?             @db.VarChar(20)
  requiresInspection Boolean             @default(false)
  AssetAssignment    AssetAssignment[]
  AssetDepreciation  AssetDepreciation[]
  AssetDocument      AssetDocument[]
  AssetMaintenance   AssetMaintenance[]
  AssetMeterReading  AssetMeterReading[]

  @@unique([tenantId, assetNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assetType])
  @@index([tenantId, assignedTo])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, category])
  @@index([tenantId, condition])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, locationId])
  @@index([tenantId, nextServiceDate])
  @@index([tenantId, status])
  @@index([tenantId, warrantyExpiration])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AssetAssignment {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  assignmentNumber   String               @db.VarChar(50)
  assignmentType     String               @db.VarChar(50)
  assignmentDate     DateTime             @db.Timestamptz(6)
  expectedReturnDate DateTime?            @db.Timestamptz(6)
  actualReturnDate   DateTime?            @db.Timestamptz(6)
  assignmentStatus   String               @default("ACTIVE") @db.VarChar(20)
  isActive           Boolean              @default(true)
  assignedTo         String               @db.Uuid
  assignedBy         String?              @db.Uuid
  department         String?              @db.VarChar(100)
  location           String?              @db.VarChar(255)
  conditionOut       AssetCondition?
  conditionIn        AssetCondition?
  assignmentNotes    String?
  returnNotes        String?
  assetId            String               @db.Uuid
  Asset              Asset                @relation(fields: [tenantId, assetId], references: [tenantId, id])

  @@unique([tenantId, assignmentNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assetId])
  @@index([tenantId, assignedTo])
  @@index([tenantId, assignmentDate])
  @@index([tenantId, assignmentStatus])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expectedReturnDate])
  @@index([tenantId, isActive])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AssetDepreciation {
  id                      String               @id @default(uuid(7)) @db.Uuid
  status                  InventoryChildStatus @default(ACTIVE)
  version                 Int                  @default(1)
  createdAt               DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime             @db.Timestamptz(6)
  tenantId                String               @db.Uuid
  deletedAt               DateTime?            @db.Timestamptz(6)
  deletedByActorId        String?              @db.Uuid
  createdByActorId        String?              @db.Uuid
  updatedByActorId        String?              @db.Uuid
  auditCorrelationId      String?              @db.Uuid
  dataClassification      String               @default("CONFIDENTIAL")
  retentionPolicy         RetentionPolicy?
  depreciationPeriod      String               @db.VarChar(20)
  periodStartDate         DateTime             @db.Date
  periodEndDate           DateTime             @db.Date
  fiscalYear              Int
  fiscalPeriod            Int
  depreciationMethod      String               @db.VarChar(50)
  usefulLife              Int
  salvageValue            Decimal              @db.Decimal(12, 4)
  bookValueStart          Decimal              @db.Decimal(12, 4)
  bookValueEnd            Decimal              @db.Decimal(12, 4)
  depreciationAmount      Decimal              @db.Decimal(12, 4)
  accumulatedDepreciation Decimal              @db.Decimal(12, 4)
  isPosted                Boolean              @default(false)
  postedDate              DateTime?            @db.Timestamptz(6)
  postedBy                String?              @db.Uuid
  reversalDate            DateTime?            @db.Timestamptz(6)
  notes                   String?
  glAccount               String?              @db.VarChar(50)
  assetId                 String               @db.Uuid
  Asset                   Asset                @relation(fields: [tenantId, assetId], references: [tenantId, id])

  @@unique([tenantId, assetId, fiscalYear, fiscalPeriod])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assetId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, fiscalYear])
  @@index([tenantId, isPosted])
  @@index([tenantId, periodStartDate])
  @@index([tenantId, postedDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AssetDocument {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  documentNumber     String               @db.VarChar(50)
  documentType       String               @db.VarChar(50)
  documentTitle      String               @db.VarChar(255)
  description        String?              @db.VarChar(500)
  fileName           String               @db.VarChar(255)
  fileType           String               @db.VarChar(100)
  fileSize           Int
  fileUrl            String
  fileHash           String?              @db.VarChar(64)
  documentDate       DateTime?            @db.Date
  expirationDate     DateTime?            @db.Date
  issuer             String?              @db.VarChar(255)
  documentVersion    String?              @db.VarChar(20)
  isConfidential     Boolean              @default(false)
  accessLevel        String               @default("INTERNAL") @db.VarChar(20)
  requiresApproval   Boolean              @default(false)
  approvedBy         String?              @db.Uuid
  approvedDate       DateTime?            @db.Timestamptz(6)
  verifiedBy         String?              @db.Uuid
  verifiedDate       DateTime?            @db.Timestamptz(6)
  assetId            String               @db.Uuid
  Asset              Asset                @relation(fields: [tenantId, assetId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, documentNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accessLevel])
  @@index([tenantId, assetId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, documentDate])
  @@index([tenantId, documentType])
  @@index([tenantId, expirationDate])
  @@index([tenantId, isConfidential])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AssetMaintenance {
  id                  String               @id @default(uuid(7)) @db.Uuid
  status              InventoryChildStatus @default(ACTIVE)
  version             Int                  @default(1)
  createdAt           DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime             @db.Timestamptz(6)
  tenantId            String               @db.Uuid
  deletedAt           DateTime?            @db.Timestamptz(6)
  deletedByActorId    String?              @db.Uuid
  createdByActorId    String?              @db.Uuid
  updatedByActorId    String?              @db.Uuid
  auditCorrelationId  String?              @db.Uuid
  dataClassification  String               @default("INTERNAL")
  retentionPolicy     RetentionPolicy?
  maintenanceNumber   String               @db.VarChar(50)
  maintenanceType     String               @db.VarChar(50)
  maintenanceDate     DateTime             @db.Timestamptz(6)
  scheduledDate       DateTime?            @db.Timestamptz(6)
  completedDate       DateTime?            @db.Timestamptz(6)
  maintenanceStatus   String               @default("SCHEDULED") @db.VarChar(20)
  priority            String               @default("NORMAL") @db.VarChar(20)
  workDescription     String
  workPerformed       String?
  partsUsed           String?
  laborHours          Decimal?             @db.Decimal(8, 2)
  laborCost           Decimal?             @db.Decimal(12, 4)
  partsCost           Decimal?             @db.Decimal(12, 4)
  totalCost           Decimal?             @db.Decimal(12, 4)
  performedBy         String?              @db.Uuid
  supervisedBy        String?              @db.Uuid
  vendor              String?              @db.VarChar(255)
  nextMaintenanceDate DateTime?            @db.Date
  maintenanceInterval Int?
  assetId             String               @db.Uuid
  Asset               Asset                @relation(fields: [tenantId, assetId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, maintenanceNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assetId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, maintenanceDate])
  @@index([tenantId, maintenanceStatus])
  @@index([tenantId, maintenanceType])
  @@index([tenantId, nextMaintenanceDate])
  @@index([tenantId, performedBy])
  @@index([tenantId, priority])
  @@index([tenantId, scheduledDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AssetMeterReading {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  readingNumber      String               @db.VarChar(50)
  readingDate        DateTime             @db.Timestamptz(6)
  readingTime        DateTime?            @db.Time(6)
  meterType          String               @db.VarChar(50)
  meterUnit          String               @db.VarChar(20)
  currentReading     Decimal              @db.Decimal(12, 4)
  previousReading    Decimal?             @db.Decimal(12, 4)
  readingDifference  Decimal?             @db.Decimal(12, 4)
  readingType        String               @default("MANUAL") @db.VarChar(20)
  readingSource      String?              @db.VarChar(100)
  readingLocation    String?              @db.VarChar(255)
  readBy             String?              @db.Uuid
  verifiedBy         String?              @db.Uuid
  verifiedDate       DateTime?            @db.Timestamptz(6)
  isEstimated        Boolean              @default(false)
  isAdjusted         Boolean              @default(false)
  notes              String?
  observations       String?
  maintenanceNeeded  Boolean              @default(false)
  assetId            String               @db.Uuid
  Asset              Asset                @relation(fields: [tenantId, assetId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, readingNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assetId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, maintenanceNeeded])
  @@index([tenantId, meterType])
  @@index([tenantId, readBy])
  @@index([tenantId, readingDate])
  @@index([tenantId, readingType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Attachment {
  id                                              String                  @id @default(uuid(7)) @db.Uuid
  status                                          AttachmentStatus        @default(ACTIVE)
  version                                         Int                     @default(1)
  createdAt                                       DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt                                       DateTime                @db.Timestamptz(6)
  tenantId                                        String                  @db.Uuid
  deletedAt                                       DateTime?               @db.Timestamptz(6)
  deletedByActorId                                String?                 @db.Uuid
  createdByActorId                                String?                 @db.Uuid
  updatedByActorId                                String?                 @db.Uuid
  auditCorrelationId                              String?                 @db.Uuid
  dataClassification                              String                  @default("INTERNAL")
  retentionPolicy                                 RetentionPolicy?
  title                                           String                  @db.VarChar(255)
  description                                     String?
  attachmentType                                  AttachmentType          @default(DOCUMENT)
  tags                                            String[]                @db.VarChar(50)
  fileObjectId                                    String                  @db.Uuid
  attachedById                                    String?                 @db.Uuid
  isPublic                                        Boolean                 @default(false)
  viewCount                                       Int                     @default(0)
  lastViewedAt                                    DateTime?               @db.Timestamptz(6)
  downloadCount                                   Int                     @default(0)
  lastDownloadedAt                                DateTime?               @db.Timestamptz(6)
  requiresApproval                                Boolean                 @default(false)
  isApproved                                      Boolean?
  approvedAt                                      DateTime?               @db.Timestamptz(6)
  approvedById                                    String?                 @db.Uuid
  approvalNotes                                   String?
  versionNumber                                   String?                 @db.VarChar(20)
  isLatestVersion                                 Boolean                 @default(true)
  parentAttachmentId                              String?                 @db.Uuid
  Member_Attachment_tenantId_approvedByIdToMember Member?                 @relation("Attachment_tenantId_approvedByIdToMember", fields: [tenantId, approvedById], references: [tenantId, id], onDelete: NoAction)
  Member_Attachment_tenantId_attachedByIdToMember Member?                 @relation("Attachment_tenantId_attachedByIdToMember", fields: [tenantId, attachedById], references: [tenantId, id], onDelete: NoAction)
  FileObject                                      FileObject              @relation(fields: [tenantId, fileObjectId], references: [tenantId, id], onDelete: Cascade)
  Tenant                                          Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Attachment                                      Attachment?             @relation("AttachmentToAttachment", fields: [tenantId, parentAttachmentId], references: [tenantId, id], onDelete: NoAction)
  other_Attachment                                Attachment[]            @relation("AttachmentToAttachment")
  AttachmentLink                                  AttachmentLink[]
  ProjectDocument                                 ProjectDocument[]
  ProjectTaskAttachment                           ProjectTaskAttachment[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, attachedById])
  @@index([tenantId, attachmentType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, fileObjectId])
  @@index([tenantId, isApproved])
  @@index([tenantId, isLatestVersion])
  @@index([tenantId, isPublic])
  @@index([tenantId, parentAttachmentId])
  @@index([tenantId, requiresApproval])
  @@index([tenantId, status])
  @@index([tenantId, versionNumber])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AttachmentLink {
  id                                                  String               @id @default(uuid(7)) @db.Uuid
  status                                              AttachmentLinkStatus @default(ACTIVE)
  version                                             Int                  @default(1)
  createdAt                                           DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt                                           DateTime             @db.Timestamptz(6)
  tenantId                                            String               @db.Uuid
  deletedAt                                           DateTime?            @db.Timestamptz(6)
  deletedByActorId                                    String?              @db.Uuid
  createdByActorId                                    String?              @db.Uuid
  updatedByActorId                                    String?              @db.Uuid
  auditCorrelationId                                  String?              @db.Uuid
  dataClassification                                  String               @default("INTERNAL")
  retentionPolicy                                     RetentionPolicy?
  linkType                                            AttachmentLinkType   @default(GENERAL)
  entityType                                          String               @db.VarChar(100)
  entityId                                            String               @db.Uuid
  attachmentId                                        String               @db.Uuid
  displayOrder                                        Int                  @default(0)
  isRequired                                          Boolean              @default(false)
  isPrimary                                           Boolean              @default(false)
  description                                         String?
  tags                                                String[]             @db.VarChar(50)
  canView                                             Boolean              @default(true)
  canDownload                                         Boolean              @default(true)
  canEdit                                             Boolean              @default(false)
  canDelete                                           Boolean              @default(false)
  linkedAt                                            DateTime             @default(now()) @db.Timestamptz(6)
  linkedById                                          String?              @db.Uuid
  unlinkedAt                                          DateTime?            @db.Timestamptz(6)
  unlinkedById                                        String?              @db.Uuid
  unlinkReason                                        String?
  Attachment                                          Attachment           @relation(fields: [tenantId, attachmentId], references: [tenantId, id], onDelete: Cascade)
  Tenant                                              Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_AttachmentLink_tenantId_linkedByIdToMember   Member?              @relation("AttachmentLink_tenantId_linkedByIdToMember", fields: [tenantId, linkedById], references: [tenantId, id], onDelete: NoAction)
  Member_AttachmentLink_tenantId_unlinkedByIdToMember Member?              @relation("AttachmentLink_tenantId_unlinkedByIdToMember", fields: [tenantId, unlinkedById], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, entityType, entityId, attachmentId])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, attachmentId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, displayOrder])
  @@index([tenantId, entityId])
  @@index([tenantId, entityType])
  @@index([tenantId, isPrimary])
  @@index([tenantId, isRequired])
  @@index([tenantId, linkType])
  @@index([tenantId, linkedById])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AuthFactor {
  id                   String           @id @default(uuid(7)) @db.Uuid
  status               AuthFactorStatus @default(PENDING_VERIFICATION)
  version              Int              @default(1)
  createdAt            DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime         @db.Timestamptz(6)
  tenantId             String?          @db.Uuid
  deletedAt            DateTime?        @db.Timestamptz(6)
  deletedByActorId     String?          @db.Uuid
  createdByActorId     String?          @db.Uuid
  updatedByActorId     String?          @db.Uuid
  auditCorrelationId   String?          @db.Uuid
  dataClassification   String           @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  userId               String           @db.Uuid
  memberId             String?          @db.Uuid
  factorType           AuthFactorType
  name                 String           @db.VarChar(255)
  isDefault            Boolean          @default(false)
  isPrimary            Boolean          @default(false)
  totpSecret           String?          @db.VarChar(255)
  totpAlgorithm        String?          @default("SHA1") @db.VarChar(10)
  totpDigits           Int?             @default(6)
  totpPeriod           Int?             @default(30)
  phoneNumber          String?          @db.VarChar(50)
  emailAddress         String?          @db.Citext
  webauthnCredentialId String?
  webauthnPublicKey    String?
  webauthnCounter      BigInt?          @default(0)
  webauthnTransports   String[]         @db.VarChar(20)
  backupCodes          String[]         @db.VarChar(20)
  backupCodesUsed      String[]         @db.VarChar(20)
  isVerified           Boolean          @default(false)
  verifiedAt           DateTime?        @db.Timestamptz(6)
  verificationCode     String?          @db.VarChar(10)
  verificationExpiry   DateTime?        @db.Timestamptz(6)
  lastUsedAt           DateTime?        @db.Timestamptz(6)
  useCount             Int              @default(0)
  failureCount         Int              @default(0)
  lastFailureAt        DateTime?        @db.Timestamptz(6)
  deviceInfo           Json?
  userAgent            String?
  ipAddress            String?          @db.VarChar(45)
  compromisedAt        DateTime?        @db.Timestamptz(6)
  compromiseReason     String?
  recoveredAt          DateTime?        @db.Timestamptz(6)
  metadata             Json?
  Member               Member?          @relation(fields: [memberId], references: [id], onDelete: Cascade)
  Tenant               Tenant?          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  User                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, factorType, name])
  @@unique([tenantId, userId, factorType, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, emailAddress])
  @@index([tenantId, factorType])
  @@index([tenantId, isDefault])
  @@index([tenantId, isVerified])
  @@index([tenantId, lastUsedAt])
  @@index([tenantId, memberId])
  @@index([tenantId, phoneNumber])
  @@index([tenantId, status])
  @@index([tenantId, userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BankAccount {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             BankAccountStatus   @default(ACTIVE)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  accountNumber      String
  routingNumber      String?
  accountType        BankAccountType     @default(CHECKING)
  bankName           String
  accountName        String
  currency           String              @default("USD")
  isPrimary          Boolean             @default(false)
  isVerified         Boolean             @default(false)
  verifiedAt         DateTime?           @db.Timestamptz(6)
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("HIGHLY_SENSITIVE")
  retentionPolicy    RetentionPolicy?
  metadata           Json?
  BankStatementLine  BankStatementLine[]
  Payout             Payout[]
  Reconciliation     Reconciliation[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountName])
  @@index([tenantId, accountNumber])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, bankName])
  @@index([tenantId, createdAt])
  @@index([tenantId, createdByActorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isPrimary])
  @@index([tenantId, isVerified])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BankStatementLine {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             StatementLineStatus @default(PENDING)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  transactionDate    DateTime            @db.Timestamptz(6)
  postingDate        DateTime?           @db.Timestamptz(6)
  amount             Decimal             @db.Decimal(12, 2)
  balance            Decimal?            @db.Decimal(12, 2)
  description        String
  referenceNumber    String?
  memo               String?
  bankAccountId      String              @db.Uuid
  reconciliationId   String?             @db.Uuid
  category           String?
  isReconciled       Boolean             @default(false)
  reconciledAt       DateTime?           @db.Timestamptz(6)
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  metadata           Json?
  BankAccount        BankAccount         @relation(fields: [tenantId, bankAccountId], references: [tenantId, id])
  Reconciliation     Reconciliation?     @relation(fields: [tenantId, reconciliationId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([tenantId, amount])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, bankAccountId])
  @@index([tenantId, createdByActorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isReconciled])
  @@index([tenantId, reconciliationId])
  @@index([tenantId, referenceNumber])
  @@index([tenantId, status])
  @@index([tenantId, status, transactionDate])
  @@index([tenantId, transactionDate])
  @@index([transactionDate], type: Brin)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BenefitDependent {
  id                    String                 @id @default(uuid(7)) @db.Uuid
  status                HRWorkforceChildStatus @default(ACTIVE)
  version               Int                    @default(1)
  createdAt             DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime               @db.Timestamptz(6)
  tenantId              String                 @db.Uuid
  deletedAt             DateTime?              @db.Timestamptz(6)
  deletedByActorId      String?                @db.Uuid
  createdByActorId      String?                @db.Uuid
  updatedByActorId      String?                @db.Uuid
  auditCorrelationId    String?                @db.Uuid
  dataClassification    String                 @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  benefitEnrollmentId   String                 @db.Uuid
  relationshipType      RelationshipType       @default(SPOUSE)
  firstName             String                 @db.VarChar(50)
  lastName              String                 @db.VarChar(50)
  middleName            String?                @db.VarChar(50)
  dateOfBirth           DateTime               @db.Date
  gender                String?                @db.VarChar(10)
  ssn                   String?                @db.VarChar(11)
  email                 String?                @db.Citext
  phone                 String?                @db.VarChar(20)
  address               String?
  isActive              Boolean                @default(true)
  coverageStartDate     DateTime               @db.Date
  coverageEndDate       DateTime?              @db.Date
  isStudent             Boolean                @default(false)
  studentStatus         String?                @db.VarChar(20)
  schoolName            String?                @db.VarChar(200)
  expectedGraduation    DateTime?              @db.Date
  isDisabled            Boolean                @default(false)
  disabilityType        String?                @db.VarChar(100)
  disabilityStartDate   DateTime?              @db.Date
  legalGuardian         String?                @db.VarChar(200)
  courtOrder            String?                @db.VarChar(200)
  documentationProvided Boolean                @default(false)
  verificationDate      DateTime?              @db.Date
  verifiedById          String?                @db.Uuid
  BenefitEnrollment     BenefitEnrollment      @relation(fields: [tenantId, benefitEnrollmentId], references: [tenantId, id], onDelete: Cascade)
  Tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, benefitEnrollmentId, firstName, lastName, dateOfBirth])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, benefitEnrollmentId])
  @@index([tenantId, coverageStartDate])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isActive])
  @@index([tenantId, isDisabled])
  @@index([tenantId, isStudent])
  @@index([tenantId, relationshipType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BenefitEnrollment {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  workerId           String                 @db.Uuid
  benefitType        BenefitType            @default(HEALTH_INSURANCE)
  benefitPlanCode    String                 @db.Citext
  benefitPlanName    String                 @db.VarChar(200)
  enrollmentStatus   EnrollmentStatus       @default(PENDING)
  coverageLevel      CoverageLevel          @default(EMPLOYEE_ONLY)
  enrollmentDate     DateTime               @db.Date
  effectiveDate      DateTime               @db.Date
  endDate            DateTime?              @db.Date
  employeePremium    Decimal?               @db.Decimal(8, 2)
  employerPremium    Decimal?               @db.Decimal(8, 2)
  totalPremium       Decimal?               @db.Decimal(8, 2)
  deductible         Decimal?               @db.Decimal(8, 2)
  outOfPocketMax     Decimal?               @db.Decimal(8, 2)
  electionAmount     Decimal?               @db.Decimal(8, 2)
  payrollDeduction   Decimal?               @db.Decimal(8, 2)
  annualElection     Decimal?               @db.Decimal(10, 2)
  insuranceCarrier   String?                @db.VarChar(100)
  policyNumber       String?                @db.VarChar(50)
  groupNumber        String?                @db.VarChar(50)
  enrollmentReason   String?                @db.VarChar(100)
  lifeEventType      String?                @db.VarChar(50)
  lifeEventDate      DateTime?              @db.Date
  approvedAt         DateTime?              @db.Timestamptz(6)
  approvedById       String?                @db.Uuid
  primaryBeneficiary String?                @db.VarChar(200)
  beneficiaryPercent Decimal?               @db.Decimal(5, 2)
  BenefitDependent   BenefitDependent[]
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Worker             Worker                 @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, benefitType, benefitPlanCode, effectiveDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, benefitType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, endDate])
  @@index([tenantId, enrollmentStatus])
  @@index([tenantId, insuranceCarrier])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Bid {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             BidStatus        @default(DRAFT)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  estimateId         String?          @db.Uuid
  opportunityId      String?          @db.Uuid
  name               String
  description        String?
  dueDate            DateTime?        @db.Timestamptz(6)
  Estimate           Estimate?        @relation(fields: [tenantId, estimateId], references: [tenantId, id])
  Opportunity        Opportunity?     @relation(fields: [tenantId, opportunityId], references: [tenantId, id], onDelete: Cascade)
  BidComparison      BidComparison[]
  BidInvitation      BidInvitation[]
  BidSubmission      BidSubmission[]

  @@unique([tenantId, id])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, dueDate])
  @@index([tenantId, estimateId])
  @@index([tenantId, name])
  @@index([tenantId, opportunityId])
  @@index([tenantId, status, dueDate])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BidComparison {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             EstimateChildStatus @default(ACTIVE)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  bidId              String              @db.Uuid
  criterion          String              @db.VarChar(200)
  value              String?
  ranking            Int?
  recommendation     String?
  Bid                Bid                 @relation(fields: [tenantId, bidId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, bidId])
  @@index([tenantId, criterion])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, ranking])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BidInvitation {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             BidInvitationStatus @default(SENT)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  bidId              String              @db.Uuid
  inviteeName        String
  inviteeEmail       String
  sentAt             DateTime?           @db.Timestamptz(6)
  respondedAt        DateTime?           @db.Timestamptz(6)
  Bid                Bid                 @relation(fields: [tenantId, bidId], references: [tenantId, id], onDelete: Cascade)
  BidSubmission      BidSubmission[]

  @@unique([tenantId, id])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, bidId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, inviteeEmail])
  @@index([tenantId, respondedAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BidSubmission {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             BidSubmissionStatus @default(DRAFT)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  invitationId       String              @db.Uuid
  bidId              String              @db.Uuid
  submittedAt        DateTime?           @db.Timestamptz(6)
  amount             Decimal?            @db.Decimal(12, 2)
  notes              String?
  attachmentUrl      String?
  Bid                Bid                 @relation(fields: [tenantId, bidId], references: [tenantId, id], onDelete: Cascade)
  BidInvitation      BidInvitation       @relation(fields: [tenantId, invitationId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  // TODO: Prevent duplicate submissions per invitation within a bid; additive and tenant-scoped
  @@unique([tenantId, bidId, invitationId])
  @@index([tenantId, amount])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, bidId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, invitationId])
  @@index([tenantId, status])
  @@index([tenantId, submittedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BillApproval {
  id                                                 String                    @id @default(uuid(7)) @db.Uuid
  status                                             ProcurementApprovalStatus @default(PENDING)
  version                                            Int                       @default(1)
  createdAt                                          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt                                          DateTime                  @db.Timestamptz(6)
  tenantId                                           String                    @db.Uuid
  deletedAt                                          DateTime?                 @db.Timestamptz(6)
  deletedByActorId                                   String?                   @db.Uuid
  createdByActorId                                   String?                   @db.Uuid
  updatedByActorId                                   String?                   @db.Uuid
  auditCorrelationId                                 String?                   @db.Uuid
  dataClassification                                 String                    @default("CONFIDENTIAL")
  retentionPolicy                                    RetentionPolicy?
  apBillId                                           String                    @db.Uuid
  approverId                                         String?                   @db.Uuid
  decision                                           ProcurementApprovalStatus @default(PENDING)
  approvedAt                                         DateTime?                 @db.Timestamptz(6)
  decisionAt                                         DateTime?                 @db.Timestamptz(6)
  comment                                            String?
  approvalLevel                                      Int                       @default(1)
  delegatedFrom                                      String?                   @db.Uuid
  requestedAmount                                    Decimal                   @db.Decimal(12, 2)
  currency                                           String                    @default("USD") @db.VarChar(3)
  APBill                                             APBill                    @relation(fields: [tenantId, apBillId], references: [tenantId, id], onDelete: Cascade)
  Member_BillApproval_tenantId_approverIdToMember    Member?                   @relation("BillApproval_tenantId_approverIdToMember", fields: [tenantId, approverId], references: [tenantId, id], onDelete: NoAction)
  Member_BillApproval_tenantId_delegatedFromToMember Member?                   @relation("BillApproval_tenantId_delegatedFromToMember", fields: [tenantId, delegatedFrom], references: [tenantId, id], onDelete: NoAction)
  Tenant                                             Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, apBillId, approvalLevel])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, apBillId])
  @@index([tenantId, approvedAt])
  @@index([tenantId, approverId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, decision])
  @@index([tenantId, requestedAmount])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BillPayment {
  id                    String                 @id @default(uuid(7)) @db.Uuid
  status                ProcurementChildStatus @default(ACTIVE)
  version               Int                    @default(1)
  createdAt             DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime               @db.Timestamptz(6)
  tenantId              String                 @db.Uuid
  deletedAt             DateTime?              @db.Timestamptz(6)
  deletedByActorId      String?                @db.Uuid
  createdByActorId      String?                @db.Uuid
  updatedByActorId      String?                @db.Uuid
  auditCorrelationId    String?                @db.Uuid
  dataClassification    String                 @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  apBillId              String                 @db.Uuid
  paymentId             String                 @db.Uuid
  amountApplied         Decimal                @db.Decimal(12, 2)
  appliedAt             DateTime               @db.Timestamptz(6)
  sequenceNumber        Int                    @default(1)
  applicationRef        String?                @db.VarChar(100)
  discountTaken         Decimal?               @default(0) @db.Decimal(12, 2)
  adjustmentAmount      Decimal?               @default(0) @db.Decimal(12, 2)
  writeOffAmount        Decimal?               @default(0) @db.Decimal(12, 2)
  currency              String                 @default("USD") @db.VarChar(3)
  exchangeRate          Decimal?               @db.Decimal(10, 6)
  baseCurrencyAmount    Decimal?               @db.Decimal(12, 2)
  isReversed            Boolean                @default(false)
  reversedAt            DateTime?              @db.Timestamptz(6)
  reversedById          String?                @db.Uuid
  reversalReason        String?
  originalBillPaymentId String?                @db.Uuid
  glBatchId             String?                @db.Uuid
  glJournalEntryId      String?                @db.Uuid
  notes                 String?
  internalNotes         String?
  APBill                APBill                 @relation(fields: [tenantId, apBillId], references: [tenantId, id], onDelete: Cascade)
  Tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  BillPayment           BillPayment?           @relation("BillPaymentToBillPayment", fields: [tenantId, originalBillPaymentId], references: [tenantId, id], onDelete: NoAction)
  other_BillPayment     BillPayment[]          @relation("BillPaymentToBillPayment")
  Payment               Payment                @relation(fields: [tenantId, paymentId], references: [tenantId, id])
  Member                Member?                @relation(fields: [tenantId, reversedById], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, apBillId, paymentId, sequenceNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, apBillId])
  @@index([tenantId, appliedAt])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, glBatchId])
  @@index([tenantId, isReversed])
  @@index([tenantId, paymentId])
  @@index([tenantId, reversedById])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Certification {
  id                                                   String                 @id @default(uuid(7)) @db.Uuid
  status                                               HRWorkforceChildStatus @default(ACTIVE)
  version                                              Int                    @default(1)
  createdAt                                            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                                            DateTime               @db.Timestamptz(6)
  tenantId                                             String                 @db.Uuid
  deletedAt                                            DateTime?              @db.Timestamptz(6)
  deletedByActorId                                     String?                @db.Uuid
  createdByActorId                                     String?                @db.Uuid
  updatedByActorId                                     String?                @db.Uuid
  auditCorrelationId                                   String?                @db.Uuid
  dataClassification                                   String                 @default("CONFIDENTIAL")
  retentionPolicy                                      RetentionPolicy?
  workerId                                             String                 @db.Uuid
  certificationName                                    String                 @db.VarChar(200)
  certificationCode                                    String?                @db.VarChar(50)
  issuingOrganization                                  String                 @db.VarChar(200)
  certificationLevel                                   String?                @db.VarChar(50)
  category                                             String                 @db.VarChar(100)
  description                                          String?
  issuedDate                                           DateTime               @db.Date
  effectiveDate                                        DateTime               @db.Date
  expirationDate                                       DateTime?              @db.Date
  lastRenewalDate                                      DateTime?              @db.Date
  nextRenewalDate                                      DateTime?              @db.Date
  isActive                                             Boolean                @default(true)
  isExpired                                            Boolean                @default(false)
  requiresRenewal                                      Boolean                @default(false)
  verificationNumber                                   String?                @db.VarChar(100)
  verificationUrl                                      String?                @db.VarChar(500)
  isVerified                                           Boolean                @default(false)
  verifiedAt                                           DateTime?              @db.Timestamptz(6)
  verifiedById                                         String?                @db.Uuid
  prerequisites                                        Json?
  continuingEducationHours                             Decimal?               @db.Decimal(6, 2)
  renewalRequirements                                  Json?
  cost                                                 Decimal?               @db.Decimal(10, 2)
  currency                                             CurrencyCode           @default(USD)
  paidByCompany                                        Boolean                @default(false)
  trainingRequired                                     Boolean                @default(false)
  trainingHours                                        Decimal?               @db.Decimal(6, 2)
  studyMaterials                                       Json?
  isRegulatory                                         Boolean                @default(false)
  regulatoryBody                                       String?                @db.VarChar(200)
  complianceLevel                                      ComplianceLevel        @default(BASIC)
  certificateUrl                                       String?                @db.VarChar(500)
  documentPath                                         String?                @db.VarChar(500)
  attachments                                          Json?
  approvedAt                                           DateTime?              @db.Timestamptz(6)
  approvedById                                         String?                @db.Uuid
  hrReviewedAt                                         DateTime?              @db.Timestamptz(6)
  hrReviewedById                                       String?                @db.Uuid
  Member_Certification_tenantId_approvedByIdToMember   Member?                @relation("Certification_tenantId_approvedByIdToMember", fields: [tenantId, approvedById], references: [tenantId, id])
  Tenant                                               Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_Certification_tenantId_hrReviewedByIdToMember Member?                @relation("Certification_tenantId_hrReviewedByIdToMember", fields: [tenantId, hrReviewedById], references: [tenantId, id])
  Member_Certification_tenantId_verifiedByIdToMember   Member?                @relation("Certification_tenantId_verifiedByIdToMember", fields: [tenantId, verifiedById], references: [tenantId, id])
  Worker                                               Worker                 @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, certificationCode, issuedDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, category])
  @@index([tenantId, certificationName])
  @@index([tenantId, dataClassification])
  @@index([tenantId, expirationDate])
  @@index([tenantId, isActive])
  @@index([tenantId, isExpired])
  @@index([tenantId, isRegulatory])
  @@index([tenantId, issuingOrganization])
  @@index([tenantId, requiresRenewal])
  @@index([tenantId, status])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ChangeOrder {
  id                  String                @id @default(uuid(7)) @db.Uuid
  status              ChangeOrderStatus     @default(PENDING)
  version             Int                   @default(1)
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @db.Timestamptz(6)
  tenantId            String                @db.Uuid
  deletedAt           DateTime?             @db.Timestamptz(6)
  deletedByActorId    String?               @db.Uuid
  createdByActorId    String?               @db.Uuid
  updatedByActorId    String?               @db.Uuid
  globalId            String                @unique @db.Uuid
  auditCorrelationId  String?               @db.Uuid
  dataClassification  String                @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  estimateId          String?               @db.Uuid
  projectId           String?               @db.Uuid
  invoiceId           String?               @db.Uuid
  subtotalDelta       Decimal?              @db.Decimal(12, 2)
  taxDelta            Decimal?              @db.Decimal(12, 2)
  totalDelta          Decimal?              @db.Decimal(12, 2)
  Estimate            Estimate?             @relation(fields: [tenantId, estimateId], references: [tenantId, id])
  Invoice             Invoice?              @relation(fields: [tenantId, invoiceId], references: [tenantId, id])
  Project             Project?              @relation(fields: [tenantId, projectId], references: [tenantId, id])
  ChangeOrderApproval ChangeOrderApproval[]
  ChangeOrderDocument ChangeOrderDocument[]
  ChangeOrderLine     ChangeOrderLine[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, estimateId])
  @@index([tenantId, invoiceId])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
  @@index([tenantId, totalDelta])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ChangeOrderApproval {
  id                 String                      @id @default(uuid(7)) @db.Uuid
  status             ChangeOrderApprovalDecision @default(PENDING)
  version            Int                         @default(1)
  createdAt          DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                    @db.Timestamptz(6)
  tenantId           String                      @db.Uuid
  deletedAt          DateTime?                   @db.Timestamptz(6)
  deletedByActorId   String?                     @db.Uuid
  createdByActorId   String?                     @db.Uuid
  updatedByActorId   String?                     @db.Uuid
  auditCorrelationId String?                     @db.Uuid
  dataClassification String                      @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  changeOrderId      String                      @db.Uuid
  approverId         String?                     @db.Uuid
  decision           ChangeOrderApprovalDecision @default(PENDING)
  comments           String?
  requestedAt        DateTime?                   @db.Timestamptz(6)
  decidedAt          DateTime?                   @db.Timestamptz(6)
  ChangeOrder        ChangeOrder                 @relation(fields: [tenantId, changeOrderId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approverId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, changeOrderId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, decidedAt])
  @@index([tenantId, decision])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ChangeOrderDocument {
  id                 String                  @id @default(uuid(7)) @db.Uuid
  status             ChangeOrderChildStatus  @default(ACTIVE)
  version            Int                     @default(1)
  createdAt          DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                @db.Timestamptz(6)
  tenantId           String                  @db.Uuid
  deletedAt          DateTime?               @db.Timestamptz(6)
  deletedByActorId   String?                 @db.Uuid
  createdByActorId   String?                 @db.Uuid
  updatedByActorId   String?                 @db.Uuid
  auditCorrelationId String?                 @db.Uuid
  dataClassification String                  @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  changeOrderId      String                  @db.Uuid
  fileName           String
  url                String
  mimeType           String?
  fileSize           Int?
  uploadedBy         String?                 @db.Uuid
  type               ChangeOrderDocumentType @default(ATTACHMENT)
  ChangeOrder        ChangeOrder             @relation(fields: [tenantId, changeOrderId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, changeOrderId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, type])
  @@index([tenantId, uploadedBy])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ChangeOrderLine {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             ChangeOrderChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  changeOrderId      String                 @db.Uuid
  description        String
  quantity           Decimal                @db.Decimal(12, 3)
  unitPrice          Decimal                @db.Decimal(12, 2)
  total              Decimal                @db.Decimal(12, 2)
  sortOrder          Int                    @default(0)
  ChangeOrder        ChangeOrder            @relation(fields: [tenantId, changeOrderId], references: [tenantId, id], onDelete: Cascade)
  InvoiceLineItem    InvoiceLineItem[]
  ProjectTask        ProjectTask[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, changeOrderId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ChangeVector {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Channel {
  id                                                                    String                     @id @default(uuid(7)) @db.Uuid
  status                                                                ChannelStatus              @default(ACTIVE)
  version                                                               Int                        @default(1)
  createdAt                                                             DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                                                             DateTime                   @db.Timestamptz(6)
  tenantId                                                              String                     @db.Uuid
  deletedAt                                                             DateTime?                  @db.Timestamptz(6)
  deletedByActorId                                                      String?                    @db.Uuid
  createdByActorId                                                      String?                    @db.Uuid
  updatedByActorId                                                      String?                    @db.Uuid
  channelName                                                           String                     @db.VarChar(255)
  description                                                           String?
  channelType                                                           ChannelType                @default(PUBLIC)
  visibility                                                            ChannelVisibility          @default(TENANT_WIDE)
  isReadOnly                                                            Boolean                    @default(false)
  defaultMessageFormat                                                  MessageFormat              @default(TEXT)
  allowAttachments                                                      Boolean                    @default(true)
  allowReactions                                                        Boolean                    @default(true)
  allowThreads                                                          Boolean                    @default(true)
  maxMembers                                                            Int?
  requireApproval                                                       Boolean                    @default(false)
  contextType                                                           String?                    @db.VarChar(50)
  contextId                                                             String?                    @db.Uuid
  projectId                                                             String?                    @db.Uuid
  departmentId                                                          String?                    @db.Uuid
  opportunityId                                                         String?                    @db.Uuid
  moderationEnabled                                                     Boolean                    @default(false)
  autoModeration                                                        Boolean                    @default(false)
  profanityFilter                                                       Boolean                    @default(true)
  allowExternalShares                                                   Boolean                    @default(false)
  retentionDays                                                         Int?
  ownerId                                                               String                     @db.Uuid
  creatorId                                                             String                     @db.Uuid
  lastActivityAt                                                        DateTime?                  @db.Timestamptz(6)
  pinnedMessageId                                                       String?                    @db.Uuid
  memberCount                                                           Int                        @default(0)
  messageCount                                                          Int                        @default(0)
  lastMessageAt                                                         DateTime?                  @db.Timestamptz(6)
  totalAttachments                                                      Int                        @default(0)
  archivedAt                                                            DateTime?                  @db.Timestamptz(6)
  archivedById                                                          String?                    @db.Uuid
  archiveReason                                                         String?
  expiresAt                                                             DateTime?                  @db.Timestamptz(6)
  auditCorrelationId                                                    String?                    @db.Uuid
  dataClassification                                                    String                     @default("INTERNAL") @db.VarChar(50)
  retentionPolicy                                                       RetentionPolicy?
  Member_Channel_tenantId_archivedByIdToMember                          Member?                    @relation("Channel_tenantId_archivedByIdToMember", fields: [tenantId, archivedById], references: [tenantId, id], onDelete: NoAction)
  Member_Channel_tenantId_creatorIdToMember                             Member                     @relation("Channel_tenantId_creatorIdToMember", fields: [tenantId, creatorId], references: [tenantId, id], onDelete: NoAction)
  Department                                                            Department?                @relation(fields: [tenantId, departmentId], references: [tenantId, id], onDelete: NoAction)
  Tenant                                                                Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Opportunity                                                           Opportunity?               @relation(fields: [tenantId, opportunityId], references: [tenantId, id], onDelete: NoAction)
  Member_Channel_tenantId_ownerIdToMember                               Member                     @relation("Channel_tenantId_ownerIdToMember", fields: [tenantId, ownerId], references: [tenantId, id])
  Message_Channel_tenantId_pinnedMessageIdToMessage                     Message?                   @relation("Channel_tenantId_pinnedMessageIdToMessage", fields: [tenantId, pinnedMessageId], references: [tenantId, id], onDelete: NoAction)
  Project                                                               Project?                   @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  ChannelMember                                                         ChannelMember[]
  DirectChat                                                            DirectChat[]
  ExternalShareLink                                                     ExternalShareLink[]
  Message_Message_tenantId_channelIdToChannel                           Message[]                  @relation("Message_tenantId_channelIdToChannel")
  MessageRead                                                           MessageRead[]
  weather_alert_deliveries                                              weather_alert_deliveries[]
  weather_watches_weather_watches_tenantId_escalationChannelIdToChannel weather_watches[]          @relation("weather_watches_tenantId_escalationChannelIdToChannel")
  weather_watches_weather_watches_tenantId_primaryChannelIdToChannel    weather_watches[]          @relation("weather_watches_tenantId_primaryChannelIdToChannel")

  @@unique([tenantId, channelName])
  @@unique([tenantId, id])
  @@index([contextType, contextId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, channelType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, departmentId])
  @@index([tenantId, isReadOnly])
  @@index([tenantId, lastActivityAt])
  @@index([tenantId, lastMessageAt])
  @@index([tenantId, memberCount])
  @@index([tenantId, opportunityId])
  @@index([tenantId, ownerId])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
  @@index([tenantId, visibility])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ChannelMember {
  id                                                String              @id @default(uuid(7)) @db.Uuid
  status                                            ChannelMemberStatus @default(INVITED)
  version                                           Int                 @default(1)
  createdAt                                         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                                         DateTime            @db.Timestamptz(6)
  tenantId                                          String              @db.Uuid
  deletedAt                                         DateTime?           @db.Timestamptz(6)
  deletedByActorId                                  String?             @db.Uuid
  createdByActorId                                  String?             @db.Uuid
  updatedByActorId                                  String?             @db.Uuid
  channelId                                         String              @db.Uuid
  memberId                                          String              @db.Uuid
  memberRole                                        ChannelMemberRole   @default(MEMBER)
  memberStatus                                      ChannelMemberStatus @default(INVITED)
  canPost                                           Boolean             @default(true)
  canReact                                          Boolean             @default(true)
  canCreateThreads                                  Boolean             @default(true)
  canUploadFiles                                    Boolean             @default(true)
  canInviteMembers                                  Boolean             @default(false)
  canModerate                                       Boolean             @default(false)
  canDeleteMessages                                 Boolean             @default(false)
  canEditChannel                                    Boolean             @default(false)
  notificationLevel                                 NotificationLevel   @default(ALL)
  isMuted                                           Boolean             @default(false)
  mutedUntil                                        DateTime?           @db.Timestamptz(6)
  emailNotifications                                Boolean             @default(true)
  mobileNotifications                               Boolean             @default(true)
  desktopNotifications                              Boolean             @default(true)
  invitedById                                       String?             @db.Uuid
  invitedAt                                         DateTime?           @db.Timestamptz(6)
  joinedAt                                          DateTime?           @db.Timestamptz(6)
  leftAt                                            DateTime?           @db.Timestamptz(6)
  lastReadAt                                        DateTime?           @db.Timestamptz(6)
  messageCount                                      Int                 @default(0)
  reactionCount                                     Int                 @default(0)
  lastActiveAt                                      DateTime?           @db.Timestamptz(6)
  unreadCount                                       Int                 @default(0)
  bannedAt                                          DateTime?           @db.Timestamptz(6)
  bannedById                                        String?             @db.Uuid
  banReason                                         String?
  kickedAt                                          DateTime?           @db.Timestamptz(6)
  kickedById                                        String?             @db.Uuid
  kickReason                                        String?
  customTitle                                       String?             @db.VarChar(100)
  nickname                                          String?             @db.VarChar(100)
  auditCorrelationId                                String?             @db.Uuid
  dataClassification                                String              @default("INTERNAL") @db.VarChar(50)
  retentionPolicy                                   RetentionPolicy?
  Member_ChannelMember_tenantId_bannedByIdToMember  Member?             @relation("ChannelMember_tenantId_bannedByIdToMember", fields: [tenantId, bannedById], references: [tenantId, id], onDelete: NoAction)
  Channel                                           Channel             @relation(fields: [tenantId, channelId], references: [tenantId, id], onDelete: Cascade)
  Tenant                                            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_ChannelMember_tenantId_invitedByIdToMember Member?             @relation("ChannelMember_tenantId_invitedByIdToMember", fields: [tenantId, invitedById], references: [tenantId, id], onDelete: NoAction)
  Member_ChannelMember_tenantId_kickedByIdToMember  Member?             @relation("ChannelMember_tenantId_kickedByIdToMember", fields: [tenantId, kickedById], references: [tenantId, id], onDelete: NoAction)
  Member_ChannelMember_tenantId_memberIdToMember    Member              @relation("ChannelMember_tenantId_memberIdToMember", fields: [tenantId, memberId], references: [tenantId, id])
  MessageRead                                       MessageRead[]

  @@unique([tenantId, channelId, memberId])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, channelId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isMuted])
  @@index([tenantId, joinedAt])
  @@index([tenantId, lastActiveAt])
  @@index([tenantId, memberId])
  @@index([tenantId, memberRole])
  @@index([tenantId, memberStatus])
  @@index([tenantId, notificationLevel])
  @@index([tenantId, status])
  @@index([tenantId, unreadCount])
  @@index([tenantId, memberId], map: "idx_channel_member_tenant")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Chargeback {
  id                                              String               @id @default(uuid(7)) @db.Uuid
  status                                          ChargebackStatus     @default(RECEIVED)
  version                                         Int                  @default(1)
  createdAt                                       DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt                                       DateTime             @db.Timestamptz(6)
  tenantId                                        String               @db.Uuid
  deletedAt                                       DateTime?            @db.Timestamptz(6)
  deletedByActorId                                String?              @db.Uuid
  createdByActorId                                String?              @db.Uuid
  updatedByActorId                                String?              @db.Uuid
  chargebackNumber                                String               @unique
  receivedDate                                    DateTime             @db.Timestamptz(6)
  amount                                          Decimal              @db.Decimal(12, 2)
  currency                                        String               @default("USD")
  reasonCode                                      String?
  disputeId                                       String?
  description                                     String?
  notes                                           String?
  paymentId                                       String               @db.Uuid
  assignedToId                                    String?              @db.Uuid
  resolvedAt                                      DateTime?            @db.Timestamptz(6)
  resolvedById                                    String?              @db.Uuid
  resolutionNotes                                 String?
  auditCorrelationId                              String?              @db.Uuid
  dataClassification                              String               @default("CONFIDENTIAL")
  retentionPolicy                                 RetentionPolicy?
  metadata                                        Json?
  Member_Chargeback_tenantId_assignedToIdToMember Member?              @relation("Chargeback_tenantId_assignedToIdToMember", fields: [tenantId, assignedToId], references: [tenantId, id])
  Payment                                         Payment              @relation(fields: [tenantId, paymentId], references: [tenantId, id])
  Member_Chargeback_tenantId_resolvedByIdToMember Member?              @relation("Chargeback_tenantId_resolvedByIdToMember", fields: [tenantId, resolvedById], references: [tenantId, id])
  ChargebackEvidence                              ChargebackEvidence[]

  @@unique([tenantId, id])
  @@index([receivedDate], type: Brin)
  @@index([tenantId, amount])
  @@index([tenantId, assignedToId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, chargebackNumber])
  @@index([tenantId, createdByActorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, disputeId])
  @@index([tenantId, paymentId])
  @@index([tenantId, receivedDate])
  @@index([tenantId, resolvedById])
  @@index([tenantId, status])
  @@index([tenantId, status, receivedDate])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ChargebackEvidence {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             PaymentChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  fileName           String             @db.VarChar(255)
  fileType           String             @db.VarChar(100)
  fileSize           Int
  fileUrl            String
  description        String?
  chargebackId       String             @db.Uuid
  uploadedById       String             @db.Uuid
  Chargeback         Chargeback         @relation(fields: [tenantId, chargebackId], references: [tenantId, id], onDelete: Cascade)
  Member             Member             @relation(fields: [tenantId, uploadedById], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, chargebackId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, status])
  @@index([tenantId, uploadedById])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ClockInClockOut {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             TimeClockStatus  @default(CLOCKED_OUT)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  clockNumber        String           @db.VarChar(50)
  clockDate          DateTime         @db.Date
  clockInTime        DateTime?        @db.Timestamptz(6)
  clockOutTime       DateTime?        @db.Timestamptz(6)
  employeeId         String           @db.Uuid
  employeeNumber     String?          @db.VarChar(50)
  breakStartTime     DateTime?        @db.Timestamptz(6)
  breakEndTime       DateTime?        @db.Timestamptz(6)
  lunchStartTime     DateTime?        @db.Timestamptz(6)
  lunchEndTime       DateTime?        @db.Timestamptz(6)
  totalHours         Decimal?         @db.Decimal(8, 2)
  regularHours       Decimal?         @db.Decimal(8, 2)
  overtimeHours      Decimal?         @db.Decimal(8, 2)
  breakHours         Decimal?         @db.Decimal(8, 2)
  clockLocation      String?          @db.VarChar(100)
  deviceId           String?          @db.VarChar(50)
  ipAddress          String?          @db.VarChar(45)
  gpsLatitude        Decimal?         @db.Decimal(10, 8)
  gpsLongitude       Decimal?         @db.Decimal(11, 8)
  isValidated        Boolean          @default(false)
  validatedAt        DateTime?        @db.Timestamptz(6)
  validatedBy        String?          @db.Uuid
  notes              String?
  exceptionReason    String?          @db.VarChar(255)
  timesheetId        String?          @db.Uuid
  Member             Member           @relation(fields: [tenantId, employeeId], references: [tenantId, id])
  Timesheet          Timesheet?       @relation(fields: [tenantId, timesheetId], references: [tenantId, id])

  @@unique([tenantId, clockNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, clockDate])
  @@index([tenantId, clockInTime])
  @@index([tenantId, clockOutTime])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, employeeId])
  @@index([tenantId, isValidated])
  @@index([tenantId, status])
  @@index([tenantId, timesheetId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CompensationComponent {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  compensationPlanId String                 @db.Uuid
  componentType      CompensationType       @default(SALARY)
  componentName      String                 @db.VarChar(100)
  componentCode      String?                @db.Citext
  amount             Decimal?               @db.Decimal(12, 2)
  percentage         Decimal?               @db.Decimal(5, 2)
  rate               Decimal?               @db.Decimal(8, 2)
  units              Decimal?               @db.Decimal(10, 2)
  isRecurring        Boolean                @default(true)
  frequency          PayFrequency?          @default(BIWEEKLY)
  isActive           Boolean                @default(true)
  isTaxable          Boolean                @default(true)
  calculationMethod  String?                @db.VarChar(50)
  calculationBase    String?                @db.VarChar(50)
  minimumAmount      Decimal?               @db.Decimal(12, 2)
  maximumAmount      Decimal?               @db.Decimal(12, 2)
  effectiveDate      DateTime               @db.Date
  endDate            DateTime?              @db.Date
  glAccountCode      String?                @db.Citext
  costCenterCode     String?                @db.Citext
  approvedAt         DateTime?              @db.Timestamptz(6)
  approvedById       String?                @db.Uuid
  CompensationPlan   CompensationPlan       @relation(fields: [tenantId, compensationPlanId], references: [tenantId, id], onDelete: Cascade)
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, compensationPlanId, componentCode, effectiveDate])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, compensationPlanId])
  @@index([tenantId, componentType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, isActive])
  @@index([tenantId, isTaxable])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CompensationPlan {
  id                    String                  @id @default(uuid(7)) @db.Uuid
  status                HRWorkforceChildStatus  @default(ACTIVE)
  version               Int                     @default(1)
  createdAt             DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                @db.Timestamptz(6)
  tenantId              String                  @db.Uuid
  deletedAt             DateTime?               @db.Timestamptz(6)
  deletedByActorId      String?                 @db.Uuid
  createdByActorId      String?                 @db.Uuid
  updatedByActorId      String?                 @db.Uuid
  auditCorrelationId    String?                 @db.Uuid
  dataClassification    String                  @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  workerId              String                  @db.Uuid
  planName              String                  @db.VarChar(255)
  compensationType      CompensationType        @default(SALARY)
  payFrequency          PayFrequency            @default(BIWEEKLY)
  baseSalary            Decimal?                @db.Decimal(12, 2)
  hourlyRate            Decimal?                @db.Decimal(8, 2)
  overtimeRate          Decimal?                @db.Decimal(8, 2)
  overtimeMultiplier    Decimal?                @default(1.5) @db.Decimal(3, 2)
  effectiveDate         DateTime                @db.Date
  endDate               DateTime?               @db.Date
  isActive              Boolean                 @default(true)
  currency              String                  @default("USD") @db.VarChar(3)
  payLocation           String?                 @db.VarChar(100)
  exemptStatus          Boolean                 @default(false)
  taxJurisdiction       String?                 @db.VarChar(50)
  approvedAt            DateTime?               @db.Timestamptz(6)
  approvedById          String?                 @db.Uuid
  CompensationComponent CompensationComponent[]
  Tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Worker                Worker                  @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, effectiveDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, compensationType])
  @@index([tenantId, currency])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, isActive])
  @@index([tenantId, payFrequency])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ConflictLog {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Contact {
  id                  String                  @id @default(uuid(7)) @db.Uuid
  status              ContactStatus           @default(ACTIVE)
  version             Int                     @default(1)
  createdAt           DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime                @db.Timestamptz(6)
  tenantId            String                  @db.Uuid
  deletedAt           DateTime?               @db.Timestamptz(6)
  deletedByActorId    String?                 @db.Uuid
  createdByActorId    String?                 @db.Uuid
  updatedByActorId    String?                 @db.Uuid
  globalId            String                  @db.Uuid
  auditCorrelationId  String?                 @db.Uuid
  dataClassification  String                  @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  firstName           String                  @db.VarChar(100)
  lastName            String                  @db.VarChar(100)
  email               String?                 @db.Citext
  phone               String?                 @db.VarChar(20)
  mobile              String?                 @db.VarChar(20)
  title               String?                 @db.VarChar(100)
  department          String?                 @db.VarChar(100)
  isPrimary           Boolean                 @default(false)
  // TODO: Migration-safe change: convert to enum while keeping it nullable to avoid backfill requirements
  // Previous type: String? @db.VarChar(20)
  preferredContact    PreferredContactMethod?
  // TODO: New optional classification for contact role; nullable to ensure safe roll-out
  contactType         ContactType?
  timezone            String?                 @db.VarChar(50)
  notes               String?
  specialRequirements String?
  accountId           String                  @db.Uuid
  Activity            Activity[]
  Account             Account                 @relation(fields: [tenantId, accountId], references: [tenantId, id], onDelete: Cascade)
  CreditMemo          CreditMemo[]
  Estimate            Estimate[]
  Invoice             Invoice[]
  Opportunity         Opportunity[]
  OpportunityLineItem OpportunityLineItem[]
  Payment             Payment[]
  Project             Project[]
  Quote               Quote[]

  @@unique([tenantId, id])
  // TODO: Optional uniqueness to reduce duplicate contacts per account/email within a tenant.
  // Note: email is nullable; in Postgres, multiple NULLs are allowed under a unique constraint.
  // Consider a partial unique index excluding NULLs in a future native migration if strict enforcement is desired.
  @@unique([tenantId, accountId, email])
  @@index([createdAt], type: Brin)
  @@index([globalId])
  @@index([tenantId, accountId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, department])
  @@index([tenantId, email])
  @@index([tenantId, isPrimary])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Contract {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CRMChildStatus   @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  contractNumber     String           @db.Citext
  name               String           @db.VarChar(255)
  description        String?
  contractType       String           @db.VarChar(50)
  startDate          DateTime         @db.Date
  endDate            DateTime?        @db.Date
  renewalDate        DateTime?        @db.Date
  value              Decimal?         @db.Decimal(15, 2)
  signedDate         DateTime?        @db.Date
  approvedDate       DateTime?        @db.Date
  terms              String?
  notes              String?
  accountId          String           @db.Uuid
  Account            Account          @relation(fields: [tenantId, accountId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, contractNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contractType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, endDate])
  @@index([tenantId, startDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ContractTemplate {
  id               String                    @id @default(uuid(7)) @db.Uuid
  status           PlatformTenantChildStatus @default(ACTIVE)
  version          Int                       @default(1)
  createdAt        DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                  @db.Timestamptz(6)
  tenantId         String                    @db.Uuid
  deletedAt        DateTime?                 @db.Timestamptz(6)
  deletedByActorId String?                   @db.Uuid
  createdByActorId String?                   @db.Uuid
  updatedByActorId String?                   @db.Uuid
  Estimate         Estimate[]
  Project          Project[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, deletedAt])
  @@index([tenantId, status])
}

model CostCategory {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CostCenter {
  id                    String           @id @default(uuid(7)) @db.Uuid
  status                CostCenterStatus @default(ACTIVE)
  version               Int              @default(1)
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime         @db.Timestamptz(6)
  tenantId              String           @db.Uuid
  deletedAt             DateTime?        @db.Timestamptz(6)
  deletedByActorId      String?          @db.Uuid
  createdByActorId      String?          @db.Uuid
  updatedByActorId      String?          @db.Uuid
  auditCorrelationId    String?          @db.Uuid
  dataClassification    String           @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  costCenterCode        String           @unique @db.Citext
  costCenterName        String           @db.VarChar(100)
  costCenterDescription String?
  parentCostCenterId    String?          @db.Uuid
  budgetAmount          Decimal?         @db.Decimal(12, 2)
  actualAmount          Decimal?         @default(0) @db.Decimal(12, 2)
  varianceAmount        Decimal?         @default(0) @db.Decimal(12, 2)
  currency              CurrencyCode     @default(USD)
  managerId             String?          @db.Uuid
  effectiveDate         DateTime         @db.Date
  endDate               DateTime?        @db.Date
  approvedByActorId     String?          @db.Uuid
  approvedAt            DateTime?        @db.Timestamptz(6)
  Tenant                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member                Member?          @relation(fields: [tenantId, managerId], references: [tenantId, id])
  CostCenter            CostCenter?      @relation("CostCenterToCostCenter", fields: [tenantId, parentCostCenterId], references: [tenantId, id])
  other_CostCenter      CostCenter[]     @relation("CostCenterToCostCenter")
  Department            Department[]
  Location              Location[]
  OrgUnit               OrgUnit[]
  Project               Project[]

  @@unique([tenantId, costCenterCode])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, budgetAmount])
  @@index([tenantId, costCenterName])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, managerId])
  @@index([tenantId, parentCostCenterId])
  @@index([tenantId, varianceAmount])
}

model CostCode {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

model Country {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CreditMemo {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CreditMemoStatus @default(DRAFT)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  globalId           String           @unique @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  creditMemoNumber   String           @db.VarChar(50)
  documentGroupId    String?          @db.Uuid
  subtotal           Decimal          @db.Decimal(12, 2)
  taxAmount          Decimal          @default(0) @db.Decimal(12, 2)
  discountAmount     Decimal          @default(0) @db.Decimal(12, 2)
  totalAmount        Decimal          @db.Decimal(12, 2)
  appliedAmount      Decimal          @default(0) @db.Decimal(12, 2)
  remainingAmount    Decimal          @db.Decimal(12, 2)
  currency           String           @default("USD") @db.VarChar(3)
  // Shadow enum for currency to enable gradual typed rollout
  currencyEnum       CurrencyCode?
  exchangeRate       Decimal?         @db.Decimal(10, 6)
  creditMemoDate     DateTime         @db.Date
  sourceInvoiceId    String?          @db.Uuid
  reason             String?          @db.VarChar(100)
  accountId          String           @db.Uuid
  contactId          String?          @db.Uuid
  description        String?
  internalNotes      String?
  customerNotes      String?
  requiresApproval   Boolean          @default(false)
  approvedAt         DateTime?        @db.Timestamptz(6)
  approvedByMemberId String?          @db.Uuid
  metadata           Json?
  tags               String[]         @db.VarChar(50)
  Account            Account          @relation(fields: [tenantId, accountId], references: [tenantId, id], onDelete: Cascade)
  Member             Member?          @relation(fields: [tenantId, approvedByMemberId], references: [tenantId, id])
  Contact            Contact?         @relation(fields: [tenantId, contactId], references: [tenantId, id])
  DocumentGroup      DocumentGroup?   @relation(fields: [tenantId, documentGroupId], references: [tenantId, id])
  Tenant             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Invoice            Invoice?         @relation(fields: [tenantId, sourceInvoiceId], references: [tenantId, id])
  CreditMemoLine     CreditMemoLine[]

  @@unique([tenantId, creditMemoNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountId])
  @@index([tenantId, approvedByMemberId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contactId])
  @@index([tenantId, creditMemoDate])
  @@index([tenantId, currency])
  @@index([tenantId, currencyEnum])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, remainingAmount])
  @@index([tenantId, sourceInvoiceId])
  @@index([tenantId, status])
  @@index([tenantId, totalAmount])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CreditMemoLine {
  id                  String              @id @default(uuid(7)) @db.Uuid
  status              InvoiceChildStatus  @default(ACTIVE)
  version             Int                 @default(1)
  createdAt           DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime            @db.Timestamptz(6)
  tenantId            String              @db.Uuid
  deletedAt           DateTime?           @db.Timestamptz(6)
  deletedByActorId    String?             @db.Uuid
  createdByActorId    String?             @db.Uuid
  updatedByActorId    String?             @db.Uuid
  auditCorrelationId  String?             @db.Uuid
  dataClassification  String              @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  creditMemoId        String              @db.Uuid
  lineNumber          Int
  itemType            InvoiceLineItemType @default(SERVICE)
  itemCode            String?             @db.VarChar(50)
  description         String
  detailedDescription String?
  quantity            Decimal             @db.Decimal(10, 4)
  unitOfMeasure       String?             @db.VarChar(20)
  unitPrice           Decimal             @db.Decimal(12, 4)
  lineAmount          Decimal             @db.Decimal(12, 2)
  discountPercent     Decimal?            @db.Decimal(5, 2)
  discountAmount      Decimal             @default(0) @db.Decimal(12, 2)
  netAmount           Decimal             @db.Decimal(12, 2)
  taxable             Boolean             @default(true)
  taxCode             String?             @db.VarChar(20)
  taxPercent          Decimal?            @db.Decimal(5, 2)
  taxAmount           Decimal             @default(0) @db.Decimal(12, 2)
  sourceType          String?             @db.VarChar(50)
  sourceInvoiceLineId String?             @db.Uuid
  costCode            String?             @db.VarChar(50)
  costCenter          String?             @db.VarChar(50)
  glAccountCode       String?             @db.VarChar(50)
  notes               String?
  customerNotes       String?
  metadata            Json?
  tags                String[]            @db.VarChar(50)
  CreditMemo          CreditMemo          @relation(fields: [tenantId, creditMemoId], references: [tenantId, id], onDelete: Cascade)
  Tenant              Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  InvoiceLineItem     InvoiceLineItem?    @relation(fields: [tenantId, sourceInvoiceLineId], references: [tenantId, id])

  @@unique([tenantId, creditMemoId, lineNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, costCode])
  @@index([tenantId, creditMemoId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, glAccountCode])
  @@index([tenantId, itemCode])
  @@index([tenantId, itemType])
  @@index([tenantId, sourceType])
  @@index([tenantId, status])
}

model CurrencyRate {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             CurrencyRateStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("PUBLIC")
  retentionPolicy    RetentionPolicy?
  fromCurrency       String             @db.VarChar(3)
  toCurrency         String             @db.VarChar(3)
  rateType           CurrencyRateType   @default(SPOT)
  exchangeRate       Decimal            @db.Decimal(18, 8)
  inverseRate        Decimal?           @db.Decimal(18, 8)
  spread             Decimal?           @db.Decimal(8, 6)
  margin             Decimal?           @db.Decimal(8, 6)
  effectiveFrom      DateTime           @db.Timestamptz(6)
  effectiveTo        DateTime?          @db.Timestamptz(6)
  rateDate           DateTime           @db.Date
  lastUpdated        DateTime           @db.Timestamptz(6)
  source             CurrencyRateSource @default(MANUAL)
  providerName       String?            @db.VarChar(100)
  providerId         String?            @db.VarChar(100)
  apiEndpoint        String?            @db.VarChar(500)
  isDefault          Boolean            @default(false)
  isManualOverride   Boolean            @default(false)
  autoUpdate         Boolean            @default(true)
  updateFrequency    String?            @db.VarChar(20)
  confidence         Decimal?           @db.Decimal(5, 4)
  volatility         Decimal?           @db.Decimal(8, 6)
  dataQuality        String?            @db.VarChar(20)
  lastVerifiedAt     DateTime?          @db.Timestamptz(6)
  verifiedByActorId  String?            @db.Uuid
  notes              String?

  @@unique([fromCurrency, toCurrency, effectiveFrom, rateType])
  @@index([auditCorrelationId])
  @@index([autoUpdate])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([dataQuality])
  @@index([deletedAt])
  @@index([effectiveFrom])
  @@index([fromCurrency, toCurrency])
  @@index([isDefault])
  @@index([lastUpdated])
  @@index([providerName])
  @@index([rateDate])
  @@index([source])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DailyLog {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  logDate            DateTime           @db.Date
  weather            Json?
  notes              String?
  safetyIncidents    String?
  manpowerCount      Int?
  authorId           String             @db.Uuid
  projectId          String             @db.Uuid
  Member             Member             @relation(fields: [tenantId, authorId], references: [tenantId, id])
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, projectId, logDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, authorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, logDate])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DashboardDefinition {
  id               String          @id @default(uuid(7)) @db.Uuid
  // Lifecycle
  status           String          @default("ACTIVE") @db.VarChar(20)
  // Shadow enum for gradual cutover to typed status
  statusEnum       TemplateStatus? @default(ACTIVE)
  version          Int             @default(1)
  createdAt        DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime        @db.Timestamptz(6)
  tenantId         String          @db.Uuid
  deletedAt        DateTime?       @db.Timestamptz(6)
  deletedByActorId String?         @db.Uuid
  createdByActorId String?         @db.Uuid
  updatedByActorId String?         @db.Uuid

  // Enterprise
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Definition metadata
  name        String    @db.VarChar(255)
  code        String?   @db.VarChar(50)
  description String?
  definition  Json?
  layout      Json?
  tags        String?   @db.VarChar(255)
  isPublished Boolean   @default(false)
  publishedAt DateTime? @db.Timestamptz(6)

  // Relations
  ExportJob ExportJob[]

  @@unique([tenantId, id])
  @@unique([tenantId, code])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isPublished])
  @@index([tenantId, publishedAt])
  @@index([tenantId, status])
  @@index([tenantId, statusEnum])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DataAccessRequest {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DataErasureRequest {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DataLineageEdge {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DataLineageEvent {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DataRetentionPolicy {
  id               String                    @id @default(uuid(7)) @db.Uuid
  status           PlatformTenantChildStatus @default(ACTIVE)
  version          Int                       @default(1)
  createdAt        DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                  @db.Timestamptz(6)
  tenantId         String                    @db.Uuid
  deletedAt        DateTime?                 @db.Timestamptz(6)
  deletedByActorId String?                   @db.Uuid
  createdByActorId String?                   @db.Uuid
  updatedByActorId String?                   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DataSubject {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Deduction {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  deductionCode      String                 @db.Citext
  deductionName      String                 @db.VarChar(100)
  description        String?
  deductionType      String                 @db.VarChar(50)
  amount             Decimal?               @db.Decimal(12, 4)
  percentage         Decimal?               @db.Decimal(8, 4)
  minimumAmount      Decimal?               @db.Decimal(12, 4)
  maximumAmount      Decimal?               @db.Decimal(12, 4)
  annualLimit        Decimal?               @db.Decimal(12, 4)
  isStatutory        Boolean                @default(false)
  isVoluntary        Boolean                @default(true)
  isPretax           Boolean                @default(false)
  priority           Int                    @default(1)
  effectiveDate      DateTime               @db.Date
  expirationDate     DateTime?              @db.Date
  isActive           Boolean                @default(true)
  employeeGroup      String?                @db.VarChar(50)
  department         String?                @db.VarChar(50)
  jobTitle           String?                @db.VarChar(100)
  vendorId           String?                @db.Uuid
  vendorAccount      String?                @db.VarChar(50)
  glAccount          String?                @db.VarChar(50)
  liabilityAccount   String?                @db.VarChar(50)

  @@unique([tenantId, deductionCode])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deductionType])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, employeeGroup])
  @@index([tenantId, isActive])
  @@index([tenantId, isStatutory])
  @@index([tenantId, priority])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DelegationConstraint {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             String           @default("ACTIVE")
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Constraint Fields
  delegationGrantId String                   @db.Uuid
  constraintType    DelegationConstraintType @default(TIME_WINDOW)
  name              String                   @db.VarChar(255)
  description       String?

  // Constraint Configuration
  isActive   Boolean @default(true)
  priority   Int     @default(100) // Higher = more important
  isEnforced Boolean @default(true) // Hard vs soft constraint

  // Time-based Constraints
  timeWindowStart   String? @db.VarChar(8) // HH:MM:SS format
  timeWindowEnd     String? @db.VarChar(8) // HH:MM:SS format
  allowedDaysOfWeek Int[] // 0=Sunday, 1=Monday, etc.
  timezone          String? @db.VarChar(50)

  // Date Range Constraints
  validFrom     DateTime?  @db.Timestamptz(6)
  validTo       DateTime?  @db.Timestamptz(6)
  excludedDates DateTime[] @db.Date // Holidays, blackout dates

  // IP and Location Constraints
  allowedIpRanges  String[] @db.VarChar(45) // CIDR notation
  blockedIpRanges  String[] @db.VarChar(45)
  allowedCountries String[] @db.VarChar(3) // ISO country codes
  blockedCountries String[] @db.VarChar(3)

  // Usage Constraints
  maxUsageCount   Int? // Maximum uses
  maxUsagePerDay  Int? // Daily usage limit
  maxUsagePerHour Int? // Hourly usage limit
  cooldownPeriod  Int? // Minutes between uses

  // Resource Constraints
  allowedResourceTypes String[] @db.VarChar(100) // Specific resource types
  blockedResourceTypes String[] @db.VarChar(100)
  maxResourceCount     Int? // Max resources per use

  // Amount/Value Constraints
  maxAmount          Decimal? @db.Decimal(15, 2) // Financial limits
  dailyAmountLimit   Decimal? @db.Decimal(15, 2)
  monthlyAmountLimit Decimal? @db.Decimal(15, 2)

  // Approval Constraints
  requiresApprovalAbove Decimal? @db.Decimal(15, 2) // Amount threshold
  approverRoles         String[] @db.VarChar(100) // Required approver roles
  minApprovers          Int? // Minimum number of approvers

  // Context Constraints
  requiredContext  Json? // Required context fields
  forbiddenContext Json? // Forbidden context values
  conditionalLogic String? // Custom constraint logic

  // Device and Security Constraints
  allowedDeviceTypes String[] @db.VarChar(50) // Mobile, Desktop, etc.
  requiresMfa        Boolean  @default(false)
  minSecurityLevel   String?  @db.VarChar(50)

  // Monitoring and Alerts
  alertOnViolation Boolean  @default(true)
  alertRecipients  String[] @db.Uuid // Member IDs
  logViolations    Boolean  @default(true)

  // Violation Handling
  violationAction  ConstraintViolationAction @default(BLOCK)
  violationMessage String?                   @db.VarChar(500)
  gracePeriod      Int? // Minutes of grace period

  // Performance
  cacheEnabled      Boolean @default(true)
  cacheTtlSeconds   Int     @default(300) // 5 minutes
  evaluationTimeout Int     @default(5000) // 5 seconds in ms

  // Configuration
  metadata Json?
  tags     String[] @db.VarChar(50)

  // Relations
  Tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  DelegationGrant DelegationGrant @relation(fields: [delegationGrantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, delegationGrantId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, constraintType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, delegationGrantId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, isEnforced])
  @@index([tenantId, priority])
  @@index([tenantId, validFrom])
  @@index([tenantId, validTo])
  @@index([tenantId, violationAction])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DelegationGrant {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             DelegationStatus @default(PENDING_APPROVAL)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Delegation Fields
  name           String         @db.VarChar(255)
  description    String?
  delegationType DelegationType @default(PERMISSION)

  // Delegation Parties
  delegatorId String @db.Uuid // Who is granting the delegation
  delegateeId String @db.Uuid // Who is receiving the delegation

  // Permission Details
  resourceType String   @db.VarChar(100) // Table/resource being delegated
  resourceIds  String[] @db.Uuid // Specific resource IDs (optional)
  permissions  String[] @db.VarChar(50) // READ, WRITE, DELETE, etc.

  // Scope and Context
  scopeFilter Json? // Additional filtering criteria
  contextData Json? // Context-specific data

  // Time Constraints
  effectiveFrom DateTime  @default(now()) @db.Timestamptz(6)
  effectiveTo   DateTime? @db.Timestamptz(6)
  maxDuration   Int? // Maximum duration in minutes

  // Usage Tracking
  usageCount    Int       @default(0)
  maxUsageCount Int? // Maximum number of uses
  lastUsedAt    DateTime? @db.Timestamptz(6)

  // Approval Workflow
  requiresApproval Boolean   @default(true)
  approvedBy       String?   @db.Uuid
  approvedAt       DateTime? @db.Timestamptz(6)
  approvalNotes    String?

  // Revocation
  revokedAt        DateTime? @db.Timestamptz(6)
  revokedBy        String?   @db.Uuid
  revocationReason String?

  // Delegation Chain
  parentDelegationId String? @db.Uuid // If this is a sub-delegation
  canSubDelegate     Boolean @default(false)
  maxDelegationDepth Int     @default(1)
  currentDepth       Int     @default(1)

  // Risk and Security
  riskLevel              RiskLevel @default(MEDIUM)
  securityClassification String?   @db.VarChar(50)
  requiresMfa            Boolean   @default(false)

  // Monitoring and Alerts
  monitoringEnabled Boolean @default(true)
  alertOnUsage      Boolean @default(false)
  alertThreshold    Int? // Alert after N uses

  // Emergency Controls
  emergencyRevoke  Boolean @default(false)
  emergencyContact String? @db.Uuid

  // Configuration
  metadata Json?
  tags     String[] @db.VarChar(50)

  // Relations
  Tenant               Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  ParentDelegation     DelegationGrant?       @relation("DelegationChain", fields: [parentDelegationId], references: [id])
  ChildDelegations     DelegationGrant[]      @relation("DelegationChain")
  DelegationConstraint DelegationConstraint[]

  @@unique([tenantId, id])
  @@unique([tenantId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedAt])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, currentDepth])
  @@index([tenantId, dataClassification])
  @@index([tenantId, delegateeId])
  @@index([tenantId, delegatorId])
  @@index([tenantId, delegationType])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveFrom])
  @@index([tenantId, effectiveTo])
  @@index([tenantId, parentDelegationId])
  @@index([tenantId, resourceType])
  @@index([tenantId, riskLevel])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Department {
  id                                                    String           @id @default(uuid(7)) @db.Uuid
  status                                                DepartmentStatus @default(ACTIVE)
  version                                               Int              @default(1)
  createdAt                                             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                             DateTime         @db.Timestamptz(6)
  tenantId                                              String           @db.Uuid
  deletedAt                                             DateTime?        @db.Timestamptz(6)
  deletedByActorId                                      String?          @db.Uuid
  createdByActorId                                      String?          @db.Uuid
  updatedByActorId                                      String?          @db.Uuid
  auditCorrelationId                                    String?          @db.Uuid
  dataClassification                                    String           @default("INTERNAL")
  retentionPolicy                                       RetentionPolicy?
  departmentCode                                        String           @unique @db.Citext
  departmentName                                        String           @db.VarChar(100)
  departmentDescription                                 String?
  parentDepartmentId                                    String?          @db.Uuid
  managerId                                             String?          @db.Uuid
  assistantManagerId                                    String?          @db.Uuid
  budgetOwnerId                                         String?          @db.Uuid
  budgetAmount                                          Decimal?         @db.Decimal(12, 2)
  actualSpend                                           Decimal?         @default(0) @db.Decimal(12, 2)
  budgetVariance                                        Decimal?         @default(0) @db.Decimal(12, 2)
  currency                                              CurrencyCode     @default(USD)
  costCenterId                                          String?          @db.Uuid
  primaryLocationId                                     String?          @db.Uuid
  region                                                String?          @db.VarChar(50)
  country                                               String?          @db.VarChar(50)
  timeZone                                              String?          @db.VarChar(50)
  departmentLevel                                       Int              @default(1)
  employeeCount                                         Int?             @default(0)
  maxEmployeeCount                                      Int?
  isActive                                              Boolean          @default(true)
  complianceLevel                                       ComplianceLevel? @default(BASIC)
  reportingStructure                                    Json?
  effectiveDate                                         DateTime         @db.Date
  endDate                                               DateTime?        @db.Date
  approvedByActorId                                     String?          @db.Uuid
  approvedAt                                            DateTime?        @db.Timestamptz(6)
  ApprovalRule                                          ApprovalRule[]
  Channel                                               Channel[]
  Member_Department_tenantId_assistantManagerIdToMember Member?          @relation("Department_tenantId_assistantManagerIdToMember", fields: [tenantId, assistantManagerId], references: [tenantId, id])
  Member_Department_tenantId_budgetOwnerIdToMember      Member?          @relation("Department_tenantId_budgetOwnerIdToMember", fields: [tenantId, budgetOwnerId], references: [tenantId, id])
  CostCenter                                            CostCenter?      @relation(fields: [tenantId, costCenterId], references: [tenantId, id])
  Tenant                                                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_Department_tenantId_managerIdToMember          Member?          @relation("Department_tenantId_managerIdToMember", fields: [tenantId, managerId], references: [tenantId, id])
  Department                                            Department?      @relation("DepartmentToDepartment", fields: [tenantId, parentDepartmentId], references: [tenantId, id])
  other_Department                                      Department[]     @relation("DepartmentToDepartment")
  Location                                              Location?        @relation(fields: [tenantId, primaryLocationId], references: [tenantId, id])
  OrgUnit                                               OrgUnit[]
  Project                                               Project[]
  ReasonCode                                            ReasonCode[]

  @@unique([tenantId, departmentCode])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, assistantManagerId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, budgetAmount])
  @@index([tenantId, budgetOwnerId])
  @@index([tenantId, budgetVariance])
  @@index([tenantId, costCenterId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, departmentLevel])
  @@index([tenantId, departmentName])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, employeeCount])
  @@index([tenantId, isActive])
  @@index([tenantId, managerId])
  @@index([tenantId, parentDepartmentId])
  @@index([tenantId, primaryLocationId])
  @@index([tenantId, region])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DirectChat {
  id                                                String                       @id @default(uuid(7)) @db.Uuid
  status                                            DirectChatStatus             @default(ACTIVE)
  version                                           Int                          @default(1)
  createdAt                                         DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                                         DateTime                     @db.Timestamptz(6)
  tenantId                                          String                       @db.Uuid
  deletedAt                                         DateTime?                    @db.Timestamptz(6)
  deletedByActorId                                  String?                      @db.Uuid
  createdByActorId                                  String?                      @db.Uuid
  updatedByActorId                                  String?                      @db.Uuid
  participant1Id                                    String                       @db.Uuid
  participant2Id                                    String                       @db.Uuid
  chatType                                          DirectChatType               @default(PERSONAL)
  chatStatus                                        DirectChatStatus             @default(ACTIVE)
  isEncrypted                                       Boolean                      @default(true)
  allowAttachments                                  Boolean                      @default(true)
  allowVoiceMessages                                Boolean                      @default(true)
  allowScreenSharing                                Boolean                      @default(false)
  retentionDays                                     Int?
  lastActivityAt                                    DateTime?                    @db.Timestamptz(6)
  lastMessageAt                                     DateTime?                    @db.Timestamptz(6)
  messageCount                                      Int                          @default(0)
  totalAttachments                                  Int                          @default(0)
  participant1Muted                                 Boolean                      @default(false)
  participant2Muted                                 Boolean                      @default(false)
  participant1Blocked                               Boolean                      @default(false)
  participant2Blocked                               Boolean                      @default(false)
  participant1LastRead                              DateTime?                    @db.Timestamptz(6)
  participant2LastRead                              DateTime?                    @db.Timestamptz(6)
  participant1UnreadCount                           Int                          @default(0)
  participant2UnreadCount                           Int                          @default(0)
  contextType                                       String?                      @db.VarChar(50)
  contextId                                         String?                      @db.Uuid
  priority                                          CommunicationMessagePriority @default(NORMAL)
  escalatedFromChannelId                            String?                      @db.Uuid
  archivedAt                                        DateTime?                    @db.Timestamptz(6)
  archivedById                                      String?                      @db.Uuid
  archiveReason                                     String?
  autoDeleteAt                                      DateTime?                    @db.Timestamptz(6)
  isMonitored                                       Boolean                      @default(false)
  monitoringReason                                  String?                      @db.VarChar(255)
  lastComplianceCheck                               DateTime?                    @db.Timestamptz(6)
  complianceFlags                                   String?
  auditCorrelationId                                String?                      @db.Uuid
  dataClassification                                String                       @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy                                   RetentionPolicy?
  Member_DirectChat_tenantId_archivedByIdToMember   Member?                      @relation("DirectChat_tenantId_archivedByIdToMember", fields: [tenantId, archivedById], references: [tenantId, id], onDelete: NoAction)
  Channel                                           Channel?                     @relation(fields: [tenantId, escalatedFromChannelId], references: [tenantId, id], onDelete: NoAction)
  Tenant                                            Tenant                       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_DirectChat_tenantId_participant1IdToMember Member                       @relation("DirectChat_tenantId_participant1IdToMember", fields: [tenantId, participant1Id], references: [tenantId, id])
  Member_DirectChat_tenantId_participant2IdToMember Member                       @relation("DirectChat_tenantId_participant2IdToMember", fields: [tenantId, participant2Id], references: [tenantId, id])
  DirectMessage                                     DirectMessage[]

  @@unique([tenantId, id])
  @@unique([tenantId, participant1Id, participant2Id])
  @@index([contextType, contextId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, chatType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isEncrypted])
  @@index([tenantId, isMonitored])
  @@index([tenantId, lastActivityAt])
  @@index([tenantId, lastMessageAt])
  @@index([tenantId, participant1Id])
  @@index([tenantId, participant2Id])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DirectMessage {
  id                                                                         String                       @id @default(uuid(7)) @db.Uuid
  status                                                                     CommunicationMessageStatus   @default(SENT)
  version                                                                    Int                          @default(1)
  createdAt                                                                  DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                                                                  DateTime                     @db.Timestamptz(6)
  tenantId                                                                   String                       @db.Uuid
  deletedAt                                                                  DateTime?                    @db.Timestamptz(6)
  deletedByActorId                                                           String?                      @db.Uuid
  createdByActorId                                                           String?                      @db.Uuid
  updatedByActorId                                                           String?                      @db.Uuid
  directChatId                                                               String                       @db.Uuid
  senderId                                                                   String                       @db.Uuid
  receiverId                                                                 String                       @db.Uuid
  messageType                                                                CommunicationMessageType     @default(TEXT)
  messageStatus                                                              CommunicationMessageStatus   @default(SENT)
  priority                                                                   CommunicationMessagePriority @default(NORMAL)
  content                                                                    String
  contentFormat                                                              MessageFormat                @default(TEXT)
  encryptedContent                                                           String?
  encryptionKey                                                              String?                      @db.VarChar(255)
  deliveredAt                                                                DateTime?                    @db.Timestamptz(6)
  readAt                                                                     DateTime?                    @db.Timestamptz(6)
  acknowledgedAt                                                             DateTime?                    @db.Timestamptz(6)
  replyToMessageId                                                           String?                      @db.Uuid
  isForwarded                                                                Boolean                      @default(false)
  forwardedFromId                                                            String?                      @db.Uuid
  quotedMessageId                                                            String?                      @db.Uuid
  editedAt                                                                   DateTime?                    @db.Timestamptz(6)
  editCount                                                                  Int                          @default(0)
  originalContent                                                            String?
  attachmentCount                                                            Int                          @default(0)
  hasImages                                                                  Boolean                      @default(false)
  hasDocuments                                                               Boolean                      @default(false)
  hasVoiceMessage                                                            Boolean                      @default(false)
  voiceDuration                                                              Int?
  reactionCount                                                              Int                          @default(0)
  reactions                                                                  String?
  isImportant                                                                Boolean                      @default(false)
  isUrgent                                                                   Boolean                      @default(false)
  isFlagged                                                                  Boolean                      @default(false)
  flaggedAt                                                                  DateTime?                    @db.Timestamptz(6)
  flaggedById                                                                String?                      @db.Uuid
  autoModerated                                                              Boolean                      @default(false)
  complianceScored                                                           Boolean                      @default(false)
  complianceScore                                                            Decimal?                     @db.Decimal(3, 2)
  scheduledAt                                                                DateTime?                    @db.Timestamptz(6)
  isScheduled                                                                Boolean                      @default(false)
  reminderAt                                                                 DateTime?                    @db.Timestamptz(6)
  externalId                                                                 String?                      @db.VarChar(255)
  externalSource                                                             String?                      @db.VarChar(100)
  auditCorrelationId                                                         String?                      @db.Uuid
  dataClassification                                                         String                       @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy                                                            RetentionPolicy?
  DirectChat                                                                 DirectChat                   @relation(fields: [tenantId, directChatId], references: [tenantId, id], onDelete: Cascade)
  Tenant                                                                     Tenant                       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_DirectMessage_tenantId_flaggedByIdToMember                          Member?                      @relation("DirectMessage_tenantId_flaggedByIdToMember", fields: [tenantId, flaggedById], references: [tenantId, id], onDelete: NoAction)
  DirectMessage_DirectMessage_tenantId_forwardedFromIdToDirectMessage        DirectMessage?               @relation("DirectMessage_tenantId_forwardedFromIdToDirectMessage", fields: [tenantId, forwardedFromId], references: [tenantId, id], onDelete: NoAction)
  other_DirectMessage_DirectMessage_tenantId_forwardedFromIdToDirectMessage  DirectMessage[]              @relation("DirectMessage_tenantId_forwardedFromIdToDirectMessage")
  DirectMessage_DirectMessage_tenantId_quotedMessageIdToDirectMessage        DirectMessage?               @relation("DirectMessage_tenantId_quotedMessageIdToDirectMessage", fields: [tenantId, quotedMessageId], references: [tenantId, id], onDelete: NoAction)
  other_DirectMessage_DirectMessage_tenantId_quotedMessageIdToDirectMessage  DirectMessage[]              @relation("DirectMessage_tenantId_quotedMessageIdToDirectMessage")
  Member_DirectMessage_tenantId_receiverIdToMember                           Member                       @relation("DirectMessage_tenantId_receiverIdToMember", fields: [tenantId, receiverId], references: [tenantId, id])
  DirectMessage_DirectMessage_tenantId_replyToMessageIdToDirectMessage       DirectMessage?               @relation("DirectMessage_tenantId_replyToMessageIdToDirectMessage", fields: [tenantId, replyToMessageId], references: [tenantId, id], onDelete: NoAction)
  other_DirectMessage_DirectMessage_tenantId_replyToMessageIdToDirectMessage DirectMessage[]              @relation("DirectMessage_tenantId_replyToMessageIdToDirectMessage")
  Member_DirectMessage_tenantId_senderIdToMember                             Member                       @relation("DirectMessage_tenantId_senderIdToMember", fields: [tenantId, senderId], references: [tenantId, id])
  DirectMessageRead                                                          DirectMessageRead[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, createdAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deliveredAt])
  @@index([tenantId, directChatId])
  @@index([tenantId, isFlagged])
  @@index([tenantId, isImportant])
  @@index([tenantId, messageStatus])
  @@index([tenantId, messageType])
  @@index([tenantId, readAt])
  @@index([tenantId, receiverId])
  @@index([tenantId, scheduledAt])
  @@index([tenantId, senderId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DirectMessageRead {
  id                    String           @id @default(uuid(7)) @db.Uuid
  status                ReadStatus       @default(DELIVERED)
  version               Int              @default(1)
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime         @db.Timestamptz(6)
  tenantId              String           @db.Uuid
  deletedAt             DateTime?        @db.Timestamptz(6)
  deletedByActorId      String?          @db.Uuid
  createdByActorId      String?          @db.Uuid
  updatedByActorId      String?          @db.Uuid
  directMessageId       String           @db.Uuid
  memberId              String           @db.Uuid
  readStatus            ReadStatus       @default(DELIVERED)
  deliveredAt           DateTime?        @db.Timestamptz(6)
  readAt                DateTime?        @db.Timestamptz(6)
  acknowledgedAt        DateTime?        @db.Timestamptz(6)
  deviceType            String?          @db.VarChar(50)
  platform              String?          @db.VarChar(50)
  ipAddress             String?          @db.VarChar(45)
  userAgent             String?          @db.VarChar(500)
  readDuration          Int?
  wasRepliedTo          Boolean          @default(false)
  wasForwarded          Boolean          @default(false)
  wasReacted            Boolean          @default(false)
  readFromNotification  Boolean          @default(false)
  notificationId        String?          @db.Uuid
  pushNotificationSent  Boolean          @default(false)
  emailNotificationSent Boolean          @default(false)
  complianceTracked     Boolean          @default(false)
  sensitiveContent      Boolean          @default(false)
  retentionApplied      Boolean          @default(false)
  auditCorrelationId    String?          @db.Uuid
  dataClassification    String           @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy       RetentionPolicy?
  DirectMessage         DirectMessage    @relation(fields: [tenantId, directMessageId], references: [tenantId, id], onDelete: Cascade)
  Tenant                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member                Member           @relation(fields: [tenantId, memberId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, directMessageId, memberId])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, complianceTracked])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deliveredAt])
  @@index([tenantId, directMessageId])
  @@index([tenantId, memberId])
  @@index([tenantId, readAt])
  @@index([tenantId, readStatus])
  @@index([tenantId, sensitiveContent])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DistributedLock {
  id                 String           @id @default(uuid(7)) @db.Uuid
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  resourceId         String           @db.Uuid
  resourceType       String           @db.VarChar(50)
  lockType           String           @db.VarChar(50)
  lockPurpose        String           @db.VarChar(100)
  lockedBy           String           @db.Uuid
  lockToken          String           @db.VarChar(64)
  acquiredAt         DateTime         @default(now()) @db.Timestamptz(6)
  expiresAt          DateTime         @db.Timestamptz(6)
  heartbeatAt        DateTime?        @db.Timestamptz(6)
  isActive           Boolean          @default(true)
  lockLevel          Int              @default(1)
  maxDuration        Int              @default(300)
  extendCount        Int              @default(0)
  maxExtensions      Int              @default(3)
  operationContext   String?
  sessionId          String?          @db.Uuid
  processId          String?          @db.VarChar(100)
  hostName           String?          @db.VarChar(100)

  @@unique([tenantId, id])
  @@unique([tenantId, lockToken])
  @@unique([tenantId, resourceId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expiresAt])
  @@index([tenantId, heartbeatAt])
  @@index([tenantId, isActive])
  @@index([tenantId, lockedBy])
  @@index([tenantId, resourceType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DocumentGroup {
  id                 String                    @id @default(uuid(7)) @db.Uuid
  status             PlatformTenantChildStatus @default(ACTIVE)
  version            Int                       @default(1)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @db.Timestamptz(6)
  tenantId           String                    @db.Uuid
  deletedAt          DateTime?                 @db.Timestamptz(6)
  deletedByActorId   String?                   @db.Uuid
  createdByActorId   String?                   @db.Uuid
  updatedByActorId   String?                   @db.Uuid
  CreditMemo         CreditMemo[]
  Estimate           Estimate[]
  EstimateAttachment EstimateAttachment[]
  Invoice            Invoice[]
  Project            Project[]
  TaskAttachment     TaskAttachment[]

  // RoomPlan relationships
  RoomModel  RoomModel[]
  RoomExport RoomExport[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, deletedAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model DunningNotice {
  id                                                       String              @id @default(uuid(7)) @db.Uuid
  status                                                   DunningNoticeStatus @default(DRAFT)
  version                                                  Int                 @default(1)
  createdAt                                                DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                                                DateTime            @db.Timestamptz(6)
  tenantId                                                 String              @db.Uuid
  deletedAt                                                DateTime?           @db.Timestamptz(6)
  deletedByActorId                                         String?             @db.Uuid
  createdByActorId                                         String?             @db.Uuid
  updatedByActorId                                         String?             @db.Uuid
  auditCorrelationId                                       String?             @db.Uuid
  dataClassification                                       String              @default("CONFIDENTIAL")
  retentionPolicy                                          RetentionPolicy?
  invoiceId                                                String              @db.Uuid
  dunningSequence                                          Int
  dunningLevel                                             DunningLevel        @default(FIRST_NOTICE)
  noticeType                                               String              @default("EMAIL") @db.VarChar(20)
  subject                                                  String?             @db.VarChar(255)
  message                                                  String
  originalAmount                                           Decimal             @db.Decimal(12, 2)
  outstandingAmount                                        Decimal             @db.Decimal(12, 2)
  lateFeeAmount                                            Decimal             @default(0) @db.Decimal(12, 2)
  totalAmountDue                                           Decimal             @db.Decimal(12, 2)
  sentDate                                                 DateTime            @db.Date
  responseDeadline                                         DateTime?           @db.Date
  paymentDeadline                                          DateTime            @db.Date
  deliveryMethod                                           String?             @db.VarChar(50)
  deliveryStatus                                           String?             @default("SENT") @db.VarChar(20)
  deliveredAt                                              DateTime?           @db.Timestamptz(6)
  readAt                                                   DateTime?           @db.Timestamptz(6)
  customerResponse                                         String?
  responseDate                                             DateTime?           @db.Timestamptz(6)
  nextAction                                               String?             @db.VarChar(100)
  nextActionDate                                           DateTime?           @db.Date
  sentByMemberId                                           String?             @db.Uuid
  assignedToMemberId                                       String?             @db.Uuid
  internalNotes                                            String?
  metadata                                                 Json?
  Member_DunningNotice_tenantId_assignedToMemberIdToMember Member?             @relation("DunningNotice_tenantId_assignedToMemberIdToMember", fields: [tenantId, assignedToMemberId], references: [tenantId, id])
  Tenant                                                   Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Invoice                                                  Invoice             @relation(fields: [tenantId, invoiceId], references: [tenantId, id], onDelete: Cascade)
  Member_DunningNotice_tenantId_sentByMemberIdToMember     Member?             @relation("DunningNotice_tenantId_sentByMemberIdToMember", fields: [tenantId, sentByMemberId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, invoiceId, dunningSequence])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assignedToMemberId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deliveryStatus])
  @@index([tenantId, dunningLevel])
  @@index([tenantId, invoiceId])
  @@index([tenantId, paymentDeadline])
  @@index([tenantId, sentDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ESignatureEnvelope {
  id                    String                @id @default(uuid(7)) @db.Uuid
  status                ESignatureStatus      @default(DRAFT)
  version               Int                   @default(1)
  createdAt             DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime              @db.Timestamptz(6)
  tenantId              String                @db.Uuid
  deletedAt             DateTime?             @db.Timestamptz(6)
  deletedByActorId      String?               @db.Uuid
  createdByActorId      String?               @db.Uuid
  updatedByActorId      String?               @db.Uuid
  auditCorrelationId    String?               @db.Uuid
  dataClassification    String                @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  envelopeNumber        String                @db.VarChar(50)
  title                 String                @db.VarChar(255)
  description           String?
  subject               String?               @db.VarChar(500)
  message               String?
  primaryDocumentId     String?               @db.Uuid
  signingOrder          String                @default("PARALLEL") @db.VarChar(20)
  reminderEnabled       Boolean               @default(true)
  reminderDelay         Int?                  @default(3)
  reminderInterval      Int?                  @default(3)
  expirationDays        Int?                  @default(30)
  sentAt                DateTime?             @db.Timestamptz(6)
  deliveredAt           DateTime?             @db.Timestamptz(6)
  completedAt           DateTime?             @db.Timestamptz(6)
  voidedAt              DateTime?             @db.Timestamptz(6)
  expiredAt             DateTime?             @db.Timestamptz(6)
  projectId             String?               @db.Uuid
  contractId            String?               @db.Uuid
  invoiceId             String?               @db.Uuid
  changeOrderId         String?               @db.Uuid
  entityType            String?               @db.VarChar(100)
  entityId              String?               @db.Uuid
  senderName            String                @db.VarChar(255)
  senderEmail           String                @db.VarChar(255)
  senderMemberId        String?               @db.Uuid
  providerName          String                @default("INTERNAL") @db.VarChar(50)
  providerEnvelopeId    String?               @db.VarChar(255)
  providerStatus        String?               @db.VarChar(50)
  webhookUrl            String?               @db.VarChar(500)
  requireIdVerification Boolean               @default(false)
  requireAccessCode     Boolean               @default(false)
  allowPrinting         Boolean               @default(true)
  allowDownloading      Boolean               @default(true)
  ipRestrictions        String?
  locationRestrictions  String?
  totalRecipients       Int                   @default(0)
  signedRecipients      Int                   @default(0)
  declinedRecipients    Int                   @default(0)
  completionRate        Decimal               @default(0) @db.Decimal(5, 2)
  Tenant                Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  FileObject            FileObject?           @relation(fields: [tenantId, primaryDocumentId], references: [tenantId, id], onDelete: NoAction)
  Project               Project?              @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  Member                Member?               @relation(fields: [tenantId, senderMemberId], references: [tenantId, id], onDelete: NoAction)
  ESignatureRecipient   ESignatureRecipient[]
  SignatureArtifact     SignatureArtifact[]
  SignatureSession      SignatureSession[]

  @@unique([tenantId, envelopeNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, completedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deliveredAt])
  @@index([tenantId, entityType, entityId])
  @@index([tenantId, expiredAt])
  @@index([tenantId, projectId])
  @@index([tenantId, providerEnvelopeId])
  @@index([tenantId, providerName])
  @@index([tenantId, senderMemberId])
  @@index([tenantId, sentAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ESignatureRecipient {
  id                     String               @id @default(uuid(7)) @db.Uuid
  status                 RecipientStatus      @default(PENDING)
  version                Int                  @default(1)
  createdAt              DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime             @db.Timestamptz(6)
  tenantId               String               @db.Uuid
  deletedAt              DateTime?            @db.Timestamptz(6)
  deletedByActorId       String?              @db.Uuid
  createdByActorId       String?              @db.Uuid
  updatedByActorId       String?              @db.Uuid
  auditCorrelationId     String?              @db.Uuid
  dataClassification     String               @default("CONFIDENTIAL")
  retentionPolicy        RetentionPolicy?
  envelopeId             String               @db.Uuid
  recipientType          RecipientType        @default(SIGNER)
  signingOrder           Int                  @default(1)
  name                   String               @db.VarChar(255)
  email                  String               @db.VarChar(255)
  phone                  String?              @db.VarChar(20)
  title                  String?              @db.VarChar(100)
  company                String?              @db.VarChar(255)
  memberId               String?              @db.Uuid
  authenticationMethod   AuthenticationMethod @default(EMAIL)
  accessCode             String?              @db.VarChar(50)
  idVerificationRequired Boolean              @default(false)
  phoneAuthentication    Boolean              @default(false)
  smsAuthentication      Boolean              @default(false)
  privateMessage         String?
  signingInstructions    String?
  note                   String?
  providerRecipientId    String?              @db.VarChar(255)
  providerStatus         String?              @db.VarChar(50)
  providerUserId         String?              @db.VarChar(255)
  sentAt                 DateTime?            @db.Timestamptz(6)
  deliveredAt            DateTime?            @db.Timestamptz(6)
  viewedAt               DateTime?            @db.Timestamptz(6)
  signedAt               DateTime?            @db.Timestamptz(6)
  declinedAt             DateTime?            @db.Timestamptz(6)
  declineReason          String?
  lastReminderAt         DateTime?            @db.Timestamptz(6)
  reminderCount          Int                  @default(0)
  signingIpAddress       String?              @db.VarChar(45)
  signingLocation        String?              @db.VarChar(255)
  signingDevice          String?              @db.VarChar(255)
  userAgent              String?              @db.VarChar(500)
  signedAt_tz            DateTime?            @db.Timestamptz(6)
  signatureValid         Boolean?             @default(true)
  validationErrors       String?
  certificateInfo        String?
  ESignatureEnvelope     ESignatureEnvelope   @relation(fields: [tenantId, envelopeId], references: [tenantId, id], onDelete: Cascade)
  Tenant                 Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member                 Member?              @relation(fields: [tenantId, memberId], references: [tenantId, id], onDelete: NoAction)
  SignatureIntent        SignatureIntent[]
  SignatureSession       SignatureSession[]

  @@unique([tenantId, envelopeId, email])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, email])
  @@index([tenantId, envelopeId])
  @@index([tenantId, memberId])
  @@index([tenantId, providerRecipientId])
  @@index([tenantId, recipientType])
  @@index([tenantId, sentAt])
  @@index([tenantId, signedAt])
  @@index([tenantId, signingOrder])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EmailTemplate {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Employment {
  id                                           String                 @id @default(uuid(7)) @db.Uuid
  status                                       HRWorkforceChildStatus @default(ACTIVE)
  version                                      Int                    @default(1)
  createdAt                                    DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                                    DateTime               @db.Timestamptz(6)
  tenantId                                     String                 @db.Uuid
  deletedAt                                    DateTime?              @db.Timestamptz(6)
  deletedByActorId                             String?                @db.Uuid
  createdByActorId                             String?                @db.Uuid
  updatedByActorId                             String?                @db.Uuid
  auditCorrelationId                           String?                @db.Uuid
  dataClassification                           String                 @default("CONFIDENTIAL")
  retentionPolicy                              RetentionPolicy?
  workerId                                     String                 @db.Uuid
  employmentStatus                             EmploymentStatus       @default(ACTIVE)
  employmentType                               EmploymentType         @default(FULL_TIME)
  startDate                                    DateTime               @db.Date
  endDate                                      DateTime?              @db.Date
  terminationDate                              DateTime?              @db.Date
  terminationReason                            TerminationReason?
  isRehire                                     Boolean                @default(false)
  previousEndDate                              DateTime?              @db.Date
  rehireEligible                               Boolean                @default(true)
  managerId                                    String?                @db.Uuid
  reportingLevel                               Int?                   @default(1)
  benefitsEligible                             Boolean                @default(true)
  workersCompCode                              String?                @db.Citext
  terminationNotes                             String?
  hrNotes                                      String?
  Tenant                                       Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Worker_Employment_tenantId_managerIdToWorker Worker?                @relation("Employment_tenantId_managerIdToWorker", fields: [tenantId, managerId], references: [tenantId, id])
  Worker_Employment_tenantId_workerIdToWorker  Worker                 @relation("Employment_tenantId_workerIdToWorker", fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, startDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, employmentStatus])
  @@index([tenantId, employmentType])
  @@index([tenantId, endDate])
  @@index([tenantId, managerId])
  @@index([tenantId, startDate])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EncryptionProfile {
  id               String                    @id @default(uuid(7)) @db.Uuid
  status           PlatformTenantChildStatus @default(ACTIVE)
  version          Int                       @default(1)
  createdAt        DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                  @db.Timestamptz(6)
  tenantId         String                    @db.Uuid
  deletedAt        DateTime?                 @db.Timestamptz(6)
  deletedByActorId String?                   @db.Uuid
  createdByActorId String?                   @db.Uuid
  updatedByActorId String?                   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ErrorReport {
  id               String         @id @default(uuid(7)) @db.Uuid
  // TODO: Consider a dedicated enum for error lifecycle; using IncidentStatus for alignment
  status           IncidentStatus @default(REPORTED)
  version          Int            @default(1)
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime       @db.Timestamptz(6)
  tenantId         String         @db.Uuid
  deletedAt        DateTime?      @db.Timestamptz(6)
  deletedByActorId String?        @db.Uuid
  createdByActorId String?        @db.Uuid
  updatedByActorId String?        @db.Uuid

  // Enterprise fields
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Error context
  errorCode          String?             @db.VarChar(100)
  message            String              @db.VarChar(500)
  stackTrace         String?
  source             String?             @db.VarChar(100)
  severity           IncidentSeverity    @default(MODERATE)
  priority           IncidentPriority    @default(MEDIUM)
  ackStatus          AckStatus           @default(NONE)
  ackedById          String?             @db.Uuid
  ackedAt            DateTime?           @db.Timestamptz(6)
  resolutionCategory ResolutionCategory?
  resolutionNotes    String?
  resolvedAt         DateTime?           @db.Timestamptz(6)

  // Linkage and correlation
  correlationId     String?  @db.Uuid
  externalReference String?  @db.VarChar(200)
  systemLogId       String?  @db.Uuid
  runId             String?  @db.Uuid
  tags              String[] @db.VarChar(50)
  metadata          Json?

  // Relations (optional single-sided FKs retained without Prisma relations for now)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, ackStatus])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, priority])
  @@index([tenantId, resolvedAt])
  @@index([tenantId, runId])
  @@index([tenantId, severity])
  @@index([tenantId, status])
  @@index([tenantId, systemLogId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Estimate {
  id                                                       String                 @id @default(uuid(7)) @db.Uuid
  status                                                   EstimateStatus         @default(DRAFT)
  version                                                  Int                    @default(1)
  createdAt                                                DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                                                DateTime               @db.Timestamptz(6)
  tenantId                                                 String                 @db.Uuid
  deletedAt                                                DateTime?              @db.Timestamptz(6)
  deletedByActorId                                         String?                @db.Uuid
  createdByActorId                                         String?                @db.Uuid
  updatedByActorId                                         String?                @db.Uuid
  globalId                                                 String                 @unique @db.Uuid
  auditCorrelationId                                       String?                @db.Uuid
  dataClassification                                       String                 @default("CONFIDENTIAL")
  retentionPolicy                                          RetentionPolicy?
  clientAccountId                                          String?                @db.Uuid
  clientContactId                                          String?                @db.Uuid
  contractTemplateId                                       String?                @db.Uuid
  termsTemplateId                                          String?                @db.Uuid
  documentGroupId                                          String?                @db.Uuid
  estimateNumber                                           String?                @db.Citext
  sentAt                                                   DateTime?              @db.Timestamptz(6)
  viewedAt                                                 DateTime?              @db.Timestamptz(6)
  clientApprovedAt                                         DateTime?              @db.Timestamptz(6)
  clientDeclinedAt                                         DateTime?              @db.Timestamptz(6)
  declinedAt                                               DateTime?              @db.Timestamptz(6)
  clientDecisionNote                                       String?
  enablePublicView                                         Boolean                @default(false)
  approvalTokenHash                                        String?                @unique
  publicViewTokenHash                                      String?                @unique
  approvedByMemberId                                       String?                @db.Uuid
  approvedAt                                               DateTime?              @db.Timestamptz(6)
  finalApprovedByMemberId                                  String?                @db.Uuid
  finalApprovedAt                                          DateTime?              @db.Timestamptz(6)
  declineReason                                            String?
  approvedProjectId                                        String?                @db.Uuid
  approvedInvoiceId                                        String?                @db.Uuid
  subtotal                                                 Decimal?               @db.Decimal(12, 2)
  discountType                                             EstimateDiscountType   @default(NONE)
  discountValue                                            Decimal?               @db.Decimal(6, 3)
  discountAmount                                           Decimal                @default(0) @db.Decimal(12, 2)
  taxType                                                  EstimateTaxType        @default(NONE)
  taxRate                                                  Decimal?               @db.Decimal(6, 3)
  taxAmount                                                Decimal                @default(0) @db.Decimal(12, 2)
  totalDue                                                 Decimal?               @db.Decimal(12, 2)
  grandTotal                                               Decimal?               @db.Decimal(12, 2)
  validUntil                                               DateTime?
  name                                                     String
  clientNotes                                              String?
  internalNotes                                            String?
  serviceLocation                                          String?
  specialRequirements                                      String?
  Bid                                                      Bid[]
  ChangeOrder                                              ChangeOrder[]
  Member_Estimate_tenantId_approvedByMemberIdToMember      Member?                @relation("Estimate_tenantId_approvedByMemberIdToMember", fields: [tenantId, approvedByMemberId], references: [tenantId, id])
  Invoice_Estimate_tenantId_approvedInvoiceIdToInvoice     Invoice?               @relation("Estimate_tenantId_approvedInvoiceIdToInvoice", fields: [tenantId, approvedInvoiceId], references: [tenantId, id])
  Project_Estimate_tenantId_approvedProjectIdToProject     Project?               @relation("Estimate_tenantId_approvedProjectIdToProject", fields: [tenantId, approvedProjectId], references: [tenantId, id])
  Account                                                  Account?               @relation(fields: [tenantId, clientAccountId], references: [tenantId, id])
  Contact                                                  Contact?               @relation(fields: [tenantId, clientContactId], references: [tenantId, id])
  ContractTemplate                                         ContractTemplate?      @relation(fields: [tenantId, contractTemplateId], references: [tenantId, id])
  DocumentGroup                                            DocumentGroup?         @relation(fields: [tenantId, documentGroupId], references: [tenantId, id])
  Member_Estimate_tenantId_finalApprovedByMemberIdToMember Member?                @relation("Estimate_tenantId_finalApprovedByMemberIdToMember", fields: [tenantId, finalApprovedByMemberId], references: [tenantId, id])
  TermsTemplate                                            TermsTemplate?         @relation(fields: [tenantId, termsTemplateId], references: [tenantId, id])
  EstimateApproval                                         EstimateApproval[]
  EstimateAttachment                                       EstimateAttachment[]
  EstimateComment                                          EstimateComment[]
  EstimateDiscount                                         EstimateDiscount[]
  EstimateHistoryEvent                                     EstimateHistoryEvent[]
  EstimateLineItem                                         EstimateLineItem[]
  EstimateRevision                                         EstimateRevision[]
  EstimateTax                                              EstimateTax[]
  EstimateTerm                                             EstimateTerm[]
  Invoice_Invoice_tenantId_estimateIdToEstimate            Invoice?               @relation("Invoice_tenantId_estimateIdToEstimate")
  Project_Project_tenantId_estimateIdToEstimate            Project?               @relation("Project_tenantId_estimateIdToEstimate")

  // RoomPlan relationships
  RoomModel RoomModel[]

  // Actor audit relationships
  CreatedByActor Actor? @relation("EstimateCreatedByActor", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("EstimateUpdatedByActor", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor? @relation("EstimateDeletedByActor", fields: [deletedByActorId], references: [id])

  @@unique([tenantId, approvedInvoiceId])
  @@unique([tenantId, approvedProjectId])
  @@unique([tenantId, estimateNumber])
  // TODO: Consider replacing with a partial unique in SQL: (tenantId, estimateNumber) WHERE deletedAt IS NULL
  // Prisma doesn't support partial uniques; keep strict unique now and revisit in a native migration for soft-delete reuse
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedInvoiceId])
  @@index([tenantId, approvedProjectId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, clientAccountId])
  @@index([tenantId, clientContactId])
  @@index([tenantId, contractTemplateId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, documentGroupId])
  @@index([tenantId, grandTotal])
  @@index([tenantId, serviceLocation])
  @@index([tenantId, status, createdAt])
  @@index([tenantId, status])
  @@index([tenantId, termsTemplateId])
  @@index([tenantId, validUntil])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateApproval {
  id                 String                   @id @default(uuid(7)) @db.Uuid
  status             EstimateChildStatus      @default(ACTIVE)
  version            Int                      @default(1)
  createdAt          DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                 @db.Timestamptz(6)
  tenantId           String                   @db.Uuid
  deletedAt          DateTime?                @db.Timestamptz(6)
  deletedByActorId   String?                  @db.Uuid
  createdByActorId   String?                  @db.Uuid
  updatedByActorId   String?                  @db.Uuid
  auditCorrelationId String?                  @db.Uuid
  dataClassification String                   @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  estimateId         String                   @db.Uuid
  approvalRequestId  String?                  @db.Uuid
  approverId         String?                  @db.Uuid
  decision           EstimateApprovalDecision @default(PENDING)
  comments           String?
  requestedAt        DateTime?                @db.Timestamptz(6)
  decidedAt          DateTime?                @db.Timestamptz(6)
  ApprovalRequest    ApprovalRequest?         @relation(fields: [tenantId, approvalRequestId], references: [tenantId, id])
  Estimate           Estimate                 @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, approvalRequestId])
  @@index([tenantId, approverId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, decision, createdAt])
  @@index([tenantId, decision])
  @@index([tenantId, estimateId])
  @@index([tenantId, requestedAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateAttachment {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             EstimateChildStatus @default(ACTIVE)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  estimateId         String              @db.Uuid
  documentGroupId    String?             @db.Uuid
  fileObjectId       String?             @db.Uuid
  fileName           String
  url                String
  mimeType           String?
  fileSize           Int?
  sortOrder          Int                 @default(0)
  uploadedBy         String?             @db.Uuid
  DocumentGroup      DocumentGroup?      @relation(fields: [tenantId, documentGroupId], references: [tenantId, id])
  Estimate           Estimate            @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)
  FileObject         FileObject?         @relation(fields: [tenantId, fileObjectId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, documentGroupId])
  @@index([tenantId, estimateId])
  @@index([tenantId, estimateId, sortOrder])
  @@index([tenantId, fileName])
  @@index([tenantId, fileObjectId])
  @@index([tenantId, mimeType])
  @@index([tenantId, status])
  @@index([tenantId, uploadedBy])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateComment {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             EstimateChildStatus @default(ACTIVE)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  estimateId         String              @db.Uuid
  commentText        String
  authorId           String              @db.Uuid
  isInternal         Boolean             @default(true)
  Estimate           Estimate            @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, authorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, estimateId])
  @@index([tenantId, isInternal])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateDiscount {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             EstimateChildStatus  @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  estimateId         String               @db.Uuid
  type               EstimateDiscountType
  value              Decimal?             @db.Decimal(6, 3)
  amount             Decimal              @db.Decimal(12, 2)
  reason             String?
  Estimate           Estimate             @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, estimateId])
  @@index([tenantId, status])
  @@index([tenantId, type])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateHistoryEvent {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             EstimateChildStatus @default(ACTIVE)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  estimateId         String              @db.Uuid
  eventType          String              @db.VarChar(100)
  eventDescription   String
  actorId            String?             @db.Uuid
  timestamp          DateTime            @default(now()) @db.Timestamptz(6)
  Estimate           Estimate            @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, actorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, estimateId])
  @@index([tenantId, estimateId, timestamp])
  @@index([tenantId, eventType])
  @@index([tenantId, status])
  @@index([tenantId, timestamp])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateLineItem {
  id                                                                          String              @id @default(uuid(7)) @db.Uuid
  status                                                                      EstimateChildStatus @default(ACTIVE)
  version                                                                     Int                 @default(1)
  createdAt                                                                   DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                                                                   DateTime            @db.Timestamptz(6)
  tenantId                                                                    String              @db.Uuid
  deletedAt                                                                   DateTime?           @db.Timestamptz(6)
  deletedByActorId                                                            String?             @db.Uuid
  createdByActorId                                                            String?             @db.Uuid
  updatedByActorId                                                            String?             @db.Uuid
  auditCorrelationId                                                          String?             @db.Uuid
  dataClassification                                                          String              @default("CONFIDENTIAL")
  retentionPolicy                                                             RetentionPolicy?
  estimateId                                                                  String              @db.Uuid
  taskId                                                                      String?             @db.Uuid
  purchaseOrderLineId                                                         String?             @db.Uuid
  priceListItemId                                                             String?             @db.Uuid
  name                                                                        String
  description                                                                 String?
  quantity                                                                    Decimal             @db.Decimal(12, 3)
  unitPrice                                                                   Decimal             @db.Decimal(12, 2)
  // TODO: Add UOM snapshot; nullable for migration safety and aligns with RLS tenancy pattern
  unitOfMeasure                                                               String?             @db.VarChar(50)
  total                                                                       Decimal             @db.Decimal(12, 2)
  sortOrder                                                                   Int                 @default(0)
  PriceListItem                                                               PriceListItem?      @relation(fields: [priceListItemId], references: [id])
  Estimate                                                                    Estimate            @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)
  PurchaseOrderLine                                                           PurchaseOrderLine?  @relation(fields: [tenantId, purchaseOrderLineId], references: [tenantId, id])
  ProjectTask_EstimateLineItem_tenantId_taskIdToProjectTask                   ProjectTask?        @relation("EstimateLineItem_tenantId_taskIdToProjectTask", fields: [tenantId, taskId], references: [tenantId, id])
  InvoiceLineItem                                                             InvoiceLineItem[]
  ProjectTask_ProjectTask_tenantId_sourceEstimateLineItemIdToEstimateLineItem ProjectTask[]       @relation("ProjectTask_tenantId_sourceEstimateLineItemIdToEstimateLineItem")

  @@unique([tenantId, id])
  @@index([priceListItemId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, estimateId])
  @@index([tenantId, estimateId, sortOrder])
  @@index([tenantId, name])
  @@index([tenantId, purchaseOrderLineId])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
  @@index([tenantId, unitPrice])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateRevision {
  id                       String                @id @default(uuid(7)) @db.Uuid
  status                   EstimateChildStatus   @default(ACTIVE)
  version                  Int                   @default(1)
  createdAt                DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime              @db.Timestamptz(6)
  tenantId                 String                @db.Uuid
  deletedAt                DateTime?             @db.Timestamptz(6)
  deletedByActorId         String?               @db.Uuid
  createdByActorId         String?               @db.Uuid
  updatedByActorId         String?               @db.Uuid
  auditCorrelationId       String?               @db.Uuid
  dataClassification       String                @default("CONFIDENTIAL")
  retentionPolicy          RetentionPolicy?
  estimateId               String                @db.Uuid
  revisionNumber           Int
  snapshotSubtotal         Decimal?              @db.Decimal(12, 2)
  snapshotDiscountType     String?
  // TODO: Backward-compatible enum mirror for discount type; nullable for safe phased migration
  snapshotDiscountTypeEnum EstimateDiscountType?
  snapshotDiscountValue    Decimal?              @db.Decimal(6, 3)
  snapshotDiscountAmount   Decimal?              @db.Decimal(12, 2)
  snapshotTaxType          String?
  // TODO: Backward-compatible enum mirror for tax type; nullable for safe phased migration
  snapshotTaxTypeEnum      EstimateTaxType?
  snapshotTaxRate          Decimal?              @db.Decimal(6, 3)
  snapshotTaxAmount        Decimal?              @db.Decimal(12, 2)
  snapshotGrandTotal       Decimal?              @db.Decimal(12, 2)
  snapshotTerms            String?
  snapshotValidUntil       DateTime?             @db.Timestamptz(6)
  Estimate                 Estimate              @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, createdAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, estimateId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateTax {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             EstimateChildStatus @default(ACTIVE)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  estimateId         String              @db.Uuid
  taxType            EstimateTaxType
  rate               Decimal             @db.Decimal(6, 3)
  amount             Decimal             @db.Decimal(12, 2)
  Estimate           Estimate            @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, estimateId])
  @@index([tenantId, rate])
  @@index([tenantId, status])
  @@index([tenantId, taxType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EstimateTerm {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             EstimateChildStatus @default(ACTIVE)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  estimateId         String              @db.Uuid
  termType           EstimateTermType
  body               String
  sortOrder          Int                 @default(0)
  Estimate           Estimate            @relation(fields: [tenantId, estimateId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, estimateId])
  @@index([tenantId, estimateId, sortOrder])
  @@index([tenantId, status])
  @@index([tenantId, termType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EventProjection {
  id               String    @id @default(uuid(7)) @db.Uuid
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
  name             String
  state            Json

  @@unique([tenantId, id])
  @@unique([tenantId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, deletedAt])
  @@index([updatedAt], type: Brin)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model EventSnapshot {
  id               String    @id @default(uuid(7)) @db.Uuid
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
  aggregateType    String
  aggregateId      String
  snapshot         Json
  aggregateVersion Int

  @@unique([tenantId, aggregateType, aggregateId, aggregateVersion])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, aggregateType, aggregateId])
  @@index([tenantId, deletedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Expense {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             ExpenseStatus    @default(DRAFT)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  globalId           String           @unique @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  expenseDate        DateTime         @db.Date
  amount             Decimal          @db.Decimal(12, 2)
  currency           String           @default("USD") @db.VarChar(3)
  description        String           @db.VarChar(500)
  category           String           @db.VarChar(100)
  merchantName       String?          @db.VarChar(255)
  hasReceipt         Boolean          @default(false)
  receiptUrl         String?
  businessPurpose    String?
  projectId          String?          @db.Uuid
  clientBillable     Boolean          @default(false)
  expenseReportId    String?          @db.Uuid
  ExpenseReceipt     ExpenseReceipt[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, category])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expenseDate])
  @@index([tenantId, expenseReportId])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ExpenseApproval {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ExpenseChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  approvalLevel      Int                @default(1)
  decision           String             @db.VarChar(50)
  approvalDate       DateTime?          @db.Timestamptz(6)
  comments           String?
  delegatedFrom      String?            @db.Uuid
  expenseReportId    String             @db.Uuid
  approverId         String             @db.Uuid
  Member             Member             @relation(fields: [tenantId, approverId], references: [tenantId, id])
  ExpenseReport      ExpenseReport      @relation(fields: [tenantId, expenseReportId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approverId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, decision])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expenseReportId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ExpenseLine {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ExpenseChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  lineNumber         Int                @default(1)
  description        String             @db.VarChar(500)
  amount             Decimal            @db.Decimal(12, 2)
  category           String             @db.VarChar(100)
  taxAmount          Decimal?           @db.Decimal(12, 2)
  billableToClient   Boolean            @default(false)
  expenseReportId    String             @db.Uuid
  ExpenseReport      ExpenseReport      @relation(fields: [tenantId, expenseReportId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, category])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expenseReportId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ExpenseReceipt {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ExpenseChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  fileName           String             @db.VarChar(255)
  fileType           String             @db.VarChar(100)
  fileSize           Int
  fileUrl            String
  uploadDate         DateTime           @default(now()) @db.Timestamptz(6)
  ocrText            String?
  merchantName       String?            @db.VarChar(255)
  receiptAmount      Decimal?           @db.Decimal(12, 2)
  receiptDate        DateTime?          @db.Date
  expenseId          String?            @db.Uuid
  expenseReportId    String?            @db.Uuid
  Expense            Expense?           @relation(fields: [expenseId], references: [id])
  ExpenseReport      ExpenseReport?     @relation(fields: [tenantId, expenseReportId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([expenseId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expenseReportId])
  @@index([tenantId, merchantName])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ExpenseReport {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             ExpenseReportStatus @default(DRAFT)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  globalId           String              @unique @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  reportNumber       String              @db.VarChar(50)
  reportTitle        String              @db.VarChar(255)
  reportPeriod       String?             @db.VarChar(100)
  totalAmount        Decimal             @db.Decimal(12, 2)
  currency           String              @default("USD") @db.VarChar(3)
  businessPurpose    String?
  employeeId         String              @db.Uuid
  employeeName       String              @db.VarChar(255)
  submittedAt        DateTime?           @db.Timestamptz(6)
  approvedAt         DateTime?           @db.Timestamptz(6)
  approvedById       String?             @db.Uuid
  rejectionReason    String?
  ExpenseApproval    ExpenseApproval[]
  ExpenseLine        ExpenseLine[]
  ExpenseReceipt     ExpenseReceipt[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, employeeId])
  @@index([tenantId, status])
  @@index([tenantId, submittedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ExportArtifact {
  id               String          @id @default(uuid(7)) @db.Uuid
  // Lifecycle
  status           String          @default("ACTIVE") @db.VarChar(20)
  // Shadow enum for artifact status
  statusEnum       ArtifactStatus? @default(ACTIVE)
  version          Int             @default(1)
  createdAt        DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime        @db.Timestamptz(6)
  tenantId         String          @db.Uuid
  deletedAt        DateTime?       @db.Timestamptz(6)
  deletedByActorId String?         @db.Uuid
  createdByActorId String?         @db.Uuid
  updatedByActorId String?         @db.Uuid

  // Enterprise
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Artifact metadata
  jobId           String?       @db.Uuid
  artifactType    ArtifactType?
  fileUrl         String?       @db.VarChar(500)
  contentType     String?       @db.VarChar(100)
  fileSizeBytes   Int?
  checksum        String?       @db.VarChar(100)
  storageProvider String?       @db.VarChar(50)
  metadata        Json?

  // Relations
  ExportJob ExportJob? @relation(fields: [tenantId, jobId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, jobId])
  @@index([tenantId, status])
  @@index([tenantId, statusEnum])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ExportJob {
  id               String        @id @default(uuid(7)) @db.Uuid
  // Lifecycle
  status           String        @default("QUEUED") @db.VarChar(20)
  // Shadow enum using JobRunStatus for execution lifecycle
  statusEnum       JobRunStatus? @default(QUEUED)
  version          Int           @default(1)
  createdAt        DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime      @db.Timestamptz(6)
  tenantId         String        @db.Uuid
  deletedAt        DateTime?     @db.Timestamptz(6)
  deletedByActorId String?       @db.Uuid
  createdByActorId String?       @db.Uuid
  updatedByActorId String?       @db.Uuid

  // Enterprise
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Job context
  jobType      String?   @db.VarChar(50) // REPORT or DASHBOARD or OTHER
  format       String?   @db.VarChar(20) // PDF, CSV, XLSX, etc.
  requestedAt  DateTime? @db.Timestamptz(6)
  scheduledAt  DateTime? @db.Timestamptz(6)
  startedAt    DateTime? @db.Timestamptz(6)
  completedAt  DateTime? @db.Timestamptz(6)
  errorMessage String?
  filters      Json?
  parameters   Json?

  // Source references (polymorphic via optional FKs)
  reportDefinitionId    String? @db.Uuid
  dashboardDefinitionId String? @db.Uuid

  ReportDefinition    ReportDefinition?    @relation(fields: [tenantId, reportDefinitionId], references: [tenantId, id])
  DashboardDefinition DashboardDefinition? @relation(fields: [tenantId, dashboardDefinitionId], references: [tenantId, id])

  // Artifacts
  ExportArtifact ExportArtifact[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, reportDefinitionId])
  @@index([tenantId, dashboardDefinitionId])
  @@index([tenantId, scheduledAt])
  @@index([tenantId, startedAt])
  @@index([tenantId, completedAt])
  @@index([tenantId, status])
  @@index([tenantId, statusEnum])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ExternalShareLink {
  id                                                    String              @id @default(uuid(7)) @db.Uuid
  status                                                ExternalShareStatus @default(ACTIVE)
  version                                               Int                 @default(1)
  createdAt                                             DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                                             DateTime            @db.Timestamptz(6)
  tenantId                                              String              @db.Uuid
  deletedAt                                             DateTime?           @db.Timestamptz(6)
  deletedByActorId                                      String?             @db.Uuid
  createdByActorId                                      String?             @db.Uuid
  updatedByActorId                                      String?             @db.Uuid
  shareToken                                            String              @unique @db.VarChar(255)
  shareUrl                                              String              @unique @db.VarChar(1000)
  shareType                                             ExternalShareType
  accessLevel                                           ExternalAccessLevel @default(VIEW_ONLY)
  shareStatus                                           ExternalShareStatus @default(ACTIVE)
  contentType                                           String              @db.VarChar(50)
  contentId                                             String              @db.Uuid
  channelId                                             String?             @db.Uuid
  messageId                                             String?             @db.Uuid
  fileObjectId                                          String?             @db.Uuid
  createdById                                           String              @db.Uuid
  sharedWithEmail                                       String?             @db.VarChar(255)
  sharedWithName                                        String?             @db.VarChar(255)
  requiresPassword                                      Boolean             @default(false)
  passwordHash                                          String?             @db.VarChar(255)
  maxUses                                               Int?
  currentUses                                           Int                 @default(0)
  isOneTimeUse                                          Boolean             @default(false)
  allowDownload                                         Boolean             @default(true)
  allowPrint                                            Boolean             @default(true)
  allowCopy                                             Boolean             @default(true)
  allowShare                                            Boolean             @default(false)
  expiresAt                                             DateTime?           @db.Timestamptz(6)
  validFrom                                             DateTime?           @db.Timestamptz(6)
  validUntil                                            DateTime?           @db.Timestamptz(6)
  timezone                                              String?             @db.VarChar(50)
  firstAccessedAt                                       DateTime?           @db.Timestamptz(6)
  lastAccessedAt                                        DateTime?           @db.Timestamptz(6)
  totalViews                                            Int                 @default(0)
  uniqueVisitors                                        Int                 @default(0)
  totalDownloads                                        Int                 @default(0)
  totalTimeSpent                                        Int                 @default(0)
  visitorIps                                            String?
  visitorCountries                                      String?
  visitorDevices                                        String?
  visitorBrowsers                                       String?
  isSecureLink                                          Boolean             @default(true)
  requiresAuth                                          Boolean             @default(false)
  ipRestrictions                                        String?
  domainRestrictions                                    String?
  geoRestrictions                                       String?
  addWatermark                                          Boolean             @default(false)
  watermarkText                                         String?             @db.VarChar(255)
  disableRightClick                                     Boolean             @default(false)
  trackScreenshots                                      Boolean             @default(false)
  externalSystemId                                      String?             @db.VarChar(255)
  webhookUrl                                            String?             @db.VarChar(1000)
  customMetadata                                        String?
  revokedAt                                             DateTime?           @db.Timestamptz(6)
  revokedById                                           String?             @db.Uuid
  revocationReason                                      String?
  autoRevokeAfterUse                                    Boolean             @default(false)
  notifyOnAccess                                        Boolean             @default(true)
  notifyOnDownload                                      Boolean             @default(true)
  notifyOnExpiry                                        Boolean             @default(true)
  lastNotificationAt                                    DateTime?           @db.Timestamptz(6)
  auditCorrelationId                                    String?             @db.Uuid
  dataClassification                                    String              @default("RESTRICTED") @db.VarChar(50)
  retentionPolicy                                       RetentionPolicy?
  Channel                                               Channel?            @relation(fields: [tenantId, channelId], references: [tenantId, id], onDelete: Cascade)
  Member_ExternalShareLink_tenantId_createdByIdToMember Member              @relation("ExternalShareLink_tenantId_createdByIdToMember", fields: [tenantId, createdById], references: [tenantId, id])
  FileObject                                            FileObject?         @relation(fields: [tenantId, fileObjectId], references: [tenantId, id], onDelete: Cascade)
  Tenant                                                Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Message                                               Message?            @relation(fields: [tenantId, messageId], references: [tenantId, id], onDelete: Cascade)
  Member_ExternalShareLink_tenantId_revokedByIdToMember Member?             @relation("ExternalShareLink_tenantId_revokedByIdToMember", fields: [tenantId, revokedById], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, id])
  @@index([contentType, contentId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, channelId])
  @@index([tenantId, createdById])
  @@index([tenantId, currentUses])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expiresAt])
  @@index([tenantId, fileObjectId])
  @@index([tenantId, isOneTimeUse])
  @@index([tenantId, lastAccessedAt])
  @@index([tenantId, messageId])
  @@index([tenantId, shareType])
  @@index([tenantId, sharedWithEmail])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FileObject {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             FileObjectStatus     @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  fileName           String               @db.VarChar(255)
  displayName        String?              @db.VarChar(255)
  description        String?
  fileSize           BigInt
  mimeType           String               @db.VarChar(100)
  fileCategory       FileCategory?        @default(OTHER)
  storageProvider    StorageProvider      @default(S3)
  storagePath        String               @db.VarChar(1000)
  storageRegion      String?              @db.VarChar(50)
  storageBucket      String?              @db.VarChar(100)
  storageKey         String               @db.VarChar(500)
  md5Hash            String?              @db.VarChar(32)
  sha256Hash         String?              @db.VarChar(64)
  isEncrypted        Boolean              @default(false)
  encryptionKey      String?              @db.VarChar(255)
  isPublic           Boolean              @default(false)
  accessUrl          String?              @db.VarChar(1000)
  accessExpiry       DateTime?            @db.Timestamptz(6)
  downloadCount      Int                  @default(0)
  lastAccessedAt     DateTime?            @db.Timestamptz(6)
  virusScanStatus    VirusScanStatus?     @default(PENDING)
  virusScanAt        DateTime?            @db.Timestamptz(6)
  quarantineReason   String?
  hasPreview         Boolean              @default(false)
  previewPath        String?              @db.VarChar(500)
  thumbnailPath      String?              @db.VarChar(500)
  ocrText            String?
  contentTags        String[]             @db.VarChar(50)
  projectId          String?              @db.Uuid
  uploadedById       String?              @db.Uuid
  source             String?              @db.VarChar(100)
  Attachment         Attachment[]
  ESignatureEnvelope ESignatureEnvelope[]
  EstimateAttachment EstimateAttachment[]
  ExternalShareLink  ExternalShareLink[]
  Tenant             Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project            Project?             @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  Member             Member?              @relation(fields: [tenantId, uploadedById], references: [tenantId, id], onDelete: NoAction)
  MessageAttachment  MessageAttachment[]
  SignatureArtifact  SignatureArtifact[]
  TaskAttachment     TaskAttachment[]

  @@unique([tenantId, id])
  @@unique([tenantId, storageKey])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, fileCategory])
  @@index([tenantId, fileName])
  @@index([tenantId, fileSize])
  @@index([tenantId, isEncrypted])
  @@index([tenantId, isPublic])
  @@index([tenantId, lastAccessedAt])
  @@index([tenantId, mimeType])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
  @@index([tenantId, storageProvider])
  @@index([tenantId, uploadedById])
  @@index([tenantId, virusScanAt])
  @@index([tenantId, virusScanStatus])
}

model FileTag {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ForecastLine {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ForecastSnapshot {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FraudPolicy {
  id                 String            @id @default(uuid(7)) @db.Uuid
  status             FraudPolicyStatus @default(ACTIVE)
  version            Int               @default(1)
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @db.Timestamptz(6)
  tenantId           String            @db.Uuid
  deletedAt          DateTime?         @db.Timestamptz(6)
  deletedByActorId   String?           @db.Uuid
  createdByActorId   String?           @db.Uuid
  updatedByActorId   String?           @db.Uuid
  auditCorrelationId String?           @db.Uuid
  dataClassification String            @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Policy Fields
  name           String          @db.VarChar(255)
  description    String?
  policyType     FraudPolicyType @default(TRANSACTION_MONITORING)
  severity       RiskLevel       @default(MEDIUM)
  isActive       Boolean         @default(true)
  isSystemPolicy Boolean         @default(false)

  // Scope and Targeting
  entityTypes     String[] @db.VarChar(100) // What entities this policy monitors
  businessUnits   String[] @db.VarChar(100) // Which business units
  geographicScope String[] @db.VarChar(50) // Countries/regions

  // Risk Thresholds
  riskThreshold      Decimal  @default(0.7) @db.Decimal(3, 2) // 0.0 to 1.0
  criticalThreshold  Decimal  @default(0.9) @db.Decimal(3, 2)
  autoBlockThreshold Decimal? @db.Decimal(3, 2) // Auto-block above this

  // Monitoring Windows
  monitoringWindow  Int @default(24) // Hours to monitor
  lookbackPeriod    Int @default(168) // Hours to look back
  aggregationWindow Int @default(1) // Hours for aggregation

  // Actions and Responses
  alertOnTrigger   Boolean @default(true)
  requiresApproval Boolean @default(false)
  autoRemediation  Boolean @default(false)
  escalationRules  Json? // Escalation configuration

  // ML and Analytics
  useMLModel            Boolean  @default(false)
  mlModelId             String?  @db.Uuid
  mlConfidenceThreshold Decimal? @db.Decimal(3, 2)

  // Compliance and Audit
  complianceFramework   String[]       @db.VarChar(50) // SOX, PCI, etc.
  regulatoryRequirement String?        @db.VarChar(255)
  auditFrequency        AuditFrequency @default(MONTHLY)
  lastAuditAt           DateTime?      @db.Timestamptz(6)
  nextAuditAt           DateTime?      @db.Timestamptz(6)

  // Performance Metrics
  triggerCount      Int       @default(0)
  falsePositiveRate Decimal?  @db.Decimal(5, 4)
  truePositiveRate  Decimal?  @db.Decimal(5, 4)
  lastTriggeredAt   DateTime? @db.Timestamptz(6)

  // Configuration
  configuration Json? // Policy-specific config
  metadata      Json?
  tags          String[] @db.VarChar(50)

  // Relations
  Tenant           Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  FraudPolicyRule  FraudPolicyRule[]
  FraudPolicyScope FraudPolicyScope[]
  AnomalyCase      AnomalyCase[]

  @@unique([tenantId, id])
  @@unique([tenantId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, entityTypes])
  @@index([tenantId, isActive])
  @@index([tenantId, isSystemPolicy])
  @@index([tenantId, lastTriggeredAt])
  @@index([tenantId, policyType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FraudPolicyRule {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             FraudRuleStatus  @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Rule Fields
  fraudPolicyId String        @db.Uuid
  name          String        @db.VarChar(255)
  description   String?
  ruleType      FraudRuleType @default(THRESHOLD)
  priority      Int           @default(100) // Lower number = higher priority
  isActive      Boolean       @default(true)

  // Rule Logic
  condition           String // SQL-like condition or JSON rule
  conditionType       RuleConditionType   @default(SQL)
  operator            RuleOperator        @default(GREATER_THAN)
  threshold           Decimal?            @db.Decimal(15, 4)
  comparisonField     String?             @db.VarChar(100)
  aggregationFunction AggregationFunction @default(SUM)

  // Time-based Rules
  timeWindow     Int? // Minutes for time-based rules
  frequency      RuleFrequency @default(REAL_TIME)
  lookbackPeriod Int? // Hours to look back

  // Actions and Scoring
  riskScore      Decimal     @default(0.5) @db.Decimal(3, 2) // 0.0 to 1.0
  action         FraudAction @default(ALERT)
  autoBlock      Boolean     @default(false)
  requiresReview Boolean     @default(true)

  // Rule Dependencies
  parentRuleId   String?  @db.Uuid
  dependsOnRules String[] @db.Uuid // Must trigger before this rule
  excludeRules   String[] @db.Uuid // Cannot trigger with these rules

  // Performance Metrics
  triggerCount          Int       @default(0)
  falsePositiveCount    Int       @default(0)
  truePositiveCount     Int       @default(0)
  lastTriggeredAt       DateTime? @db.Timestamptz(6)
  averageProcessingTime Int? // Milliseconds

  // ML Integration
  useMLModel  Boolean  @default(false)
  mlModelId   String?  @db.Uuid
  mlFeatures  String[] @db.VarChar(100)
  mlThreshold Decimal? @db.Decimal(3, 2)

  // Configuration
  configuration Json? // Rule-specific parameters
  metadata      Json?
  tags          String[] @db.VarChar(50)

  // Relations
  Tenant      Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  FraudPolicy FraudPolicy       @relation(fields: [fraudPolicyId], references: [id], onDelete: Cascade)
  ParentRule  FraudPolicyRule?  @relation("RuleHierarchy", fields: [parentRuleId], references: [id])
  ChildRules  FraudPolicyRule[] @relation("RuleHierarchy")

  @@unique([tenantId, id])
  @@unique([tenantId, fraudPolicyId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, fraudPolicyId])
  @@index([tenantId, isActive])
  @@index([tenantId, lastTriggeredAt])
  @@index([tenantId, parentRuleId])
  @@index([tenantId, priority])
  @@index([tenantId, ruleType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FraudPolicyScope {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             String           @default("ACTIVE")
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?

  // Core Scope Fields
  fraudPolicyId String    @db.Uuid
  name          String    @db.VarChar(255)
  description   String?
  scopeType     ScopeType @default(ENTITY)
  isActive      Boolean   @default(true)

  // Entity Scope
  entityType       String?  @db.VarChar(100) // Table/model name
  entityIds        String[] @db.Uuid // Specific entity IDs
  entityConditions Json? // Dynamic conditions

  // Geographic Scope
  countries String[] @db.VarChar(3) // ISO country codes
  regions   String[] @db.VarChar(50) // Geographic regions
  timezones String[] @db.VarChar(50) // Timezone restrictions

  // Organizational Scope
  businessUnits String[] @db.VarChar(100) // Business unit codes
  departments   String[] @db.VarChar(100) // Department codes
  costCenters   String[] @db.VarChar(50) // Cost center codes

  // User/Role Scope
  userIds   String[] @db.Uuid // Specific users
  roleIds   String[] @db.Uuid // Specific roles
  memberIds String[] @db.Uuid // Specific members

  // Transaction Scope
  transactionTypes String[] @db.VarChar(100) // Transaction categories
  amountRanges     Json? // Min/max amount ranges
  currencyCodes    String[] @db.VarChar(3) // Currency restrictions

  // Time Scope
  timeWindows   Json? // Active time windows
  effectiveFrom DateTime? @db.Timestamptz(6)
  effectiveTo   DateTime? @db.Timestamptz(6)

  // Channel/Source Scope
  channels    String[] @db.VarChar(100) // API, Web, Mobile, etc.
  ipRanges    String[] @db.VarChar(45) // IP address ranges
  deviceTypes String[] @db.VarChar(50) // Device categories

  // Advanced Filtering
  includeFilters Json? // Inclusion criteria
  excludeFilters Json? // Exclusion criteria
  customLogic    String? // Custom scope logic

  // Performance
  priority        Int     @default(100) // Evaluation priority
  cacheEnabled    Boolean @default(true)
  cacheTtlSeconds Int     @default(300) // 5 minutes

  // Configuration
  configuration Json?
  metadata      Json?
  tags          String[] @db.VarChar(50)

  // Relations
  Tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  FraudPolicy FraudPolicy @relation(fields: [fraudPolicyId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, fraudPolicyId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, entityType])
  @@index([tenantId, fraudPolicyId])
  @@index([tenantId, isActive])
  @@index([tenantId, priority])
  @@index([tenantId, scopeType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model GLAccount {
  id                   String            @id @default(uuid(7)) @db.Uuid
  status               GLAccountStatus   @default(ACTIVE)
  version              Int               @default(1)
  createdAt            DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime          @db.Timestamptz(6)
  tenantId             String            @db.Uuid
  deletedAt            DateTime?         @db.Timestamptz(6)
  deletedByActorId     String?           @db.Uuid
  createdByActorId     String?           @db.Uuid
  updatedByActorId     String?           @db.Uuid
  auditCorrelationId   String?           @db.Uuid
  dataClassification   String            @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  accountCode          String            @db.VarChar(50)
  accountName          String            @db.VarChar(255)
  description          String?
  accountType          GLAccountType
  accountCategory      GLAccountCategory
  normalBalance        String            @db.VarChar(10)
  parentAccountId      String?           @db.Uuid
  accountLevel         Int               @default(1)
  fullPath             String            @db.VarChar(500)
  isParentAccount      Boolean           @default(false)
  isDetailAccount      Boolean           @default(true)
  isActive             Boolean           @default(true)
  requiresProject      Boolean           @default(false)
  requiresCostCode     Boolean           @default(false)
  allowManualEntry     Boolean           @default(true)
  isSystemAccount      Boolean           @default(false)
  baseCurrency         String            @default("USD") @db.VarChar(3)
  allowMultiCurrency   Boolean           @default(false)
  isEstimatingAccount  Boolean           @default(false)
  isBillingAccount     Boolean           @default(false)
  isPayrollAccount     Boolean           @default(false)
  isProcurementAccount Boolean           @default(false)
  currentBalance       Decimal?          @db.Decimal(18, 6)
  ytdBalance           Decimal?          @db.Decimal(18, 6)
  lastTransactionAt    DateTime?         @db.Timestamptz(6)
  Tenant               Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  GLAccount            GLAccount?        @relation("GLAccountToGLAccount", fields: [tenantId, parentAccountId], references: [tenantId, id], onDelete: NoAction)
  other_GLAccount      GLAccount[]       @relation("GLAccountToGLAccount")
  JournalLine          JournalLine[]
  TaxRate              TaxRate[]

  @@unique([tenantId, accountCode])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountCategory])
  @@index([tenantId, accountType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, fullPath])
  @@index([tenantId, isActive])
  @@index([tenantId, isBillingAccount])
  @@index([tenantId, isDetailAccount])
  @@index([tenantId, isEstimatingAccount])
  @@index([tenantId, isPayrollAccount])
  @@index([tenantId, isProcurementAccount])
  @@index([tenantId, parentAccountId])
  @@index([tenantId, requiresProject])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model GoodsReceipt {
  id                                               String                 @id @default(uuid(7)) @db.Uuid
  status                                           GoodsReceiptStatus     @default(PENDING)
  version                                          Int                    @default(1)
  createdAt                                        DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                                        DateTime               @db.Timestamptz(6)
  tenantId                                         String                 @db.Uuid
  deletedAt                                        DateTime?              @db.Timestamptz(6)
  deletedByActorId                                 String?                @db.Uuid
  createdByActorId                                 String?                @db.Uuid
  updatedByActorId                                 String?                @db.Uuid
  auditCorrelationId                               String?                @db.Uuid
  dataClassification                               String                 @default("CONFIDENTIAL")
  retentionPolicy                                  RetentionPolicy?
  receiptNumber                                    String                 @db.VarChar(50)
  purchaseOrderId                                  String?                @db.Uuid
  vendorId                                         String                 @db.Uuid
  receivedDate                                     DateTime               @db.Date
  receivedBy                                       String?                @db.Uuid
  deliveryNote                                     String?                @db.VarChar(100)
  carrierName                                      String?                @db.VarChar(100)
  trackingNumber                                   String?                @db.VarChar(100)
  vehiclePlate                                     String?                @db.VarChar(20)
  driverName                                       String?                @db.VarChar(100)
  receivingLocation                                String?                @db.VarChar(200)
  warehouseLocation                                String?                @db.VarChar(100)
  storageLocation                                  String?                @db.VarChar(100)
  inspectionRequired                               Boolean                @default(false)
  inspectionStatus                                 GoodsInspectionStatus?
  inspectedBy                                      String?                @db.Uuid
  inspectedAt                                      DateTime?              @db.Timestamptz(6)
  qualityNotes                                     String?
  totalQuantity                                    Decimal?               @db.Decimal(12, 3)
  totalValue                                       Decimal?               @db.Decimal(15, 2)
  currency                                         String                 @default("USD") @db.VarChar(3)
  isComplete                                       Boolean                @default(false)
  completedAt                                      DateTime?              @db.Timestamptz(6)
  completedBy                                      String?                @db.Uuid
  internalNotes                                    String?
  vendorNotes                                      String?
  discrepancyNotes                                 String?
  Member_GoodsReceipt_tenantId_completedByToMember Member?                @relation("GoodsReceipt_tenantId_completedByToMember", fields: [tenantId, completedBy], references: [tenantId, id], onDelete: NoAction)
  Tenant                                           Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_GoodsReceipt_tenantId_inspectedByToMember Member?                @relation("GoodsReceipt_tenantId_inspectedByToMember", fields: [tenantId, inspectedBy], references: [tenantId, id], onDelete: NoAction)
  PurchaseOrder                                    PurchaseOrder?         @relation(fields: [tenantId, purchaseOrderId], references: [tenantId, id], onDelete: NoAction)
  Member_GoodsReceipt_tenantId_receivedByToMember  Member?                @relation("GoodsReceipt_tenantId_receivedByToMember", fields: [tenantId, receivedBy], references: [tenantId, id], onDelete: NoAction)
  Vendor                                           Vendor                 @relation(fields: [tenantId, vendorId], references: [tenantId, id])
  GoodsReceiptLine                                 GoodsReceiptLine[]

  @@unique([tenantId, id])
  @@unique([tenantId, receiptNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, inspectionStatus])
  @@index([tenantId, isComplete])
  @@index([tenantId, purchaseOrderId])
  @@index([tenantId, receivedDate])
  @@index([tenantId, status])
  @@index([tenantId, vendorId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model GoodsReceiptLine {
  id                  String                   @id @default(uuid(7)) @db.Uuid
  status              ProcurementChildStatus   @default(ACTIVE)
  version             Int                      @default(1)
  createdAt           DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime                 @db.Timestamptz(6)
  tenantId            String                   @db.Uuid
  deletedAt           DateTime?                @db.Timestamptz(6)
  deletedByActorId    String?                  @db.Uuid
  createdByActorId    String?                  @db.Uuid
  updatedByActorId    String?                  @db.Uuid
  auditCorrelationId  String?                  @db.Uuid
  dataClassification  String                   @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  goodsReceiptId      String                   @db.Uuid
  purchaseOrderLineId String                   @db.Uuid
  lineNumber          Int                      @default(1)
  itemDescription     String                   @db.VarChar(500)
  itemCode            String?                  @db.VarChar(50)
  vendorPartNumber    String?                  @db.VarChar(100)
  orderedQuantity     Decimal                  @db.Decimal(12, 3)
  deliveredQuantity   Decimal                  @db.Decimal(12, 3)
  acceptedQuantity    Decimal                  @db.Decimal(12, 3)
  rejectedQuantity    Decimal                  @default(0) @db.Decimal(12, 3)
  unitOfMeasure       ProcurementUnitOfMeasure @default(EA)
  batchNumber         String?                  @db.VarChar(50)
  lotNumber           String?                  @db.VarChar(50)
  serialNumbers       String?
  expiryDate          DateTime?                @db.Date
  manufacturingDate   DateTime?                @db.Date
  inspectionNotes     String?
  qualityGrade        QualityGrade?
  defectDescription   String?
  rejectionReason     String?
  storageLocation     String?                  @db.VarChar(100)
  binLocation         String?                  @db.VarChar(50)
  shelfLife           Int?
  storageConditions   String?                  @db.VarChar(200)
  unitCost            Decimal?                 @db.Decimal(12, 2)
  extendedCost        Decimal?                 @db.Decimal(15, 2)
  currency            String                   @default("USD") @db.VarChar(3)
  quantityVariance    Decimal?                 @db.Decimal(12, 3)
  priceVariance       Decimal?                 @db.Decimal(12, 2)
  isProcessed         Boolean                  @default(false)
  processedAt         DateTime?                @db.Timestamptz(6)
  processedBy         String?                  @db.Uuid
  internalNotes       String?
  vendorNotes         String?
  APBillLine          APBillLine[]
  Tenant              Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  GoodsReceipt        GoodsReceipt             @relation(fields: [tenantId, goodsReceiptId], references: [tenantId, id], onDelete: Cascade)
  Member              Member?                  @relation(fields: [tenantId, processedBy], references: [tenantId, id], onDelete: NoAction)
  PurchaseOrderLine   PurchaseOrderLine        @relation(fields: [tenantId, purchaseOrderLineId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, goodsReceiptId, lineNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, batchNumber])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, goodsReceiptId])
  @@index([tenantId, isProcessed])
  @@index([tenantId, itemCode])
  @@index([tenantId, purchaseOrderLineId])
  @@index([tenantId, serialNumbers])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Grade {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  gradeCode          String                 @unique @db.Citext
  gradeName          String                 @db.VarChar(100)
  gradeDescription   String?
  gradeLevel         Int
  parentGradeId      String?                @db.Uuid
  minSalary          Decimal?               @db.Decimal(12, 2)
  midSalary          Decimal?               @db.Decimal(12, 2)
  maxSalary          Decimal?               @db.Decimal(12, 2)
  salaryBand         String?                @db.VarChar(50)
  currency           String                 @default("USD") @db.VarChar(3)
  promotionCriteria  Json?
  competencyLevel    Int?                   @default(1)
  experienceYears    Int?
  effectiveDate      DateTime               @db.Date
  endDate            DateTime?              @db.Date
  approvedByActorId  String?                @db.Uuid
  approvedAt         DateTime?              @db.Timestamptz(6)
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Grade              Grade?                 @relation("GradeToGrade", fields: [tenantId, parentGradeId], references: [tenantId, id])
  other_Grade        Grade[]                @relation("GradeToGrade")
  JobProfile         JobProfile[]
  Position           Position[]

  @@unique([tenantId, gradeCode])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, gradeLevel])
  @@index([tenantId, gradeName])
  @@index([tenantId, minSalary, maxSalary])
  @@index([tenantId, parentGradeId])
  @@index([tenantId, salaryBand])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model HolidayCalendar {
  id                  String                 @id @default(uuid(7)) @db.Uuid
  status              HRWorkforceChildStatus @default(ACTIVE)
  version             Int                    @default(1)
  createdAt           DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime               @db.Timestamptz(6)
  tenantId            String                 @db.Uuid
  deletedAt           DateTime?              @db.Timestamptz(6)
  deletedByActorId    String?                @db.Uuid
  createdByActorId    String?                @db.Uuid
  updatedByActorId    String?                @db.Uuid
  auditCorrelationId  String?                @db.Uuid
  dataClassification  String                 @default("INTERNAL")
  retentionPolicy     RetentionPolicy?
  calendarName        String                 @db.VarChar(100)
  calendarDescription String?
  calendarYear        Int
  isDefault           Boolean                @default(false)
  Tenant              Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  PayCalendar         PayCalendar[]

  @@unique([tenantId, calendarName, calendarYear])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, calendarYear])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isDefault])
}

model IdentityProvider {
  id                         String                       @id @default(uuid(7)) @db.Uuid
  status                     String                       @default("ACTIVE")
  version                    Int                          @default(1)
  createdAt                  DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                     @db.Timestamptz(6)
  deletedAt                  DateTime?                    @db.Timestamptz(6)
  deletedByActorId           String?                      @db.Uuid
  createdByActorId           String?                      @db.Uuid
  updatedByActorId           String?                      @db.Uuid
  auditCorrelationId         String?                      @db.Uuid
  dataClassification         String                       @default("INTERNAL")
  retentionPolicy            RetentionPolicy?
  name                       String                       @unique @db.VarChar(100)
  displayName                String                       @db.VarChar(255)
  description                String?
  providerType               String                       @db.VarChar(50)
  protocol                   String                       @db.VarChar(20)
  protocolVersion            String?                      @db.VarChar(20)
  configurationSchema        Json?
  defaultConfiguration       Json?
  supportsSSO                Boolean                      @default(true)
  supportsProvisioning       Boolean                      @default(false)
  supportsGroups             Boolean                      @default(false)
  supportsJIT                Boolean                      @default(false)
  requiresEncryption         Boolean                      @default(true)
  supportsMFA                Boolean                      @default(false)
  complianceLevel            ComplianceLevel              @default(STANDARD)
  logoUrl                    String?                      @db.VarChar(500)
  documentationUrl           String?                      @db.VarChar(500)
  supportUrl                 String?                      @db.VarChar(500)
  vendorName                 String?                      @db.VarChar(100)
  vendorWebsite              String?                      @db.VarChar(255)
  isActive                   Boolean                      @default(true)
  isDeprecated               Boolean                      @default(false)
  deprecationDate            DateTime?                    @db.Timestamptz(6)
  endOfLifeDate              DateTime?                    @db.Timestamptz(6)
  metadata                   Json?
  tags                       String[]                     @db.VarChar(50)
  IdentityProviderConnection IdentityProviderConnection[]

  @@index([auditCorrelationId])
  @@index([complianceLevel])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([isActive])
  @@index([isDeprecated])
  @@index([protocol])
  @@index([providerType])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model IdentityProviderConnection {
  id                   String           @id @default(uuid(7)) @db.Uuid
  status               String           @default("ACTIVE")
  version              Int              @default(1)
  createdAt            DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime         @db.Timestamptz(6)
  tenantId             String           @db.Uuid
  deletedAt            DateTime?        @db.Timestamptz(6)
  deletedByActorId     String?          @db.Uuid
  createdByActorId     String?          @db.Uuid
  updatedByActorId     String?          @db.Uuid
  auditCorrelationId   String?          @db.Uuid
  dataClassification   String           @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  identityProviderId   String           @db.Uuid
  name                 String           @db.VarChar(100)
  displayName          String           @db.VarChar(255)
  description          String?
  configuration        Json
  clientId             String?          @db.VarChar(255)
  clientSecretHash     String?          @db.VarChar(500)
  entityId             String?          @db.VarChar(255)
  ssoUrl               String?          @db.VarChar(500)
  sloUrl               String?          @db.VarChar(500)
  certificate          String?
  discoveryUrl         String?          @db.VarChar(500)
  authorizationUrl     String?          @db.VarChar(500)
  tokenUrl             String?          @db.VarChar(500)
  userInfoUrl          String?          @db.VarChar(500)
  userMapping          Json?
  groupMapping         Json?
  enableProvisioning   Boolean          @default(false)
  enableJIT            Boolean          @default(false)
  isActive             Boolean          @default(true)
  isDefault            Boolean          @default(false)
  allowedDomains       String[]         @db.VarChar(100)
  blockedDomains       String[]         @db.VarChar(100)
  lastTestedAt         DateTime?        @db.Timestamptz(6)
  testStatus           String?          @default("PENDING") @db.VarChar(20)
  testError            String?
  lastUsedAt           DateTime?        @db.Timestamptz(6)
  totalLogins          Int              @default(0)
  activeUsers          Int              @default(0)
  configuredByMemberId String           @db.Uuid
  metadata             Json?
  tags                 String[]         @db.VarChar(50)
  IdentityProvider     IdentityProvider @relation(fields: [identityProviderId], references: [id])
  Member               Member           @relation(fields: [tenantId, configuredByMemberId], references: [tenantId, id])
  Tenant               Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, identityProviderId])
  @@unique([tenantId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, configuredByMemberId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, identityProviderId])
  @@index([tenantId, isActive])
  @@index([tenantId, isActive, isDefault])
  @@index([tenantId, isDefault])
  @@index([tenantId, lastUsedAt])
  @@index([tenantId, status])
  @@index([tenantId, testStatus])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InAppAnnouncement {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Inspection {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InspectionStatus     @default(SCHEDULED)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  inspectionType     String
  scheduledDate      DateTime?            @db.Date
  actualDate         DateTime?            @db.Date
  inspectorId        String?              @db.Uuid
  notes              String?
  passed             Boolean?
  projectId          String               @db.Uuid
  Project            Project              @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  InspectionApproval InspectionApproval[]
  InspectionItem     InspectionItem[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, scheduledDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InspectionApproval {
  id                 String                     @id @default(uuid(7)) @db.Uuid
  version            Int                        @default(1)
  createdAt          DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                   @db.Timestamptz(6)
  tenantId           String                     @db.Uuid
  deletedAt          DateTime?                  @db.Timestamptz(6)
  deletedByActorId   String?                    @db.Uuid
  createdByActorId   String?                    @db.Uuid
  updatedByActorId   String?                    @db.Uuid
  auditCorrelationId String?                    @db.Uuid
  dataClassification String                     @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  decision           InspectionApprovalDecision @default(PENDING)
  approverId         String?                    @db.Uuid
  requestedAt        DateTime?                  @db.Timestamptz(6)
  decidedAt          DateTime?                  @db.Timestamptz(6)
  comments           String?
  inspectionId       String                     @db.Uuid
  Inspection         Inspection                 @relation(fields: [tenantId, inspectionId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approverId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, decidedAt])
  @@index([tenantId, decision])
  @@index([tenantId, deletedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InspectionItem {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  itemNumber         String
  description        String
  requirement        String
  passed             Boolean?
  comments           String?
  deficiency         String?
  inspectionId       String             @db.Uuid
  Inspection         Inspection         @relation(fields: [tenantId, inspectionId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, inspectionId, itemNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, inspectionId])
  @@index([tenantId, passed])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model IntegrationConnection {
  id                     String                      @id @default(uuid(7)) @db.Uuid
  status                 IntegrationConnectionStatus @default(INACTIVE)
  version                Int                         @default(1)
  createdAt              DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                    @db.Timestamptz(6)
  tenantId               String                      @db.Uuid
  deletedAt              DateTime?                   @db.Timestamptz(6)
  deletedByActorId       String?                     @db.Uuid
  createdByActorId       String?                     @db.Uuid
  updatedByActorId       String?                     @db.Uuid
  globalId               String                      @unique @db.Uuid
  auditCorrelationId     String?                     @db.Uuid
  dataClassification     String                      @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy        RetentionPolicy?
  integrationConnectorId String                      @db.Uuid
  connectionName         String                      @db.VarChar(255)
  description            String?
  externalConnectionId   String?                     @db.VarChar(255)
  connectionStatus       IntegrationConnectionStatus @default(INACTIVE)
  healthStatus           ConnectionHealthStatus      @default(UNKNOWN)
  lastSuccessfulConnect  DateTime?                   @db.Timestamptz(6)
  lastFailedConnect      DateTime?                   @db.Timestamptz(6)
  consecutiveFailures    Int                         @default(0)
  primaryTokenType       TokenType?
  tokenExpiresAt         DateTime?                   @db.Timestamptz(6)
  refreshTokenExpiresAt  DateTime?                   @db.Timestamptz(6)
  lastTokenRefresh       DateTime?                   @db.Timestamptz(6)
  authorizationScopes    String?
  userAgent              String?                     @db.VarChar(255)
  apiEndpoint            String?                     @db.VarChar(500)
  apiVersion             String?                     @db.VarChar(50)
  connectionParameters   String?
  externalUserId         String?                     @db.VarChar(255)
  externalUserEmail      String?                     @db.VarChar(255)
  externalAccountName    String?                     @db.VarChar(255)
  externalCompanyId      String?                     @db.VarChar(255)
  averageResponseTime    Int?
  totalRequests          BigInt                      @default(0)
  successfulRequests     BigInt                      @default(0)
  failedRequests         BigInt                      @default(0)
  lastRequestAt          DateTime?                   @db.Timestamptz(6)
  currentRateLimit       Int?
  remainingRequests      Int?
  rateLimitResetAt       DateTime?                   @db.Timestamptz(6)
  isThrottled            Boolean                     @default(false)
  maxPoolSize            Int?                        @default(10)
  currentPoolSize        Int?                        @default(0)
  activeConnections      Int?                        @default(0)
  idleTimeout            Int?                        @default(300)
  lastSyncAt             DateTime?                   @db.Timestamptz(6)
  nextSyncAt             DateTime?                   @db.Timestamptz(6)
  syncFrequency          String?                     @db.VarChar(50)
  totalSyncJobs          Int                         @default(0)
  lastError              String?
  lastErrorAt            DateTime?                   @db.Timestamptz(6)
  errorRecoveryAttempts  Int                         @default(0)
  maxRetryAttempts       Int?                        @default(3)
  webhookUrl             String?                     @db.VarChar(500)
  webhookSecret          String?                     @db.VarChar(255)
  webhookEventsEnabled   String?
  lastWebhookReceived    DateTime?                   @db.Timestamptz(6)
  Tenant                 Tenant                      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  IntegrationConnector   IntegrationConnector        @relation(fields: [tenantId, integrationConnectorId], references: [tenantId, id], onDelete: Cascade)
  IntegrationMapping     IntegrationMapping[]
  IntegrationSecret      IntegrationSecret[]
  SyncJob                SyncJob[]

  @@unique([tenantId, id])
  @@unique([tenantId, integrationConnectorId, connectionName])
  @@index([createdAt], type: Brin)
  @@index([externalConnectionId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, connectionStatus])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, healthStatus])
  @@index([tenantId, integrationConnectorId])
  @@index([tenantId, lastSuccessfulConnect])
  @@index([tenantId, lastSyncAt])
  @@index([tenantId, nextSyncAt])
  @@index([tenantId, status])
  @@index([tenantId, tokenExpiresAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model IntegrationConnector {
  id                    String                     @id @default(uuid(7)) @db.Uuid
  status                IntegrationConnectorStatus @default(ENABLED)
  version               Int                        @default(1)
  createdAt             DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                   @db.Timestamptz(6)
  tenantId              String                     @db.Uuid
  deletedAt             DateTime?                  @db.Timestamptz(6)
  deletedByActorId      String?                    @db.Uuid
  createdByActorId      String?                    @db.Uuid
  updatedByActorId      String?                    @db.Uuid
  globalId              String                     @unique @db.Uuid
  auditCorrelationId    String?                    @db.Uuid
  dataClassification    String                     @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy       RetentionPolicy?
  integrationProviderId String                     @db.Uuid
  connectorName         String                     @db.VarChar(255)
  description           String?
  environment           IntegrationEnvironment     @default(PRODUCTION)
  syncDirection         DataSyncDirection          @default(BIDIRECTIONAL)
  isTestMode            Boolean                    @default(false)
  configurationData     String?
  enabledCapabilities   String?
  allowedScopes         String?
  restrictedOperations  String?
  primaryRegion         String?                    @db.VarChar(50)
  allowedRegions        String?
  dataResidency         String?                    @db.VarChar(100)
  customRateLimits      String?
  priorityLevel         String?                    @db.VarChar(20)
  maxConcurrentJobs     Int?                       @default(5)
  approvedById          String?                    @db.Uuid
  approvedAt            DateTime?                  @db.Timestamptz(6)
  approvalNotes         String?
  nextReviewDate        DateTime?                  @db.Date
  enableMonitoring      Boolean                    @default(true)
  alertOnFailure        Boolean                    @default(true)
  alertThreshold        Int?                       @default(3)
  notificationEmails    String?
  businessOwnerEmail    String?                    @db.VarChar(255)
  technicalOwnerEmail   String?                    @db.VarChar(255)
  businessJustification String?
  complianceNotes       String?
  lastHealthCheck       DateTime?                  @db.Timestamptz(6)
  nextMaintenanceWindow DateTime?                  @db.Timestamptz(6)
  scheduledDeletion     DateTime?                  @db.Timestamptz(6)
  migrationPlan         String?
  IntegrationConnection IntegrationConnection[]
  IntegrationProvider   IntegrationProvider        @relation(fields: [integrationProviderId], references: [id])
  Member                Member?                    @relation(fields: [tenantId, approvedById], references: [tenantId, id], onDelete: NoAction)
  Tenant                Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, integrationProviderId, connectorName])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedById])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, environment])
  @@index([tenantId, integrationProviderId])
  @@index([tenantId, nextReviewDate])
  @@index([tenantId, status])
  @@index([tenantId, syncDirection])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model IntegrationMapping {
  id                      String                @id @default(uuid(7)) @db.Uuid
  status                  MappingStatus         @default(ACTIVE)
  version                 Int                   @default(1)
  createdAt               DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime              @db.Timestamptz(6)
  tenantId                String                @db.Uuid
  deletedAt               DateTime?             @db.Timestamptz(6)
  deletedByActorId        String?               @db.Uuid
  createdByActorId        String?               @db.Uuid
  updatedByActorId        String?               @db.Uuid
  globalId                String                @unique @db.Uuid
  auditCorrelationId      String?               @db.Uuid
  dataClassification      String                @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy         RetentionPolicy?
  integrationConnectionId String                @db.Uuid
  mappingName             String                @db.VarChar(255)
  description             String?
  mappingType             MappingType
  mappingDirection        MappingDirection      @default(BIDIRECTIONAL)
  sourceEntity            String                @db.VarChar(100)
  sourceField             String                @db.VarChar(100)
  sourceDataType          DataType
  targetEntity            String                @db.VarChar(100)
  targetField             String                @db.VarChar(100)
  targetDataType          DataType
  transformationRules     String?
  defaultValue            String?
  nullHandling            String?               @db.VarChar(50)
  emptyValueHandling      String?               @db.VarChar(50)
  validationRules         String?
  isRequired              Boolean               @default(false)
  minLength               Int?
  maxLength               Int?
  validationPattern       String?               @db.VarChar(500)
  customValidation        String?
  lookupTable             String?
  fallbackValue           String?
  caseSensitive           Boolean               @default(true)
  allowPartialMatch       Boolean               @default(false)
  conditionExpression     String?
  conditionalMappings     String?
  elseValue               String?
  isCacheable             Boolean               @default(false)
  cacheExpiryMinutes      Int?                  @default(60)
  batchProcessing         Boolean               @default(false)
  batchSize               Int?                  @default(100)
  mappingVersion          String                @default("1.0") @db.VarChar(20)
  previousVersion         String?               @db.VarChar(20)
  versionNotes            String?
  isBreakingChange        Boolean               @default(false)
  errorHandlingStrategy   String?               @db.VarChar(50)
  maxErrors               Int?                  @default(10)
  errorLogLevel           String?               @db.VarChar(20)
  lastUsedAt              DateTime?             @db.Timestamptz(6)
  usageCount              Int                   @default(0)
  successCount            Int                   @default(0)
  errorCount              Int                   @default(0)
  averageProcessingTime   Int?
  dependsOnMappings       String?
  referencedByMappings    String?
  externalReferences      String?
  testCases               String?
  lastTestResult          String?               @db.VarChar(50)
  lastTestDate            DateTime?             @db.Timestamptz(6)
  testNotes               String?
  Tenant                  Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  IntegrationConnection   IntegrationConnection @relation(fields: [tenantId, integrationConnectionId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, integrationConnectionId, mappingName])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, integrationConnectionId])
  @@index([tenantId, lastUsedAt])
  @@index([tenantId, mappingDirection])
  @@index([tenantId, mappingType])
  @@index([tenantId, mappingVersion])
  @@index([tenantId, sourceEntity])
  @@index([tenantId, status])
  @@index([tenantId, targetEntity])
}

model IntegrationProvider {
  id                     String                    @id @default(uuid(7)) @db.Uuid
  status                 IntegrationProviderStatus @default(ACTIVE)
  version                Int                       @default(1)
  createdAt              DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                  @db.Timestamptz(6)
  deletedAt              DateTime?                 @db.Timestamptz(6)
  deletedByActorId       String?                   @db.Uuid
  createdByActorId       String?                   @db.Uuid
  updatedByActorId       String?                   @db.Uuid
  auditCorrelationId     String?                   @db.Uuid
  dataClassification     String                    @default("INTERNAL") @db.VarChar(50)
  retentionPolicy        RetentionPolicy?
  providerName           String                    @db.VarChar(100)
  providerCode           String                    @db.VarChar(50)
  description            String?
  logoUrl                String?                   @db.VarChar(500)
  websiteUrl             String?                   @db.VarChar(500)
  documentationUrl       String?                   @db.VarChar(500)
  supportUrl             String?                   @db.VarChar(500)
  category               IntegrationCategory
  authenticationType     AuthenticationType
  capabilities           String?
  apiVersion             String?                   @db.VarChar(20)
  baseApiUrl             String                    @db.VarChar(500)
  supportedRegions       String?
  supportedCountries     String?
  requiresApproval       Boolean                   @default(false)
  isEnterprise           Boolean                   @default(false)
  rateLimitPerMinute     Int?
  rateLimitPerHour       Int?
  rateLimitPerDay        Int?
  maxConnections         Int?
  dataRetentionDays      Int?
  requiresEncryption     Boolean                   @default(true)
  supportsSSO            Boolean                   @default(false)
  complianceStandards    String?
  securityCertifications String?
  contactEmail           String?                   @db.VarChar(255)
  contactPhone           String?                   @db.VarChar(50)
  timezone               String?                   @db.VarChar(50)
  maintenanceWindow      String?
  currentVersion         String?                   @db.VarChar(20)
  latestVersion          String?                   @db.VarChar(20)
  deprecatedVersions     String?
  migrationGuideUrl      String?                   @db.VarChar(500)
  totalConnections       Int                       @default(0)
  activeConnections      Int                       @default(0)
  averageResponseTime    Int?
  uptimePercentage       Decimal?                  @db.Decimal(5, 2)
  lastStatusCheck        DateTime?                 @db.Timestamptz(6)
  IntegrationConnector   IntegrationConnector[]

  @@index([auditCorrelationId])
  @@index([authenticationType])
  @@index([category])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([isEnterprise])
  @@index([providerCode])
  @@index([providerName])
  @@index([requiresApproval])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model IntegrationSecret {
  id                       String                @id @default(uuid(7)) @db.Uuid
  status                   SecretStatus          @default(ACTIVE)
  version                  Int                   @default(1)
  createdAt                DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime              @db.Timestamptz(6)
  tenantId                 String                @db.Uuid
  deletedAt                DateTime?             @db.Timestamptz(6)
  deletedByActorId         String?               @db.Uuid
  createdByActorId         String?               @db.Uuid
  updatedByActorId         String?               @db.Uuid
  globalId                 String                @unique @db.Uuid
  auditCorrelationId       String?               @db.Uuid
  dataClassification       String                @default("RESTRICTED") @db.VarChar(50)
  retentionPolicy          RetentionPolicy?
  integrationConnectionId  String                @db.Uuid
  secretType               SecretType
  secretName               String                @db.VarChar(255)
  description              String?
  encryptedValue           String
  encryptionMethod         EncryptionMethod      @default(AES_256_GCM)
  encryptionKeyId          String?               @db.VarChar(255)
  saltValue                String?               @db.VarChar(255)
  secretStatus             SecretStatus          @default(ACTIVE)
  issuedAt                 DateTime?             @db.Timestamptz(6)
  expiresAt                DateTime?             @db.Timestamptz(6)
  lastRotated              DateTime?             @db.Timestamptz(6)
  nextRotationDue          DateTime?             @db.Timestamptz(6)
  allowedEnvironments      String?
  allowedIPs               String?
  maxUsageCount            Int?
  currentUsageCount        Int                   @default(0)
  lastUsedAt               DateTime?             @db.Timestamptz(6)
  rotationEnabled          Boolean               @default(true)
  rotationIntervalDays     Int?                  @default(90)
  gracePeriodDays          Int?                  @default(7)
  backupSecretId           String?               @db.Uuid
  externalSecretId         String?               @db.VarChar(255)
  externalSecretVersion    String?               @db.VarChar(50)
  providerMetadata         String?
  accessLogEnabled         Boolean               @default(true)
  complianceClassification String?               @db.VarChar(50)
  retentionDays            Int?                  @default(2555)
  piiContained             Boolean               @default(false)
  lastAccessedAt           DateTime?             @db.Timestamptz(6)
  accessCount              Int                   @default(0)
  failedAccessAttempts     Int                   @default(0)
  lastFailedAccessAt       DateTime?             @db.Timestamptz(6)
  hasBackup                Boolean               @default(false)
  backupLocation           String?               @db.VarChar(255)
  recoveryKeyId            String?               @db.VarChar(255)
  emergencyAccessEnabled   Boolean               @default(false)
  IntegrationSecret        IntegrationSecret?    @relation("IntegrationSecretToIntegrationSecret", fields: [tenantId, backupSecretId], references: [tenantId, id], onDelete: NoAction)
  other_IntegrationSecret  IntegrationSecret[]   @relation("IntegrationSecretToIntegrationSecret")
  Tenant                   Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  IntegrationConnection    IntegrationConnection @relation(fields: [tenantId, integrationConnectionId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, integrationConnectionId, secretName])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, complianceClassification])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expiresAt])
  @@index([tenantId, integrationConnectionId])
  @@index([tenantId, lastUsedAt])
  @@index([tenantId, nextRotationDue])
  @@index([tenantId, secretStatus])
  @@index([tenantId, secretType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryAdjustment {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  adjustmentNumber   String               @db.VarChar(50)
  adjustmentDate     DateTime             @db.Timestamptz(6)
  adjustmentType     String               @db.VarChar(50)
  reasonCode         String               @db.VarChar(50)
  description        String?              @db.VarChar(500)
  quantityBefore     Decimal              @db.Decimal(12, 4)
  quantityAfter      Decimal              @db.Decimal(12, 4)
  adjustmentQuantity Decimal              @db.Decimal(12, 4)
  unitCost           Decimal?             @db.Decimal(12, 4)
  totalCostImpact    Decimal?             @db.Decimal(12, 4)
  inventoryItemId    String               @db.Uuid
  locationId         String?              @db.Uuid
  approvedBy         String?              @db.Uuid
  approvedAt         DateTime?            @db.Timestamptz(6)
  approvalNotes      String?
  InventoryItem      InventoryItem        @relation(fields: [tenantId, inventoryItemId], references: [tenantId, id])
  InventoryLocation  InventoryLocation?   @relation(fields: [tenantId, locationId], references: [tenantId, id])

  @@unique([tenantId, adjustmentNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, adjustmentDate])
  @@index([tenantId, adjustmentType])
  @@index([tenantId, approvedBy])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, inventoryItemId])
  @@index([tenantId, locationId])
  @@index([tenantId, reasonCode])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryAttachment {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  fileName           String               @db.VarChar(255)
  fileType           String               @db.VarChar(100)
  fileSize           Int
  fileUrl            String
  description        String?              @db.VarChar(500)
  attachmentType     String               @default("DOCUMENT") @db.VarChar(50)
  inventoryItemId    String               @db.Uuid
  InventoryItem      InventoryItem        @relation(fields: [tenantId, inventoryItemId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, attachmentType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, inventoryItemId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryBin {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  binCode            String               @db.VarChar(50)
  binName            String?              @db.VarChar(255)
  binType            String               @default("STANDARD") @db.VarChar(50)
  aisle              String?              @db.VarChar(20)
  rack               String?              @db.VarChar(20)
  shelf              String?              @db.VarChar(20)
  position           String?              @db.VarChar(20)
  maxWeight          Decimal?             @db.Decimal(10, 4)
  maxVolume          Decimal?             @db.Decimal(10, 4)
  currentWeight      Decimal              @default(0) @db.Decimal(10, 4)
  currentVolume      Decimal              @default(0) @db.Decimal(10, 4)
  isActive           Boolean              @default(true)
  allowMixedItems    Boolean              @default(true)
  requiresCount      Boolean              @default(false)
  locationId         String               @db.Uuid
  InventoryLocation  InventoryLocation    @relation(fields: [tenantId, locationId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, locationId, binCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, binType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, locationId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryCount {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  countNumber        String               @db.VarChar(50)
  countType          String               @db.VarChar(50)
  countDate          DateTime             @db.Timestamptz(6)
  scheduledDate      DateTime?            @db.Timestamptz(6)
  completedDate      DateTime?            @db.Timestamptz(6)
  countStatus        String               @default("PLANNED") @db.VarChar(20)
  totalItems         Int                  @default(0)
  countedItems       Int                  @default(0)
  varianceItems      Int                  @default(0)
  locationId         String?              @db.Uuid
  assignedTo         String?              @db.Uuid
  supervisorId       String?              @db.Uuid
  instructions       String?
  notes              String?
  InventoryLocation  InventoryLocation?   @relation(fields: [tenantId, locationId], references: [tenantId, id])
  InventoryCountLine InventoryCountLine[]

  @@unique([tenantId, countNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assignedTo])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, countDate])
  @@index([tenantId, countStatus])
  @@index([tenantId, countType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, locationId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryCountLine {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  lineNumber         Int                  @default(1)
  countedDate        DateTime?            @db.Timestamptz(6)
  countedBy          String?              @db.Uuid
  systemQuantity     Decimal              @db.Decimal(12, 4)
  countedQuantity    Decimal?             @db.Decimal(12, 4)
  varianceQuantity   Decimal?             @db.Decimal(12, 4)
  variancePercent    Decimal?             @db.Decimal(5, 2)
  inventoryItemId    String               @db.Uuid
  binLocation        String?              @db.VarChar(100)
  lotNumber          String?              @db.VarChar(100)
  serialNumber       String?              @db.VarChar(100)
  lineStatus         String               @default("PENDING") @db.VarChar(20)
  notes              String?
  requiresRecount    Boolean              @default(false)
  inventoryCountId   String               @db.Uuid
  InventoryCount     InventoryCount       @relation(fields: [tenantId, inventoryCountId], references: [tenantId, id], onDelete: Cascade)
  InventoryItem      InventoryItem        @relation(fields: [tenantId, inventoryItemId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, inventoryCountId, lineNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, countedBy])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, inventoryCountId])
  @@index([tenantId, inventoryItemId])
  @@index([tenantId, lineStatus])
  @@index([tenantId, requiresRecount])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryItem {
  id                   String                 @id @default(uuid(7)) @db.Uuid
  status               InventoryItemStatus    @default(ACTIVE)
  version              Int                    @default(1)
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @db.Timestamptz(6)
  tenantId             String                 @db.Uuid
  deletedAt            DateTime?              @db.Timestamptz(6)
  deletedByActorId     String?                @db.Uuid
  createdByActorId     String?                @db.Uuid
  updatedByActorId     String?                @db.Uuid
  auditCorrelationId   String?                @db.Uuid
  dataClassification   String                 @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  itemCode             String                 @db.VarChar(50)
  itemName             String                 @db.VarChar(255)
  category             String?                @db.VarChar(100)
  subcategory          String?                @db.VarChar(100)
  unitOfMeasure        String                 @db.VarChar(20)
  currentStock         Decimal                @default(0) @db.Decimal(12, 4)
  minimumStock         Decimal?               @db.Decimal(12, 4)
  maximumStock         Decimal?               @db.Decimal(12, 4)
  reorderPoint         Decimal?               @db.Decimal(12, 4)
  reorderQuantity      Decimal?               @db.Decimal(12, 4)
  lastStockUpdate      DateTime?              @db.Timestamptz(6)
  unitCost             Decimal?               @db.Decimal(12, 4)
  averageCost          Decimal?               @db.Decimal(12, 4)
  lastCost             Decimal?               @db.Decimal(12, 4)
  weight               Decimal?               @db.Decimal(10, 4)
  dimensions           String?                @db.VarChar(100)
  serialTracked        Boolean                @default(false)
  lotTracked           Boolean                @default(false)
  taxable              Boolean                @default(true)
  purchasable          Boolean                @default(true)
  sellable             Boolean                @default(true)
  manufacturable       Boolean                @default(false)
  hazardous            Boolean                @default(false)
  controlled           Boolean                @default(false)
  regulatoryCode       String?                @db.VarChar(50)
  msdsRequired         Boolean                @default(false)
  InventoryAdjustment  InventoryAdjustment[]
  InventoryAttachment  InventoryAttachment[]
  InventoryCountLine   InventoryCountLine[]
  InventoryReservation InventoryReservation[]
  InventoryTransaction InventoryTransaction[]

  @@unique([tenantId, id])
  @@unique([tenantId, itemCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, category])
  @@index([tenantId, category, subcategory])
  @@index([tenantId, controlled])
  @@index([tenantId, currentStock])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, hazardous])
  @@index([tenantId, lastStockUpdate])
  @@index([tenantId, minimumStock])
  @@index([tenantId, status])
  @@index([tenantId, unitOfMeasure])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryLocation {
  id                   String                 @id @default(uuid(7)) @db.Uuid
  status               InventoryChildStatus   @default(ACTIVE)
  version              Int                    @default(1)
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @db.Timestamptz(6)
  tenantId             String                 @db.Uuid
  deletedAt            DateTime?              @db.Timestamptz(6)
  deletedByActorId     String?                @db.Uuid
  createdByActorId     String?                @db.Uuid
  updatedByActorId     String?                @db.Uuid
  auditCorrelationId   String?                @db.Uuid
  dataClassification   String                 @default("INTERNAL")
  retentionPolicy      RetentionPolicy?
  locationCode         String                 @unique @db.Citext
  locationName         String                 @db.VarChar(255)
  locationType         String                 @db.VarChar(50)
  description          String?                @db.VarChar(500)
  address1             String?                @db.VarChar(255)
  address2             String?                @db.VarChar(255)
  city                 String?                @db.VarChar(100)
  state                String?                @db.VarChar(50)
  postalCode           String?                @db.VarChar(20)
  country              String?                @db.VarChar(50)
  isActive             Boolean                @default(true)
  allowReceiving       Boolean                @default(true)
  allowShipping        Boolean                @default(true)
  requiresBin          Boolean                @default(false)
  InventoryAdjustment  InventoryAdjustment[]
  InventoryBin         InventoryBin[]
  InventoryCount       InventoryCount[]
  InventoryTransaction InventoryTransaction[]

  @@unique([tenantId, id])
  @@unique([tenantId, locationCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, locationType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryReservation {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  reservationNumber  String               @db.VarChar(50)
  reservationType    String               @db.VarChar(50)
  reservationDate    DateTime             @db.Timestamptz(6)
  requiredDate       DateTime?            @db.Timestamptz(6)
  expirationDate     DateTime?            @db.Timestamptz(6)
  reservedQuantity   Decimal              @db.Decimal(12, 4)
  allocatedQuantity  Decimal              @default(0) @db.Decimal(12, 4)
  fulfilledQuantity  Decimal              @default(0) @db.Decimal(12, 4)
  inventoryItemId    String               @db.Uuid
  referenceType      String               @db.VarChar(50)
  referenceId        String               @db.Uuid
  referenceLineId    String?              @db.Uuid
  priority           String               @default("NORMAL") @db.VarChar(20)
  notes              String?
  InventoryItem      InventoryItem        @relation(fields: [tenantId, inventoryItemId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, reservationNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, inventoryItemId])
  @@index([tenantId, priority])
  @@index([tenantId, referenceType, referenceId])
  @@index([tenantId, requiredDate])
  @@index([tenantId, reservationDate])
  @@index([tenantId, reservationType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryTransaction {
  id                        String                     @id @default(uuid(7)) @db.Uuid
  status                    InventoryTransactionStatus @default(PENDING)
  version                   Int                        @default(1)
  createdAt                 DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                   @db.Timestamptz(6)
  tenantId                  String                     @db.Uuid
  deletedAt                 DateTime?                  @db.Timestamptz(6)
  deletedByActorId          String?                    @db.Uuid
  createdByActorId          String?                    @db.Uuid
  updatedByActorId          String?                    @db.Uuid
  auditCorrelationId        String?                    @db.Uuid
  dataClassification        String                     @default("CONFIDENTIAL")
  retentionPolicy           RetentionPolicy?
  transactionType           InventoryTransactionType
  transactionNumber         String                     @db.VarChar(50)
  transactionDate           DateTime                   @db.Timestamptz(6)
  quantity                  Decimal                    @db.Decimal(12, 4)
  unitCost                  Decimal?                   @db.Decimal(12, 4)
  totalCost                 Decimal?                   @db.Decimal(12, 4)
  inventoryItemId           String                     @db.Uuid
  locationId                String?                    @db.Uuid
  referenceType             String?                    @db.VarChar(50)
  referenceId               String?                    @db.Uuid
  reasonCode                String?                    @db.VarChar(50)
  notes                     String?
  lotNumber                 String?                    @db.VarChar(100)
  serialNumber              String?                    @db.VarChar(100)
  expirationDate            DateTime?                  @db.Date
  InventoryItem             InventoryItem              @relation(fields: [tenantId, inventoryItemId], references: [tenantId, id])
  InventoryLocation         InventoryLocation?         @relation(fields: [tenantId, locationId], references: [tenantId, id])
  InventoryTransactionChain InventoryTransactionChain?

  @@unique([tenantId, id])
  @@unique([tenantId, transactionNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, inventoryItemId])
  @@index([tenantId, locationId])
  @@index([tenantId, lotNumber])
  @@index([tenantId, referenceType, referenceId])
  @@index([tenantId, serialNumber])
  @@index([tenantId, status])
  @@index([tenantId, transactionDate])
  @@index([tenantId, transactionType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InventoryTransactionChain {
  id                   String               @id @default(uuid(7)) @db.Uuid
  version              Int                  @default(1)
  createdAt            DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime             @db.Timestamptz(6)
  tenantId             String               @db.Uuid
  deletedAt            DateTime?            @db.Timestamptz(6)
  deletedByActorId     String?              @db.Uuid
  createdByActorId     String?              @db.Uuid
  updatedByActorId     String?              @db.Uuid
  auditCorrelationId   String?              @db.Uuid
  dataClassification   String               @default("HIGHLY_SENSITIVE")
  retentionPolicy      RetentionPolicy?
  transactionId        String               @db.Uuid
  chainSequence        Int
  blockNumber          Int
  previousHash         String?              @db.VarChar(64)
  transactionHash      String               @db.VarChar(64)
  merkleRoot           String?              @db.VarChar(64)
  hashAlgorithm        String               @default("SHA256") @db.VarChar(20)
  signatureHash        String?              @db.VarChar(128)
  witnessHash          String?              @db.VarChar(64)
  verificationStatus   String               @default("PENDING") @db.VarChar(20)
  chainVersion         String               @default("1.0") @db.VarChar(10)
  consensusProof       String?
  timestampProof       DateTime             @default(now()) @db.Timestamptz(6)
  nonce                String?              @db.VarChar(32)
  difficulty           Int                  @default(1)
  isValid              Boolean              @default(true)
  validatedAt          DateTime?            @db.Timestamptz(6)
  validatedBy          String?              @db.Uuid
  invalidationReason   String?
  batchId              String?              @db.Uuid
  processingTime       Int?
  gasUsed              Int?
  InventoryTransaction InventoryTransaction @relation(fields: [tenantId, transactionId], references: [tenantId, id])

  @@unique([tenantId, chainSequence])
  @@unique([tenantId, id])
  @@unique([tenantId, transactionHash])
  @@unique([tenantId, transactionId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, batchId])
  @@index([tenantId, blockNumber])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isValid])
  @@index([tenantId, timestampProof])
  @@index([tenantId, transactionId])
  @@index([tenantId, verificationStatus])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Invoice {
  id                                                    String           @id @default(uuid(7)) @db.Uuid
  status                                                InvoiceStatus    @default(DRAFT)
  version                                               Int              @default(1)
  createdAt                                             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                             DateTime         @db.Timestamptz(6)
  tenantId                                              String           @db.Uuid
  deletedAt                                             DateTime?        @db.Timestamptz(6)
  deletedByActorId                                      String?          @db.Uuid
  createdByActorId                                      String?          @db.Uuid
  updatedByActorId                                      String?          @db.Uuid
  globalId                                              String           @unique @db.Uuid
  auditCorrelationId                                    String?          @db.Uuid
  dataClassification                                    String           @default("CONFIDENTIAL")
  retentionPolicy                                       RetentionPolicy?
  invoiceNumber                                         String           @db.Citext
  documentGroupId                                       String?          @db.Uuid
  subtotal                                              Decimal          @db.Decimal(12, 2)
  taxAmount                                             Decimal          @default(0) @db.Decimal(12, 2)
  discountAmount                                        Decimal          @default(0) @db.Decimal(12, 2)
  totalAmount                                           Decimal          @db.Decimal(12, 2)
  balanceAmount                                         Decimal          @db.Decimal(12, 2)
  currency                                              String           @default("USD") @db.VarChar(3)
  // Shadow enum for currency to enable gradual typed rollout
  currencyEnum                                          CurrencyCode?
  exchangeRate                                          Decimal?         @db.Decimal(10, 6)
  invoiceDate                                           DateTime         @db.Date
  dueDate                                               DateTime         @db.Date
  servicePeriodStart                                    DateTime?        @db.Date
  servicePeriodEnd                                      DateTime?        @db.Date
  paymentTermId                                         String?          @db.Uuid
  netDays                                               Int              @default(30)
  discountPercent                                       Decimal?         @db.Decimal(5, 2)
  discountDays                                          Int?
  sentDate                                              DateTime?        @db.Timestamptz(6)
  paidDate                                              DateTime?        @db.Timestamptz(6)
  lastPaymentDate                                       DateTime?        @db.Timestamptz(6)
  overdueDate                                           DateTime?        @db.Date
  dunningLevel                                          DunningLevel?    @default(FIRST_NOTICE)
  lastDunningDate                                       DateTime?        @db.Date
  projectId                                             String?          @db.Uuid
  estimateId                                            String?          @db.Uuid
  accountId                                             String           @db.Uuid
  contactId                                             String?          @db.Uuid
  billToName                                            String?          @db.VarChar(255)
  billToAddress1                                        String?          @db.VarChar(255)
  billToAddress2                                        String?          @db.VarChar(255)
  billToCity                                            String?          @db.VarChar(100)
  billToState                                           String?          @db.VarChar(50)
  billToPostalCode                                      String?          @db.VarChar(20)
  billToCountry                                         String?          @db.VarChar(50)
  description                                           String?
  internalNotes                                         String?
  customerNotes                                         String?
  poNumber                                              String?          @db.VarChar(100)
  requiresApproval                                      Boolean          @default(false)
  approvedAt                                            DateTime?        @db.Timestamptz(6)
  approvedByMemberId                                    String?          @db.Uuid
  metadata                                              Json?
  tags                                                  String[]         @db.VarChar(50)
  ChangeOrder                                           ChangeOrder[]
  CreditMemo                                            CreditMemo[]
  DunningNotice                                         DunningNotice[]
  Estimate_Estimate_tenantId_approvedInvoiceIdToInvoice Estimate?        @relation("Estimate_tenantId_approvedInvoiceIdToInvoice")
  PaymentTerm                                           PaymentTerm?     @relation(fields: [paymentTermId], references: [id])
  Account                                               Account          @relation(fields: [tenantId, accountId], references: [tenantId, id])
  Member                                                Member?          @relation(fields: [tenantId, approvedByMemberId], references: [tenantId, id])
  Contact                                               Contact?         @relation(fields: [tenantId, contactId], references: [tenantId, id])
  DocumentGroup                                         DocumentGroup?   @relation(fields: [tenantId, documentGroupId], references: [tenantId, id])
  Estimate_Invoice_tenantId_estimateIdToEstimate        Estimate?        @relation("Invoice_tenantId_estimateIdToEstimate", fields: [tenantId, estimateId], references: [tenantId, id])
  Tenant                                                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project                                               Project?         @relation(fields: [tenantId, projectId], references: [tenantId, id])

  InvoiceAttachment  InvoiceAttachment[]
  InvoiceLineItem    InvoiceLineItem[]
  InvoicePayment     InvoicePayment[]
  InvoiceTax         InvoiceTax[]
  PaymentApplication PaymentApplication[]
  PaymentSchedule    PaymentSchedule[]

  // Actor audit relationships
  CreatedByActor Actor? @relation("InvoiceCreatedByActor", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("InvoiceUpdatedByActor", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor? @relation("InvoiceDeletedByActor", fields: [deletedByActorId], references: [id])

  @@unique([tenantId, estimateId])
  @@unique([tenantId, id])
  @@unique([tenantId, invoiceNumber])
  @@unique([tenantId, projectId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountId])
  @@index([tenantId, approvedByMemberId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, balanceAmount])
  @@index([tenantId, contactId])
  @@index([tenantId, currency])
  @@index([tenantId, currencyEnum])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, invoiceDate])
  @@index([tenantId, overdueDate])
  @@index([tenantId, status])
  @@index([tenantId, totalAmount])
  @@index([tenantId, deletedAt], map: "idx_invoice_tenant_deleted")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InvoiceAttachment {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             InvoiceChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  invoiceId          String             @db.Uuid
  attachmentSequence Int
  fileName           String             @db.VarChar(255)
  fileUrl            String             @db.VarChar(500)
  mimeType           String?            @db.VarChar(100)
  fileSize           Int?
  checksum           String?            @db.VarChar(64)
  documentType       String             @default("SUPPORTING") @db.VarChar(50)
  category           String?            @db.VarChar(100)
  description        String?
  isPublic           Boolean            @default(false)
  isRequired         Boolean            @default(false)
  uploadedById       String             @db.Uuid
  uploadedAt         DateTime           @default(now()) @db.Timestamptz(6)
  metadata           Json?
  Tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Invoice            Invoice            @relation(fields: [tenantId, invoiceId], references: [tenantId, id], onDelete: Cascade)
  Member             Member             @relation(fields: [tenantId, uploadedById], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, invoiceId, attachmentSequence])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, documentType])
  @@index([tenantId, invoiceId])
  @@index([tenantId, isPublic])
  @@index([tenantId, status])
  @@index([tenantId, uploadedById])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InvoiceLineItem {
  id                      String              @id @default(uuid(7)) @db.Uuid
  status                  InvoiceChildStatus  @default(ACTIVE)
  version                 Int                 @default(1)
  createdAt               DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime            @db.Timestamptz(6)
  tenantId                String              @db.Uuid
  deletedAt               DateTime?           @db.Timestamptz(6)
  deletedByActorId        String?             @db.Uuid
  createdByActorId        String?             @db.Uuid
  updatedByActorId        String?             @db.Uuid
  auditCorrelationId      String?             @db.Uuid
  dataClassification      String              @default("CONFIDENTIAL")
  retentionPolicy         RetentionPolicy?
  invoiceId               String              @db.Uuid
  lineNumber              Int
  itemType                InvoiceLineItemType @default(SERVICE)
  itemCode                String?             @db.VarChar(50)
  description             String
  detailedDescription     String?
  quantity                Decimal             @db.Decimal(10, 4)
  unitOfMeasure           String?             @db.VarChar(20)
  unitPrice               Decimal             @db.Decimal(12, 4)
  lineAmount              Decimal             @db.Decimal(12, 2)
  discountPercent         Decimal?            @db.Decimal(5, 2)
  discountAmount          Decimal             @default(0) @db.Decimal(12, 2)
  netAmount               Decimal             @db.Decimal(12, 2)
  taxable                 Boolean             @default(true)
  taxCode                 String?             @db.VarChar(20)
  taxPercent              Decimal?            @db.Decimal(5, 2)
  taxAmount               Decimal             @default(0) @db.Decimal(12, 2)
  sourceType              String?             @db.VarChar(50)
  sourceEstimateLineId    String?             @db.Uuid
  sourceProjectTaskId     String?             @db.Uuid
  sourceChangeOrderLineId String?             @db.Uuid
  costCode                String?             @db.VarChar(50)
  costCenter              String?             @db.VarChar(50)
  glAccountCode           String?             @db.VarChar(50)
  servicePeriodStart      DateTime?           @db.Date
  servicePeriodEnd        DateTime?           @db.Date
  notes                   String?
  customerNotes           String?
  metadata                Json?
  tags                    String[]            @db.VarChar(50)
  CreditMemoLine          CreditMemoLine[]
  Tenant                  Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Invoice                 Invoice             @relation(fields: [tenantId, invoiceId], references: [tenantId, id], onDelete: Cascade)
  ChangeOrderLine         ChangeOrderLine?    @relation(fields: [tenantId, sourceChangeOrderLineId], references: [tenantId, id])
  EstimateLineItem        EstimateLineItem?   @relation(fields: [tenantId, sourceEstimateLineId], references: [tenantId, id])
  ProjectTask             ProjectTask?        @relation(fields: [tenantId, sourceProjectTaskId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, invoiceId, lineNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, costCode])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, glAccountCode])
  @@index([tenantId, invoiceId])
  @@index([tenantId, itemCode])
  @@index([tenantId, itemType])
  @@index([tenantId, sourceType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InvoicePayment {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             InvoiceChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  appliedAmount      Decimal            @db.Decimal(12, 2)
  appliedAt          DateTime           @db.Timestamptz(6)
  reference          String?
  paymentId          String             @db.Uuid
  invoiceId          String             @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  Invoice            Invoice            @relation(fields: [tenantId, invoiceId], references: [tenantId, id], onDelete: Cascade)
  Payment            Payment            @relation(fields: [tenantId, paymentId], references: [tenantId, id], onDelete: Cascade)

  @@unique([paymentId, invoiceId])
  @@unique([tenantId, id])
  @@index([appliedAt], type: Brin)
  @@index([tenantId, appliedAmount])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, invoiceId])
  @@index([tenantId, paymentId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model InvoiceTax {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             InvoiceChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  invoiceId          String             @db.Uuid
  taxSequence        Int
  taxName            String             @db.VarChar(100)
  taxCode            String?            @db.VarChar(20)
  taxType            InvoiceTaxType     @default(SALES)
  taxableAmount      Decimal            @db.Decimal(12, 2)
  taxRate            Decimal            @db.Decimal(5, 4)
  taxAmount          Decimal            @db.Decimal(12, 2)
  jurisdiction       String?            @db.VarChar(100)
  jurisdictionLevel  String?            @db.VarChar(20)
  taxAccountCode     String?            @db.VarChar(50)
  reportingCategory  String?            @db.VarChar(50)
  metadata           Json?
  Tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Invoice            Invoice            @relation(fields: [tenantId, invoiceId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, invoiceId, taxSequence])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, invoiceId])
  @@index([tenantId, jurisdiction])
  @@index([tenantId, status])
  @@index([tenantId, taxCode])
  @@index([tenantId, taxType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model JobFamily {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  familyCode         String                 @unique @db.Citext
  familyName         String                 @db.VarChar(100)
  familyDescription  String?
  parentFamilyId     String?                @db.Uuid
  familyLevel        Int                    @default(1)
  isActive           Boolean                @default(true)
  careerPath         Json?
  skillCategories    Json?
  competencyModel    Json?
  effectiveDate      DateTime               @db.Date
  endDate            DateTime?              @db.Date
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  JobFamily          JobFamily?             @relation("JobFamilyToJobFamily", fields: [tenantId, parentFamilyId], references: [tenantId, id])
  other_JobFamily    JobFamily[]            @relation("JobFamilyToJobFamily")
  JobProfile         JobProfile[]

  @@unique([tenantId, familyCode])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, familyLevel])
  @@index([tenantId, familyName])
  @@index([tenantId, isActive])
  @@index([tenantId, parentFamilyId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model JobProfile {
  id                   String                 @id @default(uuid(7)) @db.Uuid
  status               JobProfileStatus       @default(ACTIVE)
  version              Int                    @default(1)
  createdAt            DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime               @db.Timestamptz(6)
  tenantId             String                 @db.Uuid
  deletedAt            DateTime?              @db.Timestamptz(6)
  deletedByActorId     String?                @db.Uuid
  createdByActorId     String?                @db.Uuid
  updatedByActorId     String?                @db.Uuid
  auditCorrelationId   String?                @db.Uuid
  dataClassification   String                 @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  jobCode              String                 @unique @db.Citext
  jobTitle             String                 @db.VarChar(100)
  jobSummary           String?
  jobDescription       String?
  jobFamilyId          String?                @db.Uuid
  jobLevel             JobLevel?
  education            String?                @db.VarChar(100)
  experience           String?                @db.VarChar(200)
  skills               Json?
  certifications       Json?
  flsaClassification   FLSAClassification?    @default(NON_EXEMPT)
  payGradeId           String?                @db.Uuid
  minSalary            Decimal?               @db.Decimal(12, 2)
  maxSalary            Decimal?               @db.Decimal(12, 2)
  targetSalary         Decimal?               @db.Decimal(12, 2)
  workLocation         WorkLocation?          @default(OFFICE)
  travelRequired       Int?                   @default(0)
  physicalDemands      String?
  workingConditions    String?
  effectiveDate        DateTime               @db.Date
  endDate              DateTime?              @db.Date
  approvedByActorId    String?                @db.Uuid
  approvedAt           DateTime?              @db.Timestamptz(6)
  Tenant               Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  JobFamily            JobFamily?             @relation(fields: [tenantId, jobFamilyId], references: [tenantId, id])
  Grade                Grade?                 @relation(fields: [tenantId, payGradeId], references: [tenantId, id])
  JobProfileAssignment JobProfileAssignment[]
  Position             Position[]

  @@unique([tenantId, id])
  @@unique([tenantId, jobCode])
  @@unique([tenantId, jobTitle])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, flsaClassification])
  @@index([tenantId, jobFamilyId])
  @@index([tenantId, jobFamilyId, payGradeId])
  @@index([tenantId, jobLevel])
  @@index([tenantId, jobTitle])
  @@index([tenantId, payGradeId])
  @@index([tenantId, workLocation])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model JobProfileAssignment {
  id                    String                 @id @default(uuid(7)) @db.Uuid
  status                HRWorkforceChildStatus @default(ACTIVE)
  version               Int                    @default(1)
  createdAt             DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime               @db.Timestamptz(6)
  tenantId              String                 @db.Uuid
  deletedAt             DateTime?              @db.Timestamptz(6)
  deletedByActorId      String?                @db.Uuid
  createdByActorId      String?                @db.Uuid
  updatedByActorId      String?                @db.Uuid
  auditCorrelationId    String?                @db.Uuid
  dataClassification    String                 @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  workerId              String                 @db.Uuid
  jobProfileId          String                 @db.Uuid
  assignmentType        AssignmentType         @default(PRIMARY)
  startDate             DateTime               @db.Date
  endDate               DateTime?              @db.Date
  isPrimary             Boolean                @default(true)
  proficiencyLevel      String?                @db.VarChar(20)
  certificationRequired Boolean                @default(false)
  certificationDate     DateTime?              @db.Date
  certificationExpiry   DateTime?              @db.Date
  complianceStatus      String?                @db.VarChar(20)
  performanceRating     PerformanceRating?
  developmentPlan       Json?
  trainingRequired      Boolean                @default(false)
  assignmentReason      String?                @db.VarChar(100)
  assignmentNotes       String?
  effectiveDate         DateTime               @db.Date
  endDateEffective      DateTime?              @db.Date
  Tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  JobProfile            JobProfile             @relation(fields: [tenantId, jobProfileId], references: [tenantId, id], onDelete: Cascade)
  Worker                Worker                 @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, jobProfileId, startDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assignmentType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, certificationRequired])
  @@index([tenantId, dataClassification])
  @@index([tenantId, endDate])
  @@index([tenantId, isPrimary])
  @@index([tenantId, jobProfileId])
  @@index([tenantId, performanceRating])
  @@index([tenantId, startDate])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model JobRun {
  id               String        @id @default(uuid(7)) @db.Uuid
  // TODO: Introduce a RunStatus enum later; keeping string for safe rollout
  status           String        @default("QUEUED") @db.VarChar(20)
  // Shadow enum field for gradual rollout — backfill then cutover
  statusEnum       JobRunStatus? @default(QUEUED)
  version          Int           @default(1)
  createdAt        DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime      @db.Timestamptz(6)
  tenantId         String        @db.Uuid
  deletedAt        DateTime?     @db.Timestamptz(6)
  deletedByActorId String?       @db.Uuid
  createdByActorId String?       @db.Uuid
  updatedByActorId String?       @db.Uuid

  // Enterprise fields
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Run context
  scheduleId        String?       @db.Uuid
  runNumber         Int           @default(1)
  priority          JobPriority   @default(NORMAL)
  attempt           Int           @default(1)
  maxRetries        Int?          @default(3)
  retryStrategy     RetryStrategy @default(LINEAR)
  retryDelaySeconds Int?          @default(60)
  queuedAt          DateTime?     @db.Timestamptz(6)
  startedAt         DateTime?     @db.Timestamptz(6)
  completedAt       DateTime?     @db.Timestamptz(6)
  durationMs        Int?
  nodeId            String?       @db.VarChar(100)
  workerId          String?       @db.VarChar(100)
  errorCode         String?       @db.VarChar(100)
  errorMessage      String?
  outputData        String?
  logs              String?
  metadata          Json?

  // Relations (single-sided)

  @@unique([tenantId, id])
  @@unique([tenantId, scheduleId, runNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, priority])
  @@index([tenantId, scheduleId])
  @@index([tenantId, startedAt])
  @@index([tenantId, status])
  @@index([tenantId, statusEnum])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model JobSchedule {
  id               String             @id @default(uuid(7)) @db.Uuid
  // TODO: Consider enum for schedule lifecycle; keeping string
  status           String             @default("ACTIVE") @db.VarChar(20)
  // Shadow enum field for gradual rollout — backfill then cutover
  statusEnum       JobScheduleStatus? @default(ACTIVE)
  version          Int                @default(1)
  createdAt        DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime           @db.Timestamptz(6)
  tenantId         String             @db.Uuid
  deletedAt        DateTime?          @db.Timestamptz(6)
  deletedByActorId String?            @db.Uuid
  createdByActorId String?            @db.Uuid
  updatedByActorId String?            @db.Uuid

  // Enterprise fields
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Schedule config
  name              String        @db.VarChar(200)
  description       String?
  cronExpression    String?       @db.VarChar(100)
  timezone          String?       @db.VarChar(50)
  priority          JobPriority   @default(NORMAL)
  isActive          Boolean       @default(true)
  concurrencyLimit  Int           @default(1)
  maxRetries        Int?          @default(3)
  retryStrategy     RetryStrategy @default(LINEAR)
  retryDelaySeconds Int?          @default(60)
  backoffFactor     Float?        @default(2.0)
  backoffMaxSeconds Int?
  jitterSeconds     Int?
  lockOwner         String?       @db.Uuid
  lockExpiresAt     DateTime?     @db.Timestamptz(6)
  lastRunAt         DateTime?     @db.Timestamptz(6)
  nextRunAt         DateTime?     @db.Timestamptz(6)
  lastRunStatus     String?       @db.VarChar(20)
  targetService     String?       @db.VarChar(100)
  payload           String?
  tags              String[]      @db.VarChar(50)
  metadata          Json?

  // Relations (none declared)

  @@unique([tenantId, id])
  @@unique([tenantId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isActive])
  @@index([tenantId, nextRunAt])
  @@index([tenantId, priority])
  @@index([tenantId, status])
  @@index([tenantId, statusEnum])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model JournalEntry {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             JournalEntryStatus @default(DRAFT)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  entryNumber        String             @db.VarChar(50)
  description        String
  entryType          JournalEntryType   @default(STANDARD)
  sourceModule       JournalEntrySource @default(MANUAL)
  referenceNumber    String?            @db.VarChar(100)
  entryDate          DateTime           @db.Date
  postingDate        DateTime?          @db.Date
  periodYear         Int
  periodMonth        Int
  totalDebit         Decimal            @default(0) @db.Decimal(18, 6)
  totalCredit        Decimal            @default(0) @db.Decimal(18, 6)
  isBalanced         Boolean            @default(false)
  sourceEntityType   String?            @db.VarChar(100)
  sourceEntityId     String?            @db.Uuid
  originalEntryId    String?            @db.Uuid
  baseCurrency       String             @default("USD") @db.VarChar(3)
  exchangeRate       Decimal?           @db.Decimal(10, 6)
  requiresApproval   Boolean            @default(false)
  approvedAt         DateTime?          @db.Timestamptz(6)
  approvedById       String?            @db.Uuid
  approvalNotes      String?
  projectId          String?            @db.Uuid
  Member             Member?            @relation(fields: [tenantId, approvedById], references: [tenantId, id], onDelete: NoAction)
  Tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  JournalEntry       JournalEntry?      @relation("JournalEntryToJournalEntry", fields: [tenantId, originalEntryId], references: [tenantId, id], onDelete: NoAction)
  other_JournalEntry JournalEntry[]     @relation("JournalEntryToJournalEntry")
  Project            Project?           @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  JournalLine        JournalLine[]

  @@unique([tenantId, entryNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedById])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, entryDate])
  @@index([tenantId, entryType])
  @@index([tenantId, isBalanced])
  @@index([tenantId, originalEntryId])
  @@index([tenantId, periodYear, periodMonth])
  @@index([tenantId, postingDate])
  @@index([tenantId, projectId])
  @@index([tenantId, requiresApproval])
  @@index([tenantId, sourceEntityType, sourceEntityId])
  @@index([tenantId, sourceModule])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model JournalLine {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             JournalLineStatus    @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  journalEntryId     String               @db.Uuid
  lineNumber         Int                  @default(1)
  glAccountId        String               @db.Uuid
  debitAmount        Decimal              @default(0) @db.Decimal(18, 6)
  creditAmount       Decimal              @default(0) @db.Decimal(18, 6)
  amount             Decimal              @db.Decimal(18, 6)
  indicator          DebitCreditIndicator
  projectId          String?              @db.Uuid
  costCodeId         String?              @db.Uuid
  departmentId       String?              @db.Uuid
  vendorId           String?              @db.Uuid
  customerId         String?              @db.Uuid
  employeeId         String?              @db.Uuid
  currency           String               @default("USD") @db.VarChar(3)
  exchangeRate       Decimal?             @db.Decimal(10, 6)
  functionalAmount   Decimal?             @db.Decimal(18, 6)
  taxRate            Decimal?             @db.Decimal(5, 4)
  taxAmount          Decimal?             @db.Decimal(18, 6)
  taxJurisdictionId  String?              @db.Uuid
  taxRateId          String?              @db.Uuid
  description        String
  reference          String?              @db.VarChar(255)
  memo               String?
  sourceDocumentType String?              @db.VarChar(100)
  sourceDocumentId   String?              @db.Uuid
  sourceLineId       String?              @db.Uuid
  TaxJurisdiction    TaxJurisdiction?     @relation(fields: [taxJurisdictionId], references: [id], onDelete: NoAction)
  TaxRate            TaxRate?             @relation(fields: [taxRateId], references: [id], onDelete: NoAction)
  Account            Account?             @relation(fields: [tenantId, customerId], references: [tenantId, id], onDelete: NoAction)
  Tenant             Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  GLAccount          GLAccount            @relation(fields: [tenantId, glAccountId], references: [tenantId, id])
  JournalEntry       JournalEntry         @relation(fields: [tenantId, journalEntryId], references: [tenantId, id], onDelete: Cascade)
  Project            Project?             @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  Vendor             Vendor?              @relation(fields: [tenantId, vendorId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, id])
  @@unique([tenantId, journalEntryId, lineNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, currency])
  @@index([tenantId, customerId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, glAccountId])
  @@index([tenantId, indicator])
  @@index([tenantId, journalEntryId])
  @@index([tenantId, projectId])
  @@index([tenantId, sourceDocumentType, sourceDocumentId])
  @@index([tenantId, status])
  @@index([tenantId, taxJurisdictionId])
  @@index([tenantId, vendorId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model KPIAggregate {
  id               String    @id @default(uuid(7)) @db.Uuid
  // Lifecycle
  status           String    @default("ACTIVE") @db.VarChar(20)
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid

  // Enterprise
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // KPI data
  kpiCode     String               @db.VarChar(100)
  periodStart DateTime             @db.Date
  periodEnd   DateTime?            @db.Date
  function    AggregationFunction?
  value       Decimal              @db.Decimal(15, 2)
  count       Int?
  unit        String?              @db.VarChar(20)
  breakdown   Json? // dimension breakdowns
  cubeId      String?              @db.Uuid
  partitionId String?              @db.Uuid

  SnapshotCube          SnapshotCube?          @relation(fields: [tenantId, cubeId], references: [tenantId, id])
  SnapshotCubePartition SnapshotCubePartition? @relation(fields: [tenantId, partitionId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, kpiCode])
  @@index([tenantId, periodStart])
  @@index([tenantId, cubeId])
  @@index([tenantId, partitionId])
  @@index([tenantId, status])
}

model Label {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lead {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             LeadStatus       @default(NEW)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  firstName          String           @db.VarChar(100)
  lastName           String           @db.VarChar(100)
  email              String?          @db.Citext
  phone              String?          @db.VarChar(20)
  mobile             String?          @db.VarChar(20)
  companyName        String?          @db.VarChar(255)
  jobTitle           String?          @db.VarChar(100)
  industry           String?          @db.VarChar(100)
  source             String?          @db.VarChar(100)
  campaign           String?          @db.VarChar(100)
  leadScore          Int?
  estimatedValue     Decimal?         @db.Decimal(12, 2)
  expectedCloseDate  DateTime?        @db.Date
  notes              String?
  rating             String?
  converted          Boolean          @default(false)
  Account            Account[]
  Activity           Activity[]
  LeadActivity       LeadActivity[]
  Opportunity        Opportunity[]
  Quote              Quote[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, companyName])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, email])
  @@index([tenantId, industry])
  @@index([tenantId, leadScore])
  @@index([tenantId, source])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model LeadActivity {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CRMChildStatus   @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  leadId             String           @db.Uuid
  activityType       String           @db.VarChar(50)
  description        String?
  activityAt         DateTime         @db.Timestamptz(6)
  Lead               Lead             @relation(fields: [tenantId, leadId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, activityType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, leadId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Leave {
  id                                          String           @id @default(uuid(7)) @db.Uuid
  status                                      LeaveStatus      @default(REQUESTED)
  version                                     Int              @default(1)
  createdAt                                   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                   DateTime         @db.Timestamptz(6)
  tenantId                                    String           @db.Uuid
  deletedAt                                   DateTime?        @db.Timestamptz(6)
  deletedByActorId                            String?          @db.Uuid
  createdByActorId                            String?          @db.Uuid
  updatedByActorId                            String?          @db.Uuid
  auditCorrelationId                          String?          @db.Uuid
  dataClassification                          String           @default("CONFIDENTIAL")
  retentionPolicy                             RetentionPolicy?
  workerId                                    String           @db.Uuid
  leaveType                                   LeaveType
  requestDate                                 DateTime         @db.Date
  startDate                                   DateTime         @db.Date
  endDate                                     DateTime         @db.Date
  returnDate                                  DateTime?        @db.Date
  totalDays                                   Decimal          @db.Decimal(5, 2)
  totalHours                                  Decimal?         @db.Decimal(8, 2)
  requestedById                               String           @db.Uuid
  approvedById                                String?          @db.Uuid
  approvedAt                                  DateTime?        @db.Timestamptz(6)
  deniedReason                                String?
  reason                                      String?
  isRecurring                                 Boolean          @default(false)
  parentLeaveId                               String?          @db.Uuid
  isFMLA                                      Boolean          @default(false)
  doctorNote                                  Boolean          @default(false)
  returnToWorkNote                            Boolean          @default(false)
  isPaid                                      Boolean          @default(true)
  payPercentage                               Decimal          @default(100) @db.Decimal(5, 2)
  Member_Leave_tenantId_approvedByIdToMember  Member?          @relation("Leave_tenantId_approvedByIdToMember", fields: [tenantId, approvedById], references: [tenantId, id])
  Tenant                                      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Leave                                       Leave?           @relation("LeaveToLeave", fields: [tenantId, parentLeaveId], references: [tenantId, id])
  other_Leave                                 Leave[]          @relation("LeaveToLeave")
  Member_Leave_tenantId_requestedByIdToMember Member           @relation("Leave_tenantId_requestedByIdToMember", fields: [tenantId, requestedById], references: [tenantId, id])
  Worker                                      Worker           @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedById])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isFMLA])
  @@index([tenantId, leaveType])
  @@index([tenantId, requestDate])
  @@index([tenantId, startDate, endDate])
  @@index([tenantId, status])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model LeaveOfAbsence {
  id               String                 @id @default(uuid(7)) @db.Uuid
  status           HRWorkforceChildStatus @default(ACTIVE)
  version          Int                    @default(1)
  createdAt        DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime               @db.Timestamptz(6)
  tenantId         String                 @db.Uuid
  deletedAt        DateTime?              @db.Timestamptz(6)
  deletedByActorId String?                @db.Uuid
  createdByActorId String?                @db.Uuid
  updatedByActorId String?                @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model LegalHold {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Location {
  id                                                 String           @id @default(uuid(7)) @db.Uuid
  status                                             LocationStatus   @default(ACTIVE)
  version                                            Int              @default(1)
  createdAt                                          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                          DateTime         @db.Timestamptz(6)
  tenantId                                           String           @db.Uuid
  deletedAt                                          DateTime?        @db.Timestamptz(6)
  deletedByActorId                                   String?          @db.Uuid
  createdByActorId                                   String?          @db.Uuid
  updatedByActorId                                   String?          @db.Uuid
  auditCorrelationId                                 String?          @db.Uuid
  dataClassification                                 String           @default("INTERNAL")
  retentionPolicy                                    RetentionPolicy?
  locationCode                                       String           @unique @db.Citext
  locationName                                       String           @db.VarChar(100)
  locationDescription                                String?
  locationType                                       LocationType     @default(OFFICE)
  addressLine1                                       String           @db.VarChar(255)
  addressLine2                                       String?          @db.VarChar(255)
  city                                               String           @db.VarChar(100)
  stateProvince                                      String           @db.VarChar(100)
  postalCode                                         String           @db.VarChar(20)
  country                                            String           @db.VarChar(100)
  latitude                                           Decimal?         @db.Decimal(10, 8)
  longitude                                          Decimal?         @db.Decimal(11, 8)
  timeZone                                           String?          @db.VarChar(50)
  primaryPhone                                       String?          @db.VarChar(50)
  secondaryPhone                                     String?          @db.VarChar(50)
  faxNumber                                          String?          @db.VarChar(50)
  email                                              String?          @db.Citext
  website                                            String?          @db.VarChar(500)
  isHeadquarters                                     Boolean          @default(false)
  isActive                                           Boolean          @default(true)
  capacity                                           Int?
  squareFootage                                      Int?
  floorCount                                         Int?
  parkingSpaces                                      Int?
  managerId                                          String?          @db.Uuid
  facilityManagerId                                  String?          @db.Uuid
  monthlyRent                                        Decimal?         @db.Decimal(12, 2)
  currency                                           CurrencyCode     @default(USD)
  costCenterId                                       String?          @db.Uuid
  safetyRating                                       SafetyRating?    @default(NOT_RATED)
  complianceCerts                                    Json?
  emergencyContact                                   String?          @db.VarChar(255)
  effectiveDate                                      DateTime         @db.Date
  endDate                                            DateTime?        @db.Date
  approvedByActorId                                  String?          @db.Uuid
  approvedAt                                         DateTime?        @db.Timestamptz(6)
  Department                                         Department[]
  CostCenter                                         CostCenter?      @relation(fields: [tenantId, costCenterId], references: [tenantId, id])
  Member_Location_tenantId_facilityManagerIdToMember Member?          @relation("Location_tenantId_facilityManagerIdToMember", fields: [tenantId, facilityManagerId], references: [tenantId, id])
  Tenant                                             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_Location_tenantId_managerIdToMember         Member?          @relation("Location_tenantId_managerIdToMember", fields: [tenantId, managerId], references: [tenantId, id])
  Project                                            Project[]

  @@unique([tenantId, id])
  @@unique([tenantId, locationCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, city, country])
  @@index([tenantId, city])
  @@index([tenantId, costCenterId])
  @@index([tenantId, country])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, facilityManagerId])
  @@index([tenantId, isActive])
  @@index([tenantId, isHeadquarters])
  @@index([tenantId, locationName])
  @@index([tenantId, locationType])
  @@index([tenantId, managerId])
  @@index([tenantId, stateProvince])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model LossInvestigation {
  id                       String                     @id @default(uuid(7)) @db.Uuid
  status                   InventoryChildStatus       @default(ACTIVE)
  version                  Int                        @default(1)
  createdAt                DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                   @db.Timestamptz(6)
  tenantId                 String                     @db.Uuid
  deletedAt                DateTime?                  @db.Timestamptz(6)
  deletedByActorId         String?                    @db.Uuid
  createdByActorId         String?                    @db.Uuid
  updatedByActorId         String?                    @db.Uuid
  auditCorrelationId       String?                    @db.Uuid
  dataClassification       String                     @default("CONFIDENTIAL")
  retentionPolicy          RetentionPolicy?
  investigationNumber      String                     @db.VarChar(50)
  investigationType        String                     @db.VarChar(50)
  investigationDate        DateTime                   @db.Timestamptz(6)
  completedDate            DateTime?                  @db.Timestamptz(6)
  lossAmount               Decimal                    @db.Decimal(12, 4)
  lossQuantity             Decimal                    @db.Decimal(12, 4)
  lossDescription          String
  rootCause                String?
  investigationStatus      String                     @default("OPEN") @db.VarChar(20)
  priority                 String                     @default("MEDIUM") @db.VarChar(20)
  severity                 String                     @default("MINOR") @db.VarChar(20)
  assignedTo               String?                    @db.Uuid
  reportedBy               String?                    @db.Uuid
  approvedBy               String?                    @db.Uuid
  inventoryItemId          String?                    @db.Uuid
  locationId               String?                    @db.Uuid
  correctiveActions        String?
  preventiveActions        String?
  followUpRequired         Boolean                    @default(false)
  followUpDate             DateTime?                  @db.Date
  LossInvestigationFinding LossInvestigationFinding[]

  @@unique([tenantId, id])
  @@unique([tenantId, investigationNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assignedTo])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, inventoryItemId])
  @@index([tenantId, investigationDate])
  @@index([tenantId, investigationStatus])
  @@index([tenantId, investigationType])
  @@index([tenantId, locationId])
  @@index([tenantId, priority])
  @@index([tenantId, severity])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model LossInvestigationFinding {
  id                  String               @id @default(uuid(7)) @db.Uuid
  status              InventoryChildStatus @default(ACTIVE)
  version             Int                  @default(1)
  createdAt           DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime             @db.Timestamptz(6)
  tenantId            String               @db.Uuid
  deletedAt           DateTime?            @db.Timestamptz(6)
  deletedByActorId    String?              @db.Uuid
  createdByActorId    String?              @db.Uuid
  updatedByActorId    String?              @db.Uuid
  auditCorrelationId  String?              @db.Uuid
  dataClassification  String               @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  findingNumber       String               @db.VarChar(50)
  findingType         String               @db.VarChar(50)
  findingCategory     String               @db.VarChar(50)
  findingTitle        String               @db.VarChar(255)
  findingDescription  String
  impactLevel         String               @default("MEDIUM") @db.VarChar(20)
  financialImpact     Decimal?             @db.Decimal(12, 4)
  operationalImpact   String?
  evidence            String?
  evidenceType        String?              @db.VarChar(50)
  evidenceUrl         String?
  recommendation      String?
  recommendedBy       String?              @db.Uuid
  implementationDate  DateTime?            @db.Date
  findingStatus       String               @default("OPEN") @db.VarChar(20)
  resolutionDate      DateTime?            @db.Timestamptz(6)
  resolutionNotes     String?
  verifiedBy          String?              @db.Uuid
  verifiedDate        DateTime?            @db.Timestamptz(6)
  lossInvestigationId String               @db.Uuid
  LossInvestigation   LossInvestigation    @relation(fields: [tenantId, lossInvestigationId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, findingNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, findingCategory])
  @@index([tenantId, findingStatus])
  @@index([tenantId, findingType])
  @@index([tenantId, impactLevel])
  @@index([tenantId, lossInvestigationId])
  @@index([tenantId, recommendedBy])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Member {
  id                                                                         String                       @id @default(uuid(7)) @db.Uuid
  status                                                                     MemberStatus                 @default(ACTIVE)
  version                                                                    Int                          @default(1)
  createdAt                                                                  DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                                                                  DateTime                     @db.Timestamptz(6)
  tenantId                                                                   String                       @db.Uuid
  deletedAt                                                                  DateTime?                    @db.Timestamptz(6)
  deletedByActorId                                                           String?                      @db.Uuid
  createdByActorId                                                           String?                      @db.Uuid
  updatedByActorId                                                           String?                      @db.Uuid
  auditCorrelationId                                                         String?                      @db.Uuid
  dataClassification                                                         String                       @default("INTERNAL")
  retentionPolicy                                                            RetentionPolicy?
  userId                                                                     String                       @db.Uuid
  memberNumber                                                               String?                      @db.VarChar(50)
  displayName                                                                String?                      @db.VarChar(255)
  title                                                                      String?                      @db.VarChar(100)
  department                                                                 String?                      @db.VarChar(100)
  workEmail                                                                  String?                      @db.Citext
  workPhone                                                                  String?                      @db.VarChar(50)
  mobilePhone                                                                String?                      @db.VarChar(50)
  employeeId                                                                 String?                      @db.VarChar(50)
  hireDate                                                                   DateTime?                    @db.Timestamptz(6)
  startDate                                                                  DateTime?                    @db.Timestamptz(6)
  endDate                                                                    DateTime?                    @db.Timestamptz(6)
  isActive                                                                   Boolean                      @default(true)
  lastAccessAt                                                               DateTime?                    @db.Timestamptz(6)
  accessLevel                                                                String                       @default("STANDARD") @db.VarChar(20)
  invitedAt                                                                  DateTime?                    @db.Timestamptz(6)
  invitedByMemberId                                                          String?                      @db.Uuid
  acceptedAt                                                                 DateTime?                    @db.Timestamptz(6)
  onboardedAt                                                                DateTime?                    @db.Timestamptz(6)
  suspendedAt                                                                DateTime?                    @db.Timestamptz(6)
  suspendedReason                                                            String?
  terminatedAt                                                               DateTime?                    @db.Timestamptz(6)
  terminationReason                                                          String?
  terminatedByMemberId                                                       String?                      @db.Uuid
  costCenter                                                                 String?                      @db.VarChar(50)
  billableRate                                                               Decimal?                     @db.Decimal(10, 2)
  currency                                                                   String                       @default("USD") @db.VarChar(3)
  metadata                                                                   Json?
  tags                                                                       String[]                     @db.VarChar(50)
  ApiKey_ApiKey_memberIdToMember                                             ApiKey[]                     @relation("ApiKey_memberIdToMember")
  ApiKey_ApiKey_revokedByMemberIdToMember                                    ApiKey[]                     @relation("ApiKey_revokedByMemberIdToMember")
  ApprovalDecision_ApprovalDecision_tenantId_approverIdToMember              ApprovalDecision[]           @relation("ApprovalDecision_tenantId_approverIdToMember")
  ApprovalDecision_ApprovalDecision_tenantId_delegatedFromIdToMember         ApprovalDecision[]           @relation("ApprovalDecision_tenantId_delegatedFromIdToMember")
  ApprovalRequest_ApprovalRequest_tenantId_currentApproverToMember           ApprovalRequest[]            @relation("ApprovalRequest_tenantId_currentApproverToMember")
  ApprovalRequest_ApprovalRequest_tenantId_finalDecisionByToMember           ApprovalRequest[]            @relation("ApprovalRequest_tenantId_finalDecisionByToMember")
  ApprovalRequest_ApprovalRequest_tenantId_submittedByIdToMember             ApprovalRequest[]            @relation("ApprovalRequest_tenantId_submittedByIdToMember")
  Attachment_Attachment_tenantId_approvedByIdToMember                        Attachment[]                 @relation("Attachment_tenantId_approvedByIdToMember")
  Attachment_Attachment_tenantId_attachedByIdToMember                        Attachment[]                 @relation("Attachment_tenantId_attachedByIdToMember")
  AttachmentLink_AttachmentLink_tenantId_linkedByIdToMember                  AttachmentLink[]             @relation("AttachmentLink_tenantId_linkedByIdToMember")
  AttachmentLink_AttachmentLink_tenantId_unlinkedByIdToMember                AttachmentLink[]             @relation("AttachmentLink_tenantId_unlinkedByIdToMember")
  AuthFactor                                                                 AuthFactor[]
  BillApproval_BillApproval_tenantId_approverIdToMember                      BillApproval[]               @relation("BillApproval_tenantId_approverIdToMember")
  BillApproval_BillApproval_tenantId_delegatedFromToMember                   BillApproval[]               @relation("BillApproval_tenantId_delegatedFromToMember")
  BillPayment                                                                BillPayment[]
  Certification_Certification_tenantId_approvedByIdToMember                  Certification[]              @relation("Certification_tenantId_approvedByIdToMember")
  Certification_Certification_tenantId_hrReviewedByIdToMember                Certification[]              @relation("Certification_tenantId_hrReviewedByIdToMember")
  Certification_Certification_tenantId_verifiedByIdToMember                  Certification[]              @relation("Certification_tenantId_verifiedByIdToMember")
  Channel_Channel_tenantId_archivedByIdToMember                              Channel[]                    @relation("Channel_tenantId_archivedByIdToMember")
  Channel_Channel_tenantId_creatorIdToMember                                 Channel[]                    @relation("Channel_tenantId_creatorIdToMember")
  Channel_Channel_tenantId_ownerIdToMember                                   Channel[]                    @relation("Channel_tenantId_ownerIdToMember")
  ChannelMember_ChannelMember_tenantId_bannedByIdToMember                    ChannelMember[]              @relation("ChannelMember_tenantId_bannedByIdToMember")
  ChannelMember_ChannelMember_tenantId_invitedByIdToMember                   ChannelMember[]              @relation("ChannelMember_tenantId_invitedByIdToMember")
  ChannelMember_ChannelMember_tenantId_kickedByIdToMember                    ChannelMember[]              @relation("ChannelMember_tenantId_kickedByIdToMember")
  ChannelMember_ChannelMember_tenantId_memberIdToMember                      ChannelMember[]              @relation("ChannelMember_tenantId_memberIdToMember")
  Chargeback_Chargeback_tenantId_assignedToIdToMember                        Chargeback[]                 @relation("Chargeback_tenantId_assignedToIdToMember")
  Chargeback_Chargeback_tenantId_resolvedByIdToMember                        Chargeback[]                 @relation("Chargeback_tenantId_resolvedByIdToMember")
  ChargebackEvidence                                                         ChargebackEvidence[]
  ClockInClockOut                                                            ClockInClockOut[]
  CostCenter                                                                 CostCenter[]
  CreditMemo                                                                 CreditMemo[]
  DailyLog                                                                   DailyLog[]
  Department_Department_tenantId_assistantManagerIdToMember                  Department[]                 @relation("Department_tenantId_assistantManagerIdToMember")
  Department_Department_tenantId_budgetOwnerIdToMember                       Department[]                 @relation("Department_tenantId_budgetOwnerIdToMember")
  Department_Department_tenantId_managerIdToMember                           Department[]                 @relation("Department_tenantId_managerIdToMember")
  DirectChat_DirectChat_tenantId_archivedByIdToMember                        DirectChat[]                 @relation("DirectChat_tenantId_archivedByIdToMember")
  DirectChat_DirectChat_tenantId_participant1IdToMember                      DirectChat[]                 @relation("DirectChat_tenantId_participant1IdToMember")
  DirectChat_DirectChat_tenantId_participant2IdToMember                      DirectChat[]                 @relation("DirectChat_tenantId_participant2IdToMember")
  DirectMessage_DirectMessage_tenantId_flaggedByIdToMember                   DirectMessage[]              @relation("DirectMessage_tenantId_flaggedByIdToMember")
  DirectMessage_DirectMessage_tenantId_receiverIdToMember                    DirectMessage[]              @relation("DirectMessage_tenantId_receiverIdToMember")
  DirectMessage_DirectMessage_tenantId_senderIdToMember                      DirectMessage[]              @relation("DirectMessage_tenantId_senderIdToMember")
  DirectMessageRead                                                          DirectMessageRead[]
  DunningNotice_DunningNotice_tenantId_assignedToMemberIdToMember            DunningNotice[]              @relation("DunningNotice_tenantId_assignedToMemberIdToMember")
  DunningNotice_DunningNotice_tenantId_sentByMemberIdToMember                DunningNotice[]              @relation("DunningNotice_tenantId_sentByMemberIdToMember")
  ESignatureEnvelope                                                         ESignatureEnvelope[]
  ESignatureRecipient                                                        ESignatureRecipient[]
  Estimate_Estimate_tenantId_approvedByMemberIdToMember                      Estimate[]                   @relation("Estimate_tenantId_approvedByMemberIdToMember")
  Estimate_Estimate_tenantId_finalApprovedByMemberIdToMember                 Estimate[]                   @relation("Estimate_tenantId_finalApprovedByMemberIdToMember")
  ExpenseApproval                                                            ExpenseApproval[]
  ExternalShareLink_ExternalShareLink_tenantId_createdByIdToMember           ExternalShareLink[]          @relation("ExternalShareLink_tenantId_createdByIdToMember")
  ExternalShareLink_ExternalShareLink_tenantId_revokedByIdToMember           ExternalShareLink[]          @relation("ExternalShareLink_tenantId_revokedByIdToMember")
  FileObject                                                                 FileObject[]
  GoodsReceipt_GoodsReceipt_tenantId_completedByToMember                     GoodsReceipt[]               @relation("GoodsReceipt_tenantId_completedByToMember")
  GoodsReceipt_GoodsReceipt_tenantId_inspectedByToMember                     GoodsReceipt[]               @relation("GoodsReceipt_tenantId_inspectedByToMember")
  GoodsReceipt_GoodsReceipt_tenantId_receivedByToMember                      GoodsReceipt[]               @relation("GoodsReceipt_tenantId_receivedByToMember")
  GoodsReceiptLine                                                           GoodsReceiptLine[]
  IdentityProviderConnection                                                 IdentityProviderConnection[]
  IntegrationConnector                                                       IntegrationConnector[]
  Invoice                                                                    Invoice[]
  InvoiceAttachment                                                          InvoiceAttachment[]
  JournalEntry                                                               JournalEntry[]
  Leave_Leave_tenantId_approvedByIdToMember                                  Leave[]                      @relation("Leave_tenantId_approvedByIdToMember")
  Leave_Leave_tenantId_requestedByIdToMember                                 Leave[]                      @relation("Leave_tenantId_requestedByIdToMember")
  Location_Location_tenantId_facilityManagerIdToMember                       Location[]                   @relation("Location_tenantId_facilityManagerIdToMember")
  Location_Location_tenantId_managerIdToMember                               Location[]                   @relation("Location_tenantId_managerIdToMember")
  Tenant                                                                     Tenant                       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_Member_tenantId_invitedByMemberIdToMember                           Member?                      @relation("Member_tenantId_invitedByMemberIdToMember", fields: [tenantId, invitedByMemberId], references: [tenantId, id])
  other_Member_Member_tenantId_invitedByMemberIdToMember                     Member[]                     @relation("Member_tenantId_invitedByMemberIdToMember")
  Member_Member_tenantId_terminatedByMemberIdToMember                        Member?                      @relation("Member_tenantId_terminatedByMemberIdToMember", fields: [tenantId, terminatedByMemberId], references: [tenantId, id])
  other_Member_Member_tenantId_terminatedByMemberIdToMember                  Member[]                     @relation("Member_tenantId_terminatedByMemberIdToMember")
  User                                                                       User                         @relation(fields: [userId], references: [id])
  MemberDocument_MemberDocument_tenantId_memberIdToMember                    MemberDocument[]             @relation("MemberDocument_tenantId_memberIdToMember")
  MemberDocument_MemberDocument_tenantId_uploadedByIdToMember                MemberDocument[]             @relation("MemberDocument_tenantId_uploadedByIdToMember")
  MemberDocument_MemberDocument_tenantId_verifiedByIdToMember                MemberDocument[]             @relation("MemberDocument_tenantId_verifiedByIdToMember")
  MemberRole_MemberRole_approvedByMemberIdToMember                           MemberRole[]                 @relation("MemberRole_approvedByMemberIdToMember")
  MemberRole_MemberRole_assignedByMemberIdToMember                           MemberRole[]                 @relation("MemberRole_assignedByMemberIdToMember")
  MemberRole_MemberRole_deactivatedByMemberIdToMember                        MemberRole[]                 @relation("MemberRole_deactivatedByMemberIdToMember")
  MemberRole_MemberRole_delegatedToMemberIdToMember                          MemberRole[]                 @relation("MemberRole_delegatedToMemberIdToMember")
  MemberRole_MemberRole_memberIdToMember                                     MemberRole[]                 @relation("MemberRole_memberIdToMember")
  MemberSettings                                                             MemberSettings?
  Message_Message_tenantId_editedByIdToMember                                Message[]                    @relation("Message_tenantId_editedByIdToMember")
  Message_Message_tenantId_flaggedByIdToMember                               Message[]                    @relation("Message_tenantId_flaggedByIdToMember")
  Message_Message_tenantId_moderatedByIdToMember                             Message[]                    @relation("Message_tenantId_moderatedByIdToMember")
  Message_Message_tenantId_senderIdToMember                                  Message[]                    @relation("Message_tenantId_senderIdToMember")
  MessageAttachment                                                          MessageAttachment[]
  MessageRead                                                                MessageRead[]
  Milestone_Milestone_tenantId_completedByIdToMember                         Milestone[]                  @relation("Milestone_tenantId_completedByIdToMember")
  Milestone_Milestone_tenantId_ownerIdToMember                               Milestone[]                  @relation("Milestone_tenantId_ownerIdToMember")
  MilestoneStakeholder_MilestoneStakeholder_tenantId_assignedByIdToMember    MilestoneStakeholder[]       @relation("MilestoneStakeholder_tenantId_assignedByIdToMember")
  MilestoneStakeholder_MilestoneStakeholder_tenantId_stakeholderIdToMember   MilestoneStakeholder[]       @relation("MilestoneStakeholder_tenantId_stakeholderIdToMember")
  OrgUnit                                                                    OrgUnit[]
  PasswordResetToken_PasswordResetToken_invalidatedByMemberIdToMember        PasswordResetToken[]         @relation("PasswordResetToken_invalidatedByMemberIdToMember")
  PasswordResetToken_PasswordResetToken_memberIdToMember                     PasswordResetToken[]         @relation("PasswordResetToken_memberIdToMember")
  Payout                                                                     Payout[]
  PayrollAdjustment                                                          PayrollAdjustment[]
  PayrollItem                                                                PayrollItem[]
  PayrollPayment                                                             PayrollPayment[]
  PayrollRun_PayrollRun_tenantId_approvedByIdToMember                        PayrollRun[]                 @relation("PayrollRun_tenantId_approvedByIdToMember")
  PayrollRun_PayrollRun_tenantId_processedByIdToMember                       PayrollRun[]                 @relation("PayrollRun_tenantId_processedByIdToMember")
  PayrollTax                                                                 PayrollTax[]
  PerformanceGoal                                                            PerformanceGoal[]
  PerformanceReview_PerformanceReview_tenantId_approvedByIdToMember          PerformanceReview[]          @relation("PerformanceReview_tenantId_approvedByIdToMember")
  PerformanceReview_PerformanceReview_tenantId_hrReviewedByIdToMember        PerformanceReview[]          @relation("PerformanceReview_tenantId_hrReviewedByIdToMember")
  PerformanceReview_PerformanceReview_tenantId_reviewerIdToMember            PerformanceReview[]          @relation("PerformanceReview_tenantId_reviewerIdToMember")
  Project_Project_tenantId_approvedByMemberIdToMember                        Project[]                    @relation("Project_tenantId_approvedByMemberIdToMember")
  Project_Project_tenantId_finalApprovedByMemberIdToMember                   Project[]                    @relation("Project_tenantId_finalApprovedByMemberIdToMember")
  ProjectDocument                                                            ProjectDocument[]
  ProjectIssue                                                               ProjectIssue[]
  ProjectMember                                                              ProjectMember[]
  ProjectRisk                                                                ProjectRisk[]
  ProjectTaskAssignment                                                      ProjectTaskAssignment[]
  ProjectTaskComment                                                         ProjectTaskComment[]
  PunchListItem                                                              PunchListItem[]
  PurchaseOrder                                                              PurchaseOrder[]
  PurchaseOrderApproval_PurchaseOrderApproval_tenantId_approverIdToMember    PurchaseOrderApproval[]      @relation("PurchaseOrderApproval_tenantId_approverIdToMember")
  PurchaseOrderApproval_PurchaseOrderApproval_tenantId_delegatedFromToMember PurchaseOrderApproval[]      @relation("PurchaseOrderApproval_tenantId_delegatedFromToMember")
  RFI_RFI_tenantId_assigneeIdToMember                                        RFI[]                        @relation("RFI_tenantId_assigneeIdToMember")
  RFI_RFI_tenantId_submitterIdToMember                                       RFI[]                        @relation("RFI_tenantId_submitterIdToMember")
  RFIReply                                                                   RFIReply[]
  RFQResponse_RFQResponse_tenantId_awardedByToMember                         RFQResponse[]                @relation("RFQResponse_tenantId_awardedByToMember")
  RFQResponse_RFQResponse_tenantId_evaluatedByToMember                       RFQResponse[]                @relation("RFQResponse_tenantId_evaluatedByToMember")
  Reconciliation_Reconciliation_tenantId_reconciledByIdToMember              Reconciliation[]             @relation("Reconciliation_tenantId_reconciledByIdToMember")
  Reconciliation_Reconciliation_tenantId_reviewedByIdToMember                Reconciliation[]             @relation("Reconciliation_tenantId_reviewedByIdToMember")
  Refund                                                                     Refund[]
  ResourceAllocation_ResourceAllocation_tenantId_approvedByIdToMember        ResourceAllocation[]         @relation("ResourceAllocation_tenantId_approvedByIdToMember")
  ResourceAllocation_ResourceAllocation_tenantId_assignedByIdToMember        ResourceAllocation[]         @relation("ResourceAllocation_tenantId_assignedByIdToMember")
  ResourceAllocation_ResourceAllocation_tenantId_assignedToIdToMember        ResourceAllocation[]         @relation("ResourceAllocation_tenantId_assignedToIdToMember")
  RolePermission_RolePermission_approvedByMemberIdToMember                   RolePermission[]             @relation("RolePermission_approvedByMemberIdToMember")
  RolePermission_RolePermission_assignedByMemberIdToMember                   RolePermission[]             @relation("RolePermission_assignedByMemberIdToMember")
  RolePermission_RolePermission_memberIdToMember                             RolePermission[]             @relation("RolePermission_memberIdToMember")
  RolePermission_RolePermission_revokedByMemberIdToMember                    RolePermission[]             @relation("RolePermission_revokedByMemberIdToMember")
  ScheduleException                                                          ScheduleException[]
  ServiceAccount                                                             ServiceAccount[]
  ServiceAccountKey                                                          ServiceAccountKey[]
  Session_Session_memberIdToMember                                           Session[]                    @relation("Session_memberIdToMember")
  Session_Session_terminatedByMemberIdToMember                               Session[]                    @relation("Session_terminatedByMemberIdToMember")
  SignatureEvent                                                             SignatureEvent[]
  SubmittalItem                                                              SubmittalItem[]
  Task                                                                       Task[]
  TaskAssignment                                                             TaskAssignment[]
  TaskAttachment                                                             TaskAttachment[]
  TaskChecklistItem_TaskChecklistItem_tenantId_completedByIdToMember         TaskChecklistItem[]          @relation("TaskChecklistItem_tenantId_completedByIdToMember")
  TaskChecklistItem_TaskChecklistItem_tenantId_validatedByIdToMember         TaskChecklistItem[]          @relation("TaskChecklistItem_tenantId_validatedByIdToMember")
  Timesheet_Timesheet_tenantId_approvedByIdToMember                          Timesheet[]                  @relation("Timesheet_tenantId_approvedByIdToMember")
  Timesheet_Timesheet_tenantId_submittedByIdToMember                         Timesheet[]                  @relation("Timesheet_tenantId_submittedByIdToMember")
  TimesheetApproval                                                          TimesheetApproval[]
  TimesheetEntry                                                             TimesheetEntry[]
  UserDevice_UserDevice_memberIdToMember                                     UserDevice[]                 @relation("UserDevice_memberIdToMember")
  UserDevice_UserDevice_revokedByMemberIdToMember                            UserDevice[]                 @relation("UserDevice_revokedByMemberIdToMember")
  Vendor                                                                     Vendor[]
  VendorDocument                                                             VendorDocument[]
  weather_alert_deliveries                                                   weather_alert_deliveries[]
  weather_alerts                                                             weather_alerts[]
  weather_incidents_weather_incidents_tenantId_approvedByMemberIdToMember    weather_incidents[]          @relation("weather_incidents_tenantId_approvedByMemberIdToMember")
  weather_incidents_weather_incidents_tenantId_reportedByMemberIdToMember    weather_incidents[]          @relation("weather_incidents_tenantId_reportedByMemberIdToMember")
  weather_incidents_weather_incidents_tenantId_verifiedByMemberIdToMember    weather_incidents[]          @relation("weather_incidents_tenantId_verifiedByMemberIdToMember")
  // New CRM relations
  QuoteApproval_RequestedBy                                                  QuoteApproval[]              @relation("QuoteApproval_requestedBy")
  QuoteApproval_ApprovedBy                                                   QuoteApproval[]              @relation("QuoteApproval_approvedBy")
  QuoteApproval_EscalatedTo                                                  QuoteApproval[]              @relation("QuoteApproval_escalatedTo")
  Territory_Manager                                                          Territory[]

  @@unique([tenantId, employeeId])
  @@unique([tenantId, id])
  @@unique([tenantId, memberNumber])
  @@unique([tenantId, userId])
  @@index([createdAt], type: Brin)
  @@index([invitedByMemberId])
  @@index([tenantId, accessLevel])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, department])
  @@index([tenantId, isActive])
  @@index([tenantId, status])
  @@index([tenantId, userId])
  @@index([tenantId, workEmail])
  @@index([terminatedByMemberId])
  @@index([tenantId, deletedAt], map: "idx_member_tenant_deleted")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MemberDocument {
  id                                                  String           @id @default(uuid(7)) @db.Uuid
  status                                              String           @default("ACTIVE")
  version                                             Int              @default(1)
  createdAt                                           DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                           DateTime         @db.Timestamptz(6)
  tenantId                                            String           @db.Uuid
  deletedAt                                           DateTime?        @db.Timestamptz(6)
  deletedByActorId                                    String?          @db.Uuid
  createdByActorId                                    String?          @db.Uuid
  updatedByActorId                                    String?          @db.Uuid
  auditCorrelationId                                  String?          @db.Uuid
  dataClassification                                  String           @default("CONFIDENTIAL")
  retentionPolicy                                     RetentionPolicy?
  memberId                                            String           @db.Uuid
  documentType                                        String           @db.VarChar(50)
  documentNumber                                      String?          @db.VarChar(100)
  fileName                                            String           @db.VarChar(255)
  fileUrl                                             String           @db.VarChar(500)
  mimeType                                            String?          @db.VarChar(100)
  fileSize                                            Int?
  checksum                                            String?          @db.VarChar(64)
  title                                               String?          @db.VarChar(255)
  description                                         String?
  issuer                                              String?          @db.VarChar(255)
  issuedDate                                          DateTime?        @db.Date
  expirationDate                                      DateTime?        @db.Date
  isVerified                                          Boolean          @default(false)
  verifiedAt                                          DateTime?        @db.Timestamptz(6)
  verifiedById                                        String?          @db.Uuid
  isRequired                                          Boolean          @default(false)
  isConfidential                                      Boolean          @default(true)
  accessLevel                                         String           @default("MEMBER_ONLY") @db.VarChar(20)
  uploadedById                                        String           @db.Uuid
  uploadedAt                                          DateTime         @default(now()) @db.Timestamptz(6)
  metadata                                            Json?
  tags                                                String[]         @db.VarChar(50)
  Tenant                                              Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_MemberDocument_tenantId_memberIdToMember     Member           @relation("MemberDocument_tenantId_memberIdToMember", fields: [tenantId, memberId], references: [tenantId, id], onDelete: Cascade)
  Member_MemberDocument_tenantId_uploadedByIdToMember Member           @relation("MemberDocument_tenantId_uploadedByIdToMember", fields: [tenantId, uploadedById], references: [tenantId, id])
  Member_MemberDocument_tenantId_verifiedByIdToMember Member?          @relation("MemberDocument_tenantId_verifiedByIdToMember", fields: [tenantId, verifiedById], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, memberId, documentType, documentNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accessLevel])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, documentType])
  @@index([tenantId, expirationDate])
  @@index([tenantId, isRequired])
  @@index([tenantId, isVerified])
  @@index([tenantId, memberId])
  @@index([tenantId, status])
  @@index([tenantId, uploadedById])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MemberRole {
  id                                              String           @id @default(uuid(7)) @db.Uuid
  status                                          String           @default("ACTIVE")
  version                                         Int              @default(1)
  createdAt                                       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                       DateTime         @db.Timestamptz(6)
  tenantId                                        String           @db.Uuid
  deletedAt                                       DateTime?        @db.Timestamptz(6)
  deletedByActorId                                String?          @db.Uuid
  createdByActorId                                String?          @db.Uuid
  updatedByActorId                                String?          @db.Uuid
  auditCorrelationId                              String?          @db.Uuid
  dataClassification                              String           @default("INTERNAL")
  retentionPolicy                                 RetentionPolicy?
  memberId                                        String           @db.Uuid
  roleId                                          String           @db.Uuid
  isPrimary                                       Boolean          @default(false)
  isDefault                                       Boolean          @default(false)
  priority                                        Int              @default(100)
  effectiveFrom                                   DateTime         @default(now()) @db.Timestamptz(6)
  effectiveTo                                     DateTime?        @db.Timestamptz(6)
  scope                                           AssignmentScope  @default(GLOBAL)
  scopeResourceId                                 String?          @db.Uuid
  scopeResourceType                               String?          @db.VarChar(50)
  assignedAt                                      DateTime         @default(now()) @db.Timestamptz(6)
  assignedByMemberId                              String?          @db.Uuid
  assignmentReason                                String?
  requiresApproval                                Boolean          @default(false)
  approvedAt                                      DateTime?        @db.Timestamptz(6)
  approvedByMemberId                              String?          @db.Uuid
  approvalComment                                 String?
  activatedAt                                     DateTime?        @db.Timestamptz(6)
  deactivatedAt                                   DateTime?        @db.Timestamptz(6)
  deactivationReason                              String?
  deactivatedByMemberId                           String?          @db.Uuid
  inheritedFromRoleId                             String?          @db.Uuid
  canDelegate                                     Boolean          @default(false)
  delegatedToMemberId                             String?          @db.Uuid
  delegatedAt                                     DateTime?        @db.Timestamptz(6)
  conditions                                      Json?
  restrictions                                    Json?
  metadata                                        Json?
  tags                                            String[]         @db.VarChar(50)
  Member_MemberRole_approvedByMemberIdToMember    Member?          @relation("MemberRole_approvedByMemberIdToMember", fields: [approvedByMemberId], references: [id])
  Member_MemberRole_assignedByMemberIdToMember    Member?          @relation("MemberRole_assignedByMemberIdToMember", fields: [assignedByMemberId], references: [id])
  Member_MemberRole_deactivatedByMemberIdToMember Member?          @relation("MemberRole_deactivatedByMemberIdToMember", fields: [deactivatedByMemberId], references: [id])
  Member_MemberRole_delegatedToMemberIdToMember   Member?          @relation("MemberRole_delegatedToMemberIdToMember", fields: [delegatedToMemberId], references: [id])
  Role_MemberRole_inheritedFromRoleIdToRole       Role?            @relation("MemberRole_inheritedFromRoleIdToRole", fields: [inheritedFromRoleId], references: [id])
  Member_MemberRole_memberIdToMember              Member           @relation("MemberRole_memberIdToMember", fields: [memberId], references: [id], onDelete: Cascade)
  Role_MemberRole_roleIdToRole                    Role             @relation("MemberRole_roleIdToRole", fields: [roleId], references: [id], onDelete: Cascade)
  Tenant                                          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, memberId, roleId, effectiveFrom])
  @@index([approvedByMemberId])
  @@index([assignedByMemberId])
  @@index([createdAt], type: Brin)
  @@index([deactivatedByMemberId])
  @@index([delegatedToMemberId])
  @@index([tenantId, assignedAt])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveFrom])
  @@index([tenantId, effectiveTo])
  @@index([tenantId, isPrimary])
  @@index([tenantId, memberId])
  @@index([tenantId, requiresApproval])
  @@index([tenantId, roleId])
  @@index([tenantId, scopeResourceType, scopeResourceId])
  @@index([tenantId, scope])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MemberSettings {
  id                   String           @id @default(uuid(7)) @db.Uuid
  status               String           @default("ACTIVE")
  version              Int              @default(1)
  createdAt            DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime         @db.Timestamptz(6)
  tenantId             String           @db.Uuid
  deletedAt            DateTime?        @db.Timestamptz(6)
  deletedByActorId     String?          @db.Uuid
  createdByActorId     String?          @db.Uuid
  updatedByActorId     String?          @db.Uuid
  auditCorrelationId   String?          @db.Uuid
  dataClassification   String           @default("INTERNAL")
  retentionPolicy      RetentionPolicy?
  memberId             String           @unique @db.Uuid
  theme                ThemePreference  @default(SYSTEM)
  primaryColor         String?          @db.VarChar(20)
  fontSize             String           @default("medium") @db.VarChar(20)
  density              String           @default("comfortable") @db.VarChar(20)
  language             String?          @db.VarChar(10)
  locale               String?          @db.VarChar(10)
  timezone             String?          @db.VarChar(50)
  dateFormat           String           @default("MM/dd/yyyy") @db.VarChar(20)
  timeFormat           String           @default("12h") @db.VarChar(10)
  numberFormat         String           @default("US") @db.VarChar(10)
  emailNotifications   Boolean          @default(true)
  pushNotifications    Boolean          @default(true)
  smsNotifications     Boolean          @default(false)
  inAppNotifications   Boolean          @default(true)
  notifyOnAssignment   Boolean          @default(true)
  notifyOnMention      Boolean          @default(true)
  notifyOnDeadline     Boolean          @default(true)
  notifyOnApproval     Boolean          @default(true)
  notifyOnComment      Boolean          @default(true)
  notifyOnStatusChange Boolean          @default(true)
  dashboardLayout      Json?
  sidebarCollapsed     Boolean          @default(false)
  quickActions         String[]         @db.VarChar(100)
  favoriteViews        String[]         @db.VarChar(100)
  workingHoursStart    String?          @db.VarChar(10)
  workingHoursEnd      String?          @db.VarChar(10)
  workingDays          String[]         @db.VarChar(10)
  autoSaveInterval     Int              @default(30)
  profileVisibility    String           @default("TEAM") @db.VarChar(20)
  activityVisibility   String           @default("TEAM") @db.VarChar(20)
  allowAnalytics       Boolean          @default(true)
  keyboardShortcuts    Boolean          @default(true)
  animations           Boolean          @default(true)
  soundEffects         Boolean          @default(false)
  betaFeatures         Boolean          @default(false)
  customSettings       Json?
  Member               Member           @relation(fields: [memberId], references: [id], onDelete: Cascade)
  Tenant               Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, memberId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, language])
  @@index([tenantId, status])
  @@index([tenantId, theme])
  @@index([tenantId, timezone])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Message {
  id                                                String                       @id @default(uuid(7)) @db.Uuid
  status                                            CommunicationMessageStatus   @default(SENT)
  version                                           Int                          @default(1)
  createdAt                                         DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                                         DateTime                     @db.Timestamptz(6)
  tenantId                                          String                       @db.Uuid
  deletedAt                                         DateTime?                    @db.Timestamptz(6)
  deletedByActorId                                  String?                      @db.Uuid
  createdByActorId                                  String?                      @db.Uuid
  updatedByActorId                                  String?                      @db.Uuid
  channelId                                         String                       @db.Uuid
  senderId                                          String                       @db.Uuid
  messageType                                       CommunicationMessageType     @default(TEXT)
  messageStatus                                     CommunicationMessageStatus   @default(SENT)
  priority                                          CommunicationMessagePriority @default(NORMAL)
  content                                           String
  contentFormat                                     MessageFormat                @default(TEXT)
  rawContent                                        String?
  searchableContent                                 String?
  parentMessageId                                   String?                      @db.Uuid
  threadDepth                                       Int                          @default(0)
  replyCount                                        Int                          @default(0)
  lastReplyAt                                       DateTime?                    @db.Timestamptz(6)
  mentionedMembers                                  String?
  mentionedChannels                                 String?
  referencedMessages                                String?
  hashtags                                          String?
  reactionCount                                     Int                          @default(0)
  reactions                                         String?
  readCount                                         Int                          @default(0)
  isImportant                                       Boolean                      @default(false)
  isPinned                                          Boolean                      @default(false)
  editedAt                                          DateTime?                    @db.Timestamptz(6)
  editedById                                        String?                      @db.Uuid
  editCount                                         Int                          @default(0)
  originalContent                                   String?
  isFlagged                                         Boolean                      @default(false)
  flaggedAt                                         DateTime?                    @db.Timestamptz(6)
  flaggedById                                       String?                      @db.Uuid
  flagReason                                        String?                      @db.VarChar(255)
  moderatedAt                                       DateTime?                    @db.Timestamptz(6)
  moderatedById                                     String?                      @db.Uuid
  moderationAction                                  String?                      @db.VarChar(50)
  attachmentCount                                   Int                          @default(0)
  hasImages                                         Boolean                      @default(false)
  hasDocuments                                      Boolean                      @default(false)
  hasLinks                                          Boolean                      @default(false)
  extractedLinks                                    String?
  scheduledAt                                       DateTime?                    @db.Timestamptz(6)
  isScheduled                                       Boolean                      @default(false)
  isAutomated                                       Boolean                      @default(false)
  botId                                             String?                      @db.Uuid
  externalId                                        String?                      @db.VarChar(255)
  externalSource                                    String?                      @db.VarChar(100)
  integrationData                                   String?
  auditCorrelationId                                String?                      @db.Uuid
  dataClassification                                String                       @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy                                   RetentionPolicy?
  Channel_Channel_tenantId_pinnedMessageIdToMessage Channel[]                    @relation("Channel_tenantId_pinnedMessageIdToMessage")
  ExternalShareLink                                 ExternalShareLink[]
  Channel_Message_tenantId_channelIdToChannel       Channel                      @relation("Message_tenantId_channelIdToChannel", fields: [tenantId, channelId], references: [tenantId, id], onDelete: Cascade)
  Member_Message_tenantId_editedByIdToMember        Member?                      @relation("Message_tenantId_editedByIdToMember", fields: [tenantId, editedById], references: [tenantId, id], onDelete: NoAction)
  Tenant                                            Tenant                       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_Message_tenantId_flaggedByIdToMember       Member?                      @relation("Message_tenantId_flaggedByIdToMember", fields: [tenantId, flaggedById], references: [tenantId, id], onDelete: NoAction)
  Member_Message_tenantId_moderatedByIdToMember     Member?                      @relation("Message_tenantId_moderatedByIdToMember", fields: [tenantId, moderatedById], references: [tenantId, id], onDelete: NoAction)
  Message                                           Message?                     @relation("MessageToMessage", fields: [tenantId, parentMessageId], references: [tenantId, id], onDelete: NoAction)
  other_Message                                     Message[]                    @relation("MessageToMessage")
  Member_Message_tenantId_senderIdToMember          Member                       @relation("Message_tenantId_senderIdToMember", fields: [tenantId, senderId], references: [tenantId, id])
  MessageAttachment                                 MessageAttachment[]
  MessageRead                                       MessageRead[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([searchableContent])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, channelId])
  @@index([tenantId, createdAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isFlagged])
  @@index([tenantId, isImportant])
  @@index([tenantId, isPinned])
  @@index([tenantId, lastReplyAt])
  @@index([tenantId, messageStatus])
  @@index([tenantId, messageType])
  @@index([tenantId, parentMessageId])
  @@index([tenantId, scheduledAt])
  @@index([tenantId, senderId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MessageAttachment {
  id                    String                        @id @default(uuid(7)) @db.Uuid
  status                CommunicationAttachmentStatus @default(UPLOADING)
  version               Int                           @default(1)
  createdAt             DateTime                      @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                      @db.Timestamptz(6)
  tenantId              String                        @db.Uuid
  deletedAt             DateTime?                     @db.Timestamptz(6)
  deletedByActorId      String?                       @db.Uuid
  createdByActorId      String?                       @db.Uuid
  updatedByActorId      String?                       @db.Uuid
  messageId             String                        @db.Uuid
  fileObjectId          String                        @db.Uuid
  attachmentStatus      CommunicationAttachmentStatus @default(UPLOADING)
  attachmentType        CommunicationAttachmentType
  fileName              String                        @db.VarChar(500)
  originalFileName      String                        @db.VarChar(500)
  fileSize              BigInt
  mimeType              String                        @db.VarChar(255)
  fileExtension         String                        @db.VarChar(50)
  encoding              String?                       @db.VarChar(100)
  uploadedById          String                        @db.Uuid
  uploadStartedAt       DateTime?                     @db.Timestamptz(6)
  uploadCompletedAt     DateTime?                     @db.Timestamptz(6)
  processingStartedAt   DateTime?                     @db.Timestamptz(6)
  processingCompletedAt DateTime?                     @db.Timestamptz(6)
  hasThumbnail          Boolean                       @default(false)
  thumbnailUrl          String?                       @db.VarChar(1000)
  previewUrl            String?                       @db.VarChar(1000)
  downloadUrl           String?                       @db.VarChar(1000)
  virusScanned          Boolean                       @default(false)
  virusScanResult       String?                       @db.VarChar(50)
  scanCompletedAt       DateTime?                     @db.Timestamptz(6)
  isPubliclyAccessible  Boolean                       @default(false)
  accessPermissions     String?
  downloadCount         Int                           @default(0)
  lastAccessedAt        DateTime?                     @db.Timestamptz(6)
  viewCount             Int                           @default(0)
  shareCount            Int                           @default(0)
  imageWidth            Int?
  imageHeight           Int?
  videoDuration         Int?
  audioDuration         Int?
  documentPages         Int?
  description           String?
  tags                  String?
  altText               String?
  auditCorrelationId    String?                       @db.Uuid
  dataClassification    String                        @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy       RetentionPolicy?
  FileObject            FileObject                    @relation(fields: [tenantId, fileObjectId], references: [tenantId, id])
  Tenant                Tenant                        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Message               Message                       @relation(fields: [tenantId, messageId], references: [tenantId, id], onDelete: Cascade)
  Member                Member                        @relation(fields: [tenantId, uploadedById], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, id])
  @@unique([tenantId, messageId, fileObjectId])
  @@index([createdAt], type: Brin)
  @@index([mimeType])
  @@index([tenantId, attachmentType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, downloadCount])
  @@index([tenantId, fileObjectId])
  @@index([tenantId, fileSize])
  @@index([tenantId, lastAccessedAt])
  @@index([tenantId, messageId])
  @@index([tenantId, status])
  @@index([tenantId, uploadedById])
  @@index([tenantId, virusScanned])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MessageRead {
  id                   String           @id @default(uuid(7)) @db.Uuid
  status               ReadStatus       @default(DELIVERED)
  version              Int              @default(1)
  createdAt            DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime         @db.Timestamptz(6)
  tenantId             String           @db.Uuid
  deletedAt            DateTime?        @db.Timestamptz(6)
  deletedByActorId     String?          @db.Uuid
  createdByActorId     String?          @db.Uuid
  updatedByActorId     String?          @db.Uuid
  messageId            String           @db.Uuid
  memberId             String           @db.Uuid
  readStatus           ReadStatus       @default(DELIVERED)
  deliveredAt          DateTime?        @db.Timestamptz(6)
  readAt               DateTime?        @db.Timestamptz(6)
  acknowledgedAt       DateTime?        @db.Timestamptz(6)
  firstReadAt          DateTime?        @db.Timestamptz(6)
  lastReadAt           DateTime?        @db.Timestamptz(6)
  readDuration         Int?
  scrollPercentage     Int?             @default(0)
  deviceType           String?          @db.VarChar(50)
  platform             String?          @db.VarChar(50)
  channelId            String           @db.Uuid
  readFromNotification Boolean          @default(false)
  readFromThread       Boolean          @default(false)
  readFromSearch       Boolean          @default(false)
  wasMarkedImportant   Boolean          @default(false)
  wasShared            Boolean          @default(false)
  wasBookmarked        Boolean          @default(false)
  wasReportedAsSpam    Boolean          @default(false)
  isAutoRead           Boolean          @default(false)
  autoReadReason       String?          @db.VarChar(100)
  auditCorrelationId   String?          @db.Uuid
  dataClassification   String           @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy      RetentionPolicy?
  channelMemberId      String?          @db.Uuid
  ChannelMember        ChannelMember?   @relation(fields: [channelMemberId], references: [id])
  Channel              Channel          @relation(fields: [tenantId, channelId], references: [tenantId, id], onDelete: Cascade)
  Tenant               Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member               Member           @relation(fields: [tenantId, memberId], references: [tenantId, id], onDelete: Cascade)
  Message              Message          @relation(fields: [tenantId, messageId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, messageId, memberId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, channelId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deliveredAt])
  @@index([tenantId, firstReadAt])
  @@index([tenantId, isAutoRead])
  @@index([tenantId, memberId])
  @@index([tenantId, messageId])
  @@index([tenantId, readAt])
  @@index([tenantId, readStatus])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MetricSnapshot {
  id               String    @id @default(uuid(7)) @db.Uuid
  // Lifecycle
  status           String    @default("ACTIVE") @db.VarChar(20)
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid

  // Enterprise
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Metric data
  metricCode   String   @db.VarChar(100)
  snapshotAt   DateTime @db.Timestamptz(6)
  value        Decimal  @db.Decimal(15, 2)
  unit         String?  @db.VarChar(20)
  dimensionKey String?  @db.VarChar(200)
  dimensions   Json?
  cubeId       String?  @db.Uuid
  partitionId  String?  @db.Uuid

  SnapshotCube          SnapshotCube?          @relation(fields: [tenantId, cubeId], references: [tenantId, id])
  SnapshotCubePartition SnapshotCubePartition? @relation(fields: [tenantId, partitionId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, metricCode])
  @@index([tenantId, snapshotAt])
  @@index([tenantId, cubeId])
  @@index([tenantId, partitionId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Milestone {
  id                                                                                  String                 @id @default(uuid(7)) @db.Uuid
  status                                                                              String                 @default("ACTIVE")
  version                                                                             Int                    @default(1)
  createdAt                                                                           DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                                                                           DateTime               @db.Timestamptz(6)
  tenantId                                                                            String                 @db.Uuid
  deletedAt                                                                           DateTime?              @db.Timestamptz(6)
  deletedByActorId                                                                    String?                @db.Uuid
  createdByActorId                                                                    String?                @db.Uuid
  updatedByActorId                                                                    String?                @db.Uuid
  auditCorrelationId                                                                  String?                @db.Uuid
  dataClassification                                                                  String                 @default("INTERNAL")
  retentionPolicy                                                                     RetentionPolicy?
  name                                                                                String                 @db.VarChar(255)
  description                                                                         String?
  milestoneType                                                                       MilestoneType          @default(CUSTOM)
  targetDate                                                                          DateTime               @db.Date
  actualDate                                                                          DateTime?              @db.Date
  milestoneStatus                                                                     MilestoneStatus        @default(PLANNED)
  progressPercentage                                                                  Decimal                @default(0) @db.Decimal(5, 2)
  isCompleted                                                                         Boolean                @default(false)
  completedAt                                                                         DateTime?              @db.Timestamptz(6)
  completedById                                                                       String?                @db.Uuid
  priority                                                                            ImpactLevel            @default(MEDIUM)
  isCriticalPath                                                                      Boolean                @default(false)
  isClientFacing                                                                      Boolean                @default(false)
  deliverables                                                                        Json?
  acceptanceCriteria                                                                  Json?
  budgetImpact                                                                        Decimal?               @db.Decimal(12, 2)
  revenueImpact                                                                       Decimal?               @db.Decimal(12, 2)
  penaltyRisk                                                                         Decimal?               @db.Decimal(12, 2)
  ownerId                                                                             String                 @db.Uuid
  alertDaysBefore                                                                     Int?
  lastAlertSent                                                                       DateTime?              @db.Timestamptz(6)
  escalationLevel                                                                     EscalationLevel        @default(NONE)
  scheduleId                                                                          String?                @db.Uuid
  projectId                                                                           String?                @db.Uuid
  metadata                                                                            Json?
  tags                                                                                String[]               @db.VarChar(50)
  Member_Milestone_tenantId_completedByIdToMember                                     Member?                @relation("Milestone_tenantId_completedByIdToMember", fields: [tenantId, completedById], references: [tenantId, id])
  Tenant                                                                              Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_Milestone_tenantId_ownerIdToMember                                           Member                 @relation("Milestone_tenantId_ownerIdToMember", fields: [tenantId, ownerId], references: [tenantId, id])
  Project                                                                             Project?               @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  Schedule                                                                            Schedule?              @relation(fields: [tenantId, scheduleId], references: [tenantId, id], onDelete: Cascade)
  MilestoneDependency_MilestoneDependency_tenantId_dependentMilestoneIdToMilestone    MilestoneDependency[]  @relation("MilestoneDependency_tenantId_dependentMilestoneIdToMilestone")
  MilestoneDependency_MilestoneDependency_tenantId_prerequisiteMilestoneIdToMilestone MilestoneDependency[]  @relation("MilestoneDependency_tenantId_prerequisiteMilestoneIdToMilestone")
  MilestoneStakeholder                                                                MilestoneStakeholder[]

  @@unique([tenantId, id])
  @@unique([tenantId, scheduleId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, alertDaysBefore, targetDate])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, completedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isClientFacing])
  @@index([tenantId, isCompleted])
  @@index([tenantId, isCriticalPath])
  @@index([tenantId, milestoneStatus])
  @@index([tenantId, milestoneType])
  @@index([tenantId, ownerId])
  @@index([tenantId, priority])
  @@index([tenantId, projectId])
  @@index([tenantId, scheduleId])
  @@index([tenantId, status])
  @@index([tenantId, targetDate])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MilestoneDependency {
  id                                                                        String           @id @default(uuid(7)) @db.Uuid
  status                                                                    String           @default("ACTIVE")
  version                                                                   Int              @default(1)
  createdAt                                                                 DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                                                 DateTime         @db.Timestamptz(6)
  tenantId                                                                  String           @db.Uuid
  deletedAt                                                                 DateTime?        @db.Timestamptz(6)
  deletedByActorId                                                          String?          @db.Uuid
  createdByActorId                                                          String?          @db.Uuid
  updatedByActorId                                                          String?          @db.Uuid
  auditCorrelationId                                                        String?          @db.Uuid
  dataClassification                                                        String           @default("INTERNAL")
  retentionPolicy                                                           RetentionPolicy?
  dependentMilestoneId                                                      String           @db.Uuid
  prerequisiteMilestoneId                                                   String           @db.Uuid
  dependencyType                                                            String           @default("FINISH_TO_START") @db.VarChar(30)
  lagDays                                                                   Int?             @default(0)
  isHardDependency                                                          Boolean          @default(true)
  isActive                                                                  Boolean          @default(true)
  violationRisk                                                             ImpactLevel?
  lastValidated                                                             DateTime?        @db.Timestamptz(6)
  reason                                                                    String?          @db.VarChar(500)
  impact                                                                    String?
  Milestone_MilestoneDependency_tenantId_dependentMilestoneIdToMilestone    Milestone        @relation("MilestoneDependency_tenantId_dependentMilestoneIdToMilestone", fields: [tenantId, dependentMilestoneId], references: [tenantId, id], onDelete: Cascade)
  Tenant                                                                    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Milestone_MilestoneDependency_tenantId_prerequisiteMilestoneIdToMilestone Milestone        @relation("MilestoneDependency_tenantId_prerequisiteMilestoneIdToMilestone", fields: [tenantId, prerequisiteMilestoneId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, dependentMilestoneId, prerequisiteMilestoneId])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dependencyType])
  @@index([tenantId, dependentMilestoneId])
  @@index([tenantId, isActive])
  @@index([tenantId, prerequisiteMilestoneId])
  @@index([tenantId, status])
  @@index([tenantId, violationRisk])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MilestoneStakeholder {
  id                                                         String           @id @default(uuid(7)) @db.Uuid
  status                                                     String           @default("ACTIVE")
  version                                                    Int              @default(1)
  createdAt                                                  DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                                  DateTime         @db.Timestamptz(6)
  tenantId                                                   String           @db.Uuid
  deletedAt                                                  DateTime?        @db.Timestamptz(6)
  deletedByActorId                                           String?          @db.Uuid
  createdByActorId                                           String?          @db.Uuid
  updatedByActorId                                           String?          @db.Uuid
  auditCorrelationId                                         String?          @db.Uuid
  dataClassification                                         String           @default("INTERNAL")
  retentionPolicy                                            RetentionPolicy?
  milestoneId                                                String           @db.Uuid
  stakeholderId                                              String           @db.Uuid
  stakeholderRole                                            StakeholderRole  @default(OBSERVER)
  involvementLevel                                           ImpactLevel      @default(MEDIUM)
  isRequired                                                 Boolean          @default(false)
  notifyOnUpdate                                             Boolean          @default(true)
  notifyOnDelay                                              Boolean          @default(true)
  notifyOnCompletion                                         Boolean          @default(true)
  assignedAt                                                 DateTime         @default(now()) @db.Timestamptz(6)
  assignedById                                               String           @db.Uuid
  Member_MilestoneStakeholder_tenantId_assignedByIdToMember  Member           @relation("MilestoneStakeholder_tenantId_assignedByIdToMember", fields: [tenantId, assignedById], references: [tenantId, id])
  Tenant                                                     Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Milestone                                                  Milestone        @relation(fields: [tenantId, milestoneId], references: [tenantId, id], onDelete: Cascade)
  Member_MilestoneStakeholder_tenantId_stakeholderIdToMember Member           @relation("MilestoneStakeholder_tenantId_stakeholderIdToMember", fields: [tenantId, stakeholderId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, milestoneId, stakeholderId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, involvementLevel])
  @@index([tenantId, isRequired])
  @@index([tenantId, milestoneId])
  @@index([tenantId, stakeholderId])
  @@index([tenantId, stakeholderRole])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MitigationAction {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Notification {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model NotificationPreference {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

model NotificationTemplate {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model NumberSequence {
  id               String                    @id @default(uuid(7)) @db.Uuid
  status           PlatformTenantChildStatus @default(ACTIVE)
  version          Int                       @default(1)
  createdAt        DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                  @db.Timestamptz(6)
  tenantId         String                    @db.Uuid
  deletedAt        DateTime?                 @db.Timestamptz(6)
  deletedByActorId String?                   @db.Uuid
  createdByActorId String?                   @db.Uuid
  updatedByActorId String?                   @db.Uuid

  // Business configuration fields
  code          String                  @db.VarChar(50) // Unique identifier per tenant (e.g., "ESTIMATE_NUMBER")
  name          String                  @db.VarChar(255) // Human-readable name
  description   String?                 @db.Text
  prefix        String                  @db.VarChar(20) // e.g., "EST"
  suffix        String?                 @db.VarChar(20)
  paddingLength Int                     @default(6) // e.g., 6 -> 000001
  currentValue  Int                     @default(0)
  minValue      Int                     @default(1)
  maxValue      Int?
  step          Int                     @default(1)
  resetMode     NumberSequenceResetMode @default(NEVER)
  resetValue    Int                     @default(1)
  lastResetAt   DateTime?               @db.Timestamptz(6)

  // Format configuration
  formatTemplate String  @default("{prefix}-{number}")
  exampleOutput  String? @db.VarChar(100)

  // Relations
  Tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Constraints & indexes
  @@unique([tenantId, code])
  @@index([tenantId, status])
  @@index([tenantId, deletedAt])
}

// New enum for NumberSequence reset modes
enum NumberSequenceResetMode {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Opportunity {
  id                  String                @id @default(uuid(7)) @db.Uuid
  status              OpportunityStatus     @default(PROSPECTING)
  version             Int                   @default(1)
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @db.Timestamptz(6)
  tenantId            String                @db.Uuid
  deletedAt           DateTime?             @db.Timestamptz(6)
  deletedByActorId    String?               @db.Uuid
  createdByActorId    String?               @db.Uuid
  updatedByActorId    String?               @db.Uuid
  auditCorrelationId  String?               @db.Uuid
  dataClassification  String                @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  name                String                @db.VarChar(255)
  description         String?
  amount              Decimal               @db.Decimal(15, 2)
  probability         Int?
  expectedCloseDate   DateTime?             @db.Date
  actualCloseDate     DateTime?             @db.Date
  nextStep            String?               @db.VarChar(255)
  competitorInfo      String?
  notes               String?
  accountId           String?               @db.Uuid
  contactId           String?               @db.Uuid
  leadId              String?               @db.Uuid
  stageId             String?               @db.Uuid
  closeDate           DateTime?             @db.Date
  Activity            Activity[]
  Bid                 Bid[]
  Channel             Channel[]
  Account             Account?              @relation(fields: [tenantId, accountId], references: [tenantId, id])
  Contact             Contact?              @relation(fields: [tenantId, contactId], references: [tenantId, id])
  Lead                Lead?                 @relation(fields: [tenantId, leadId], references: [tenantId, id])
  OpportunityStage    OpportunityStage?     @relation(fields: [tenantId, stageId], references: [tenantId, id])
  OpportunityLineItem OpportunityLineItem[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountId])
  @@index([tenantId, amount])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contactId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expectedCloseDate])
  @@index([tenantId, leadId])
  @@index([tenantId, probability])
  @@index([tenantId, stageId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OpportunityLineItem {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CRMChildStatus   @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  description        String?
  quantity           Decimal          @db.Decimal(10, 2)
  unitPrice          Decimal          @db.Decimal(12, 4)
  totalPrice         Decimal          @db.Decimal(15, 2)
  priceListItemId    String?          @db.Uuid
  opportunityId      String           @db.Uuid
  contactId          String?          @db.Uuid
  PriceListItem      PriceListItem?   @relation(fields: [priceListItemId], references: [id])
  Contact            Contact?         @relation(fields: [tenantId, contactId], references: [tenantId, id])
  Opportunity        Opportunity      @relation(fields: [tenantId, opportunityId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([priceListItemId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contactId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, opportunityId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OpportunityStage {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CRMChildStatus   @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  name               String           @db.VarChar(100)
  description        String?
  sortOrder          Int?
  probability        Int?
  Opportunity        Opportunity[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, sortOrder])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OrgUnit {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             OrgUnitStatus    @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  unitCode           String           @unique @db.Citext
  unitName           String           @db.VarChar(100)
  unitDescription    String?
  unitType           String           @default("DEPARTMENT") @db.VarChar(50)
  parentUnitId       String?          @db.Uuid
  unitLevel          Int              @default(1)
  managerId          String?          @db.Uuid
  assistantManagerId String?          @db.Uuid
  budgetOwnerId      String?          @db.Uuid
  costCenterId       String?          @db.Uuid
  departmentId       String?          @db.Uuid
  isActive           Boolean          @default(true)
  isOperational      Boolean          @default(true)
  requiresApproval   Boolean          @default(false)
  maxHeadcount       Int?
  currentHeadcount   Int?             @default(0)
  primaryLocationId  String?          @db.Uuid
  regionCode         String?          @db.Citext
  timeZone           String?          @db.VarChar(50)
  businessHours      Json?
  budgetAmount       Decimal?         @db.Decimal(12, 2)
  actualSpend        Decimal?         @default(0) @db.Decimal(12, 2)
  budgetVariance     Decimal?         @default(0) @db.Decimal(12, 2)
  currency           String           @default("USD") @db.VarChar(3)
  complianceFlags    Json?
  reportingStructure Json?
  auditRequirements  Json?
  effectiveDate      DateTime         @db.Date
  endDate            DateTime?        @db.Date
  approvedByActorId  String?          @db.Uuid
  approvedAt         DateTime?        @db.Timestamptz(6)
  CostCenter         CostCenter?      @relation(fields: [tenantId, costCenterId], references: [tenantId, id])
  Department         Department?      @relation(fields: [tenantId, departmentId], references: [tenantId, id])
  Tenant             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member             Member?          @relation(fields: [tenantId, managerId], references: [tenantId, id])
  OrgUnit            OrgUnit?         @relation("OrgUnitToOrgUnit", fields: [tenantId, parentUnitId], references: [tenantId, id])
  other_OrgUnit      OrgUnit[]        @relation("OrgUnitToOrgUnit")
  Project            Project[]

  @@unique([tenantId, id])
  @@unique([tenantId, unitCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, budgetAmount])
  @@index([tenantId, costCenterId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, departmentId])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, isActive])
  @@index([tenantId, managerId])
  @@index([tenantId, parentUnitId])
  @@index([tenantId, regionCode])
  @@index([tenantId, unitLevel])
  @@index([tenantId, unitName])
  @@index([tenantId, unitType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OutboxMessage {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OvertimeRule {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  ruleName           String                 @db.VarChar(100)
  ruleCode           String                 @db.VarChar(50)
  ruleType           OvertimeRuleType       @default(DAILY)
  description        String?
  thresholdHours     Decimal                @db.Decimal(8, 2)
  multiplier         Decimal                @default(1.5) @db.Decimal(4, 2)
  maxHoursPerDay     Decimal?               @db.Decimal(8, 2)
  maxHoursPerWeek    Decimal?               @db.Decimal(8, 2)
  roundingRule       String                 @default("QUARTER") @db.VarChar(20)
  minimumIncrement   Decimal?               @db.Decimal(4, 2)
  effectiveDate      DateTime               @db.Date
  expirationDate     DateTime?              @db.Date
  isDefault          Boolean                @default(false)
  employeeGroup      String?                @db.VarChar(50)
  department         String?                @db.VarChar(50)
  jobTitle           String?                @db.VarChar(100)
  requiresApproval   Boolean                @default(false)
  approvalLevel      Int?                   @default(1)
  priority           Int                    @default(1)
  sortOrder          Int                    @default(1)

  @@unique([tenantId, id])
  @@unique([tenantId, ruleCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, employeeGroup])
  @@index([tenantId, isDefault])
  @@index([tenantId, priority])
  @@index([tenantId, ruleType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PasswordResetToken {
  id                    String           @id @default(uuid(7)) @db.Uuid
  status                String           @default("ACTIVE")
  version               Int              @default(1)
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime         @db.Timestamptz(6)
  tenantId              String?          @db.Uuid
  deletedAt             DateTime?        @db.Timestamptz(6)
  deletedByActorId      String?          @db.Uuid
  createdByActorId      String?          @db.Uuid
  updatedByActorId      String?          @db.Uuid
  auditCorrelationId    String?          @db.Uuid
  dataClassification    String           @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  userId                String           @db.Uuid
  memberId              String?          @db.Uuid
  token                 String           @db.VarChar(255)
  hashedToken           String           @db.VarChar(255)
  selector              String           @db.VarChar(100)
  expiresAt             DateTime         @db.Timestamptz(6)
  isUsed                Boolean          @default(false)
  usedAt                DateTime?        @db.Timestamptz(6)
  requestedEmail        String           @db.Citext
  requestIpAddress      String?          @db.VarChar(45)
  requestUserAgent      String?
  requestFingerprint    String?          @db.VarChar(255)
  attemptCount          Int              @default(0)
  maxAttempts           Int              @default(3)
  lastAttemptAt         DateTime?        @db.Timestamptz(6)
  lastAttemptIp         String?          @db.VarChar(45)
  invalidatedAt         DateTime?        @db.Timestamptz(6)
  invalidationReason    String?
  invalidatedByMemberId String?          @db.Uuid
  passwordChangedAt     DateTime?        @db.Timestamptz(6)
  changeIpAddress       String?          @db.VarChar(45)
  changeUserAgent       String?
  metadata              Json?

  Member_PasswordResetToken_invalidatedByMemberIdToMember Member? @relation("PasswordResetToken_invalidatedByMemberIdToMember", fields: [invalidatedByMemberId], references: [id])
  Member_PasswordResetToken_memberIdToMember              Member? @relation("PasswordResetToken_memberIdToMember", fields: [memberId], references: [id], onDelete: Cascade)
  Tenant                                                  Tenant? @relation(fields: [tenantId], references: [id])
  User                                                    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([selector])
  @@unique([token])
  @@index([createdAt], type: Brin)
  @@index([requestedEmail])
  @@index([expiresAt])
  @@index([isUsed])
  @@index([userId])
  @@index([status])
  @@index([auditCorrelationId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayCalendar {
  id                  String                 @id @default(uuid(7)) @db.Uuid
  status              HRWorkforceChildStatus @default(ACTIVE)
  version             Int                    @default(1)
  createdAt           DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime               @db.Timestamptz(6)
  tenantId            String                 @db.Uuid
  deletedAt           DateTime?              @db.Timestamptz(6)
  deletedByActorId    String?                @db.Uuid
  createdByActorId    String?                @db.Uuid
  updatedByActorId    String?                @db.Uuid
  auditCorrelationId  String?                @db.Uuid
  dataClassification  String                 @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  calendarCode        String                 @unique @db.Citext
  calendarName        String                 @db.VarChar(100)
  calendarDescription String?
  payFrequency        PayFrequency
  calendarYear        Int
  startDate           DateTime               @db.Date
  endDate             DateTime               @db.Date
  totalPeriods        Int
  currentPeriod       Int?                   @default(1)
  isActive            Boolean                @default(true)
  periodLength        Int                    @default(14)
  cutoffDays          Int                    @default(3)
  processingDays      Int                    @default(2)
  paymentDays         Int                    @default(1)
  holidayCalendarId   String?                @db.Uuid
  adjustForHolidays   Boolean                @default(true)
  weekendHandling     String                 @default("PREVIOUS_WEEKDAY") @db.VarChar(20)
  bankingDays         Json?
  processingRules     Json?
  exceptionRules      Json?
  complianceRegion    String?                @db.VarChar(50)
  taxYearAlignment    Boolean                @default(true)
  auditTrail          Json?
  effectiveDate       DateTime               @db.Date
  endDateEffective    DateTime?              @db.Date
  approvedByActorId   String?                @db.Uuid
  approvedAt          DateTime?              @db.Timestamptz(6)
  Tenant              Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  HolidayCalendar     HolidayCalendar?       @relation(fields: [tenantId, holidayCalendarId], references: [tenantId, id])
  PayGroup            PayGroup[]

  @@unique([tenantId, calendarCode])
  @@unique([tenantId, calendarYear, payFrequency])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, calendarName])
  @@index([tenantId, calendarYear])
  @@index([tenantId, currentPeriod])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, holidayCalendarId])
  @@index([tenantId, isActive])
  @@index([tenantId, payFrequency])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayGroup {
  id                   String               @id @default(uuid(7)) @db.Uuid
  status               PayGroupStatus       @default(ACTIVE)
  version              Int                  @default(1)
  createdAt            DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime             @db.Timestamptz(6)
  tenantId             String               @db.Uuid
  deletedAt            DateTime?            @db.Timestamptz(6)
  deletedByActorId     String?              @db.Uuid
  createdByActorId     String?              @db.Uuid
  updatedByActorId     String?              @db.Uuid
  auditCorrelationId   String?              @db.Uuid
  dataClassification   String               @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  payGroupCode         String               @unique @db.Citext
  payGroupName         String               @db.VarChar(100)
  payGroupDescription  String?
  payFrequency         PayFrequency
  payCalendarId        String?              @db.Uuid
  processingDay        Int?                 @default(1)
  cutoffDay            Int?                 @default(1)
  approvalRequired     Boolean              @default(true)
  autoCalculateOT      Boolean              @default(true)
  overtimeThreshold    Decimal?             @default(40.0) @db.Decimal(5, 2)
  defaultBankAccountId String?              @db.Uuid
  paymentMethod        String?              @db.VarChar(50)
  directDepositDays    Int?                 @default(2)
  taxJurisdiction      String?              @db.VarChar(100)
  unionAffiliation     String?              @db.VarChar(100)
  reportingRegion      String?              @db.VarChar(50)
  complianceFlags      Json?
  effectiveDate        DateTime             @db.Date
  endDate              DateTime?            @db.Date
  approvedByActorId    String?              @db.Uuid
  approvedAt           DateTime?            @db.Timestamptz(6)
  Tenant               Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  PayCalendar          PayCalendar?         @relation(fields: [tenantId, payCalendarId], references: [tenantId, id])
  PayGroupAssignment   PayGroupAssignment[]

  @@unique([tenantId, id])
  @@unique([tenantId, payGroupCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, payCalendarId])
  @@index([tenantId, payFrequency])
  @@index([tenantId, payGroupName])
  @@index([tenantId, processingDay])
  @@index([tenantId, taxJurisdiction])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayGroupAssignment {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  workerId           String                 @db.Uuid
  payGroupId         String                 @db.Uuid
  effectiveDate      DateTime               @db.Date
  endDate            DateTime?              @db.Date
  isPrimary          Boolean                @default(true)
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  PayGroup           PayGroup               @relation(fields: [tenantId, payGroupId], references: [tenantId, id], onDelete: Cascade)
  Worker             Worker                 @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, payGroupId, effectiveDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, isPrimary])
  @@index([tenantId, payGroupId])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayStatement {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             PayStatementStatus @default(DRAFT)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  statementNumber    String             @db.VarChar(50)
  statementDate      DateTime           @db.Date
  payPeriodStart     DateTime           @db.Date
  payPeriodEnd       DateTime           @db.Date
  employeeId         String             @db.Uuid
  employeeNumber     String?            @db.VarChar(50)
  employeeName       String             @db.VarChar(255)
  regularHours       Decimal?           @db.Decimal(8, 2)
  overtimeHours      Decimal?           @db.Decimal(8, 2)
  totalHours         Decimal?           @db.Decimal(8, 2)
  regularPay         Decimal            @db.Decimal(12, 4)
  overtimePay        Decimal?           @db.Decimal(12, 4)
  bonusPay           Decimal?           @db.Decimal(12, 4)
  grossPay           Decimal            @db.Decimal(12, 4)
  federalTax         Decimal?           @db.Decimal(12, 4)
  stateTax           Decimal?           @db.Decimal(12, 4)
  socialSecurity     Decimal?           @db.Decimal(12, 4)
  medicare           Decimal?           @db.Decimal(12, 4)
  otherDeductions    Decimal?           @db.Decimal(12, 4)
  totalDeductions    Decimal            @db.Decimal(12, 4)
  netPay             Decimal            @db.Decimal(12, 4)
  ytdGrossPay        Decimal?           @db.Decimal(12, 4)
  ytdDeductions      Decimal?           @db.Decimal(12, 4)
  ytdNetPay          Decimal?           @db.Decimal(12, 4)
  generatedAt        DateTime?          @db.Timestamptz(6)
  deliveredAt        DateTime?          @db.Timestamptz(6)
  viewedAt           DateTime?          @db.Timestamptz(6)
  payrollRunId       String?            @db.Uuid
  PayrollRun         PayrollRun?        @relation(fields: [payrollRunId], references: [id])

  @@unique([tenantId, id])
  @@unique([tenantId, statementNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, employeeId])
  @@index([tenantId, payPeriodStart, payPeriodEnd])
  @@index([tenantId, payrollRunId])
  @@index([tenantId, statementDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Payment {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             PaymentStatus        @default(PENDING)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  globalId           String               @db.Uuid
  paymentNumber      String               @unique
  paymentDate        DateTime             @db.Timestamptz(6)
  amount             Decimal              @db.Decimal(12, 2)
  currency           String               @default("USD")
  exchangeRate       Decimal?             @db.Decimal(12, 6)
  referenceNumber    String?
  notes              String?
  paymentMethodId    String?              @db.Uuid
  paymentMethodType  PaymentMethodType?
  accountId          String               @db.Uuid
  contactId          String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  BillPayment        BillPayment[]
  Chargeback         Chargeback[]
  InvoicePayment     InvoicePayment[]
  PaymentMethod      PaymentMethod?       @relation(fields: [paymentMethodId], references: [id], onDelete: NoAction)
  Account            Account              @relation(fields: [tenantId, accountId], references: [tenantId, id])
  Contact            Contact?             @relation(fields: [tenantId, contactId], references: [tenantId, id])
  PaymentApplication PaymentApplication[]
  Payout             Payout[]
  Refund             Refund[]

  @@unique([tenantId, id])
  @@index([paymentDate], type: Brin)
  @@index([tenantId, accountId])
  @@index([tenantId, amount])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contactId])
  @@index([tenantId, createdByActorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, paymentDate])
  @@index([tenantId, paymentDate, status])
  @@index([tenantId, paymentMethodId])
  @@index([tenantId, paymentMethodType])
  @@index([tenantId, paymentNumber])
  @@index([tenantId, referenceNumber])
  @@index([tenantId, status])
  @@index([tenantId, updatedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PaymentApplication {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             PaymentChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  appliedAmount      Decimal            @db.Decimal(12, 2)
  applicationDate    DateTime           @db.Date
  description        String?
  paymentId          String             @db.Uuid
  invoiceId          String?            @db.Uuid
  Invoice            Invoice?           @relation(fields: [invoiceId], references: [id])
  Payment            Payment            @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([invoiceId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, paymentId])
  @@index([tenantId, status])
}

model PaymentGateway {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

model PaymentMethod {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             String               @default("ACTIVE")
  version            Int                  @default(1)
  name               String               @unique @db.VarChar(100)
  description        String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  Payment            Payment[]
  PaymentMethodToken PaymentMethodToken[]

  @@index([dataClassification])
  @@index([isActive])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PaymentMethodToken {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             PaymentChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  tokenValue         String             @db.VarChar(255)
  tokenType          String             @db.VarChar(50)
  lastFourDigits     String?            @db.VarChar(4)
  expiryDate         DateTime?          @db.Date
  isDefault          Boolean            @default(false)
  paymentMethodId    String?            @db.Uuid
  PaymentMethod      PaymentMethod?     @relation(fields: [paymentMethodId], references: [id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([paymentMethodId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isDefault])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PaymentSchedule {
  id                 String                @id @default(uuid(7)) @db.Uuid
  status             PaymentScheduleStatus @default(PENDING)
  version            Int                   @default(1)
  createdAt          DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime              @db.Timestamptz(6)
  tenantId           String                @db.Uuid
  deletedAt          DateTime?             @db.Timestamptz(6)
  deletedByActorId   String?               @db.Uuid
  createdByActorId   String?               @db.Uuid
  updatedByActorId   String?               @db.Uuid
  auditCorrelationId String?               @db.Uuid
  dataClassification String                @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  invoiceId          String                @db.Uuid
  installmentNumber  Int
  description        String?               @db.VarChar(255)
  scheduledAmount    Decimal               @db.Decimal(12, 2)
  paidAmount         Decimal               @default(0) @db.Decimal(12, 2)
  remainingAmount    Decimal               @db.Decimal(12, 2)
  dueDate            DateTime              @db.Date
  gracePeriodDays    Int?                  @default(0)
  overdueDate        DateTime?             @db.Date
  paidDate           DateTime?             @db.Timestamptz(6)
  lastPaymentDate    DateTime?             @db.Timestamptz(6)
  lateFeeAmount      Decimal               @default(0) @db.Decimal(12, 2)
  lateFeeRate        Decimal?              @db.Decimal(5, 2)
  penaltyAmount      Decimal               @default(0) @db.Decimal(12, 2)
  dunningLevel       DunningLevel?         @default(FIRST_NOTICE)
  lastDunningDate    DateTime?             @db.Date
  notes              String?
  metadata           Json?
  Tenant             Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Invoice            Invoice               @relation(fields: [tenantId, invoiceId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, invoiceId, installmentNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, dunningLevel])
  @@index([tenantId, invoiceId])
  @@index([tenantId, overdueDate])
  @@index([tenantId, status])
}

model PaymentTerm {
  id                 String            @id @default(uuid(7)) @db.Uuid
  status             PaymentTermStatus @default(ACTIVE)
  version            Int               @default(1)
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @db.Timestamptz(6)
  deletedAt          DateTime?         @db.Timestamptz(6)
  deletedByActorId   String?           @db.Uuid
  createdByActorId   String?           @db.Uuid
  updatedByActorId   String?           @db.Uuid
  auditCorrelationId String?           @db.Uuid
  dataClassification String            @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  name               String            @unique @db.VarChar(100)
  description        String?
  netDays            Int               @default(30)
  discountPercent    Decimal?          @db.Decimal(5, 2)
  discountDays       Int?
  isActive           Boolean           @default(true)
  isDefault          Boolean           @default(false)
  metadata           Json?
  Invoice            Invoice[]

  @@index([auditCorrelationId])
  @@index([dataClassification])
  @@index([isActive])
  @@index([isDefault])
  @@index([netDays])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Payout {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             PayoutStatus     @default(DRAFT)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  payoutNumber       String           @unique
  payoutDate         DateTime         @db.Timestamptz(6)
  amount             Decimal          @db.Decimal(12, 2)
  currency           String           @default("USD")
  feeAmount          Decimal?         @db.Decimal(12, 2)
  netAmount          Decimal          @db.Decimal(12, 2)
  referenceNumber    String?
  description        String?
  notes              String?
  paymentId          String           @db.Uuid
  bankAccountId      String           @db.Uuid
  processedById      String?          @db.Uuid
  completedAt        DateTime?        @db.Timestamptz(6)
  failureReason      String?
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  metadata           Json?
  BankAccount        BankAccount      @relation(fields: [tenantId, bankAccountId], references: [tenantId, id])
  Payment            Payment          @relation(fields: [tenantId, paymentId], references: [tenantId, id])
  Member             Member?          @relation(fields: [tenantId, processedById], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([payoutDate], type: Brin)
  @@index([tenantId, amount])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, bankAccountId])
  @@index([tenantId, createdByActorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, paymentId])
  @@index([tenantId, payoutDate])
  @@index([tenantId, payoutNumber])
  @@index([tenantId, processedById])
  @@index([tenantId, referenceNumber])
  @@index([tenantId, status])
  @@index([tenantId, status, payoutDate])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayrollAdjustment {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  adjustmentNumber   String                 @db.VarChar(50)
  adjustmentType     PayrollAdjustmentType  @default(CORRECTION)
  adjustmentReason   String                 @db.VarChar(255)
  description        String?
  employeeId         String                 @db.Uuid
  employeeNumber     String?                @db.VarChar(50)
  adjustmentAmount   Decimal                @db.Decimal(12, 4)
  adjustmentDate     DateTime               @db.Date
  effectiveDate      DateTime               @db.Date
  isProcessed        Boolean                @default(false)
  processedAt        DateTime?              @db.Timestamptz(6)
  processedBy        String?                @db.Uuid
  requiresApproval   Boolean                @default(true)
  approvedAt         DateTime?              @db.Timestamptz(6)
  approvedBy         String?                @db.Uuid
  glAccount          String?                @db.VarChar(50)
  costCenter         String?                @db.VarChar(50)
  payrollRunId       String?                @db.Uuid
  PayrollRun         PayrollRun?            @relation(fields: [payrollRunId], references: [id])
  Member             Member                 @relation(fields: [tenantId, employeeId], references: [tenantId, id])

  @@unique([tenantId, adjustmentNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, adjustmentDate])
  @@index([tenantId, adjustmentType])
  @@index([tenantId, approvedBy])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, employeeId])
  @@index([tenantId, isProcessed])
  @@index([tenantId, payrollRunId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayrollItem {
  id                 String            @id @default(uuid(7)) @db.Uuid
  status             PayrollItemStatus @default(DRAFT)
  version            Int               @default(1)
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @db.Timestamptz(6)
  tenantId           String            @db.Uuid
  deletedAt          DateTime?         @db.Timestamptz(6)
  deletedByActorId   String?           @db.Uuid
  createdByActorId   String?           @db.Uuid
  updatedByActorId   String?           @db.Uuid
  auditCorrelationId String?           @db.Uuid
  dataClassification String            @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  itemNumber         String            @db.VarChar(50)
  itemType           PayrollItemType   @default(SALARY)
  itemCode           String            @db.VarChar(50)
  itemDescription    String            @db.VarChar(255)
  employeeId         String            @db.Uuid
  employeeNumber     String?           @db.VarChar(50)
  rate               Decimal?          @db.Decimal(12, 4)
  hours              Decimal?          @db.Decimal(8, 2)
  units              Decimal?          @db.Decimal(10, 4)
  amount             Decimal           @db.Decimal(12, 4)
  isTaxable          Boolean           @default(true)
  isStatutory        Boolean           @default(false)
  isVoluntary        Boolean           @default(false)
  calculatedAt       DateTime?         @db.Timestamptz(6)
  approvedAt         DateTime?         @db.Timestamptz(6)
  approvedBy         String?           @db.Uuid
  glAccount          String?           @db.VarChar(50)
  costCenter         String?           @db.VarChar(50)
  department         String?           @db.VarChar(50)
  payrollRunId       String?           @db.Uuid
  PayrollRun         PayrollRun?       @relation(fields: [payrollRunId], references: [id])
  Member             Member            @relation(fields: [tenantId, employeeId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, itemNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedBy])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, calculatedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, employeeId])
  @@index([tenantId, itemCode])
  @@index([tenantId, itemType])
  @@index([tenantId, payrollRunId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayrollPayment {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  paymentNumber      String                 @db.VarChar(50)
  paymentType        PayrollPaymentType     @default(DIRECT_DEPOSIT)
  paymentMethod      PayrollPaymentMethod   @default(BANK_ACCOUNT)
  paymentDate        DateTime               @db.Date
  employeeId         String                 @db.Uuid
  employeeNumber     String?                @db.VarChar(50)
  grossAmount        Decimal                @db.Decimal(12, 4)
  deductionsAmount   Decimal                @db.Decimal(12, 4)
  taxAmount          Decimal                @db.Decimal(12, 4)
  netAmount          Decimal                @db.Decimal(12, 4)
  bankAccountId      String?                @db.Uuid
  routingNumber      String?                @db.VarChar(20)
  accountNumber      String?                @db.VarChar(50)
  checkNumber        String?                @db.VarChar(20)
  checkDate          DateTime?              @db.Date
  isProcessed        Boolean                @default(false)
  processedAt        DateTime?              @db.Timestamptz(6)
  processedBy        String?                @db.Uuid
  payrollRunId       String?                @db.Uuid
  PayrollRun         PayrollRun?            @relation(fields: [payrollRunId], references: [id])
  Member             Member                 @relation(fields: [tenantId, employeeId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, paymentNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, employeeId])
  @@index([tenantId, isProcessed])
  @@index([tenantId, paymentDate])
  @@index([tenantId, paymentType])
  @@index([tenantId, payrollRunId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayrollRun {
  id                                               String              @id @default(uuid(7)) @db.Uuid
  status                                           PayrollRunStatus    @default(DRAFT)
  version                                          Int                 @default(1)
  createdAt                                        DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                                        DateTime            @db.Timestamptz(6)
  tenantId                                         String              @db.Uuid
  deletedAt                                        DateTime?           @db.Timestamptz(6)
  deletedByActorId                                 String?             @db.Uuid
  createdByActorId                                 String?             @db.Uuid
  updatedByActorId                                 String?             @db.Uuid
  auditCorrelationId                               String?             @db.Uuid
  dataClassification                               String              @default("CONFIDENTIAL")
  retentionPolicy                                  RetentionPolicy?
  runNumber                                        String              @unique @db.VarChar(50)
  runType                                          PayrollRunType      @default(REGULAR)
  payPeriodStart                                   DateTime            @db.Date
  payPeriodEnd                                     DateTime            @db.Date
  payDate                                          DateTime            @db.Date
  checkDate                                        DateTime?           @db.Date
  calculatedAt                                     DateTime?           @db.Timestamptz(6)
  approvedAt                                       DateTime?           @db.Timestamptz(6)
  processedAt                                      DateTime?           @db.Timestamptz(6)
  finalizedAt                                      DateTime?           @db.Timestamptz(6)
  totalGrossPay                                    Decimal             @default(0) @db.Decimal(14, 2)
  totalDeductions                                  Decimal             @default(0) @db.Decimal(14, 2)
  totalTaxes                                       Decimal             @default(0) @db.Decimal(14, 2)
  totalNetPay                                      Decimal             @default(0) @db.Decimal(14, 2)
  totalEmployerTax                                 Decimal             @default(0) @db.Decimal(14, 2)
  employeeCount                                    Int                 @default(0)
  processedById                                    String?             @db.Uuid
  approvedById                                     String?             @db.Uuid
  bankFileGenerated                                Boolean             @default(false)
  bankFileName                                     String?             @db.VarChar(255)
  notes                                            String?
  processingNotes                                  String?
  PayStatement                                     PayStatement[]
  PayrollAdjustment                                PayrollAdjustment[]
  PayrollItem                                      PayrollItem[]
  PayrollPayment                                   PayrollPayment[]
  Member_PayrollRun_tenantId_approvedByIdToMember  Member?             @relation("PayrollRun_tenantId_approvedByIdToMember", fields: [tenantId, approvedById], references: [tenantId, id])
  Tenant                                           Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_PayrollRun_tenantId_processedByIdToMember Member?             @relation("PayrollRun_tenantId_processedByIdToMember", fields: [tenantId, processedById], references: [tenantId, id])
  PayrollTax                                       PayrollTax[]

  @@unique([tenantId, id])
  @@unique([tenantId, runNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedById])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, payDate])
  @@index([tenantId, payPeriodStart, payPeriodEnd])
  @@index([tenantId, processedAt])
  @@index([tenantId, processedById])
  @@index([tenantId, runType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PayrollTax {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  taxNumber          String                 @db.VarChar(50)
  taxType            PayrollTaxType         @default(FEDERAL)
  taxCode            String                 @db.VarChar(50)
  taxDescription     String                 @db.VarChar(255)
  employeeId         String                 @db.Uuid
  employeeNumber     String?                @db.VarChar(50)
  taxableWages       Decimal                @db.Decimal(12, 4)
  taxRate            Decimal                @db.Decimal(8, 6)
  taxAmount          Decimal                @db.Decimal(12, 4)
  yearToDateWages    Decimal?               @db.Decimal(12, 4)
  yearToDateTax      Decimal?               @db.Decimal(12, 4)
  taxLimit           Decimal?               @db.Decimal(12, 4)
  wageLimit          Decimal?               @db.Decimal(12, 4)
  taxAuthority       String?                @db.VarChar(100)
  taxJurisdiction    String?                @db.VarChar(100)
  filingFrequency    String?                @db.VarChar(20)
  calculatedAt       DateTime?              @db.Timestamptz(6)
  approvedAt         DateTime?              @db.Timestamptz(6)
  approvedBy         String?                @db.Uuid
  glAccount          String?                @db.VarChar(50)
  liabilityAccount   String?                @db.VarChar(50)
  payrollRunId       String?                @db.Uuid
  PayrollRun         PayrollRun?            @relation(fields: [payrollRunId], references: [id])
  Member             Member                 @relation(fields: [tenantId, employeeId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, taxNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedBy])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, calculatedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, employeeId])
  @@index([tenantId, payrollRunId])
  @@index([tenantId, status])
  @@index([tenantId, taxCode])
  @@index([tenantId, taxType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PerformanceGoal {
  id                  String             @id @default(uuid(7)) @db.Uuid
  status              GoalStatus         @default(ACTIVE)
  version             Int                @default(1)
  createdAt           DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime           @db.Timestamptz(6)
  tenantId            String             @db.Uuid
  deletedAt           DateTime?          @db.Timestamptz(6)
  deletedByActorId    String?            @db.Uuid
  createdByActorId    String?            @db.Uuid
  updatedByActorId    String?            @db.Uuid
  auditCorrelationId  String?            @db.Uuid
  dataClassification  String             @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  workerId            String             @db.Uuid
  performanceReviewId String?            @db.Uuid
  goalType            GoalType           @default(PERFORMANCE)
  category            String             @db.VarChar(50)
  title               String             @db.VarChar(200)
  description         String
  successCriteria     String?
  measurableOutcome   String?
  isSpecific          Boolean            @default(false)
  isMeasurable        Boolean            @default(false)
  isAchievable        Boolean            @default(false)
  isRelevant          Boolean            @default(false)
  isTimeBound         Boolean            @default(false)
  startDate           DateTime           @db.Date
  targetDate          DateTime           @db.Date
  completedDate       DateTime?          @db.Date
  progressPercent     Decimal            @default(0) @db.Decimal(5, 2)
  currentValue        Decimal?           @db.Decimal(12, 2)
  targetValue         Decimal?           @db.Decimal(12, 2)
  unitOfMeasure       String?            @db.VarChar(50)
  priority            TaskPriority       @default(MEDIUM)
  weight              Decimal            @default(1.0) @db.Decimal(3, 2)
  finalRating         PerformanceRating?
  managerAssessment   String?
  selfAssessment      String?
  isDevelopmentGoal   Boolean            @default(false)
  skillsToImprove     Json?
  resourcesNeeded     Json?
  approvedAt          DateTime?          @db.Timestamptz(6)
  approvedById        String?            @db.Uuid
  lastReviewedAt      DateTime?          @db.Timestamptz(6)
  reviewNotes         String?
  Member              Member?            @relation(fields: [tenantId, approvedById], references: [tenantId, id])
  Tenant              Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  PerformanceReview   PerformanceReview? @relation(fields: [tenantId, performanceReviewId], references: [tenantId, id])
  Worker              Worker             @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, category])
  @@index([tenantId, dataClassification])
  @@index([tenantId, finalRating])
  @@index([tenantId, goalType])
  @@index([tenantId, performanceReviewId])
  @@index([tenantId, priority])
  @@index([tenantId, startDate])
  @@index([tenantId, status])
  @@index([tenantId, targetDate])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PerformanceReview {
  id                                                       String             @id @default(uuid(7)) @db.Uuid
  status                                                   ReviewStatus       @default(DRAFT)
  version                                                  Int                @default(1)
  createdAt                                                DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt                                                DateTime           @db.Timestamptz(6)
  tenantId                                                 String             @db.Uuid
  deletedAt                                                DateTime?          @db.Timestamptz(6)
  deletedByActorId                                         String?            @db.Uuid
  createdByActorId                                         String?            @db.Uuid
  updatedByActorId                                         String?            @db.Uuid
  auditCorrelationId                                       String?            @db.Uuid
  dataClassification                                       String             @default("CONFIDENTIAL")
  retentionPolicy                                          RetentionPolicy?
  workerId                                                 String             @db.Uuid
  reviewerId                                               String             @db.Uuid
  reviewPeriodId                                           String?            @db.Uuid
  reviewType                                               String             @db.VarChar(50)
  reviewCycle                                              String             @db.VarChar(20)
  reviewPeriodStart                                        DateTime           @db.Date
  reviewPeriodEnd                                          DateTime           @db.Date
  dueDate                                                  DateTime           @db.Date
  completedDate                                            DateTime?          @db.Date
  title                                                    String             @db.VarChar(200)
  description                                              String?
  objectives                                               Json?
  competencies                                             Json?
  overallRating                                            PerformanceRating?
  goalAchievement                                          PerformanceRating?
  competencyRating                                         PerformanceRating?
  selfAssessment                                           String?
  selfRating                                               PerformanceRating?
  managerFeedback                                          String?
  strengths                                                String?
  areasForImprovement                                      String?
  developmentPlan                                          Json?
  careerAspirations                                        String?
  trainingNeeds                                            Json?
  submittedAt                                              DateTime?          @db.Timestamptz(6)
  approvedAt                                               DateTime?          @db.Timestamptz(6)
  approvedById                                             String?            @db.Uuid
  hrReviewedAt                                             DateTime?          @db.Timestamptz(6)
  hrReviewedById                                           String?            @db.Uuid
  hrComments                                               String?
  calibrationSession                                       String?            @db.VarChar(100)
  calibratedRating                                         PerformanceRating?
  calibrationNotes                                         String?
  PerformanceGoal                                          PerformanceGoal[]
  Member_PerformanceReview_tenantId_approvedByIdToMember   Member?            @relation("PerformanceReview_tenantId_approvedByIdToMember", fields: [tenantId, approvedById], references: [tenantId, id])
  Tenant                                                   Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_PerformanceReview_tenantId_hrReviewedByIdToMember Member?            @relation("PerformanceReview_tenantId_hrReviewedByIdToMember", fields: [tenantId, hrReviewedById], references: [tenantId, id])
  Member_PerformanceReview_tenantId_reviewerIdToMember     Member             @relation("PerformanceReview_tenantId_reviewerIdToMember", fields: [tenantId, reviewerId], references: [tenantId, id])
  Worker                                                   Worker             @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, reviewCycle, reviewType])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, dueDate])
  @@index([tenantId, overallRating])
  @@index([tenantId, reviewCycle])
  @@index([tenantId, reviewType])
  @@index([tenantId, reviewerId])
  @@index([tenantId, status])
  @@index([tenantId, workerId])
}

model Permission {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             String           @default("ACTIVE")
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  code               String           @unique(map: "Permission_code_unique") @db.Citext
  name               String           @db.VarChar(255)
  description        String?
  scope              PermissionScope  @default(TENANT)
  category           String           @db.VarChar(100)
  subcategory        String?          @db.VarChar(100)
  isSystemPermission Boolean          @default(false)
  requiresMfa        Boolean          @default(false)
  riskLevel          ImpactLevel      @default(LOW)
  parentPermissionId String?          @db.Uuid
  dependsOnCodes     String[]         @db.VarChar(100)
  isActive           Boolean          @default(true)
  metadata           Json?
  Permission         Permission?      @relation("PermissionToPermission", fields: [parentPermissionId], references: [id], onDelete: NoAction)
  other_Permission   Permission[]     @relation("PermissionToPermission")
  RolePermission     RolePermission[]

  @@index([auditCorrelationId])
  @@index([category])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([isActive])
  @@index([isSystemPermission])
  @@index([parentPermissionId])
  @@index([riskLevel])
  @@index([scope])
  @@index([status])
}

model Person {
  id                   String                @id @default(uuid(7)) @db.Uuid
  status               PersonStatus          @default(ACTIVE)
  version              Int                   @default(1)
  createdAt            DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime              @db.Timestamptz(6)
  deletedAt            DateTime?             @db.Timestamptz(6)
  deletedByActorId     String?               @db.Uuid
  createdByActorId     String?               @db.Uuid
  updatedByActorId     String?               @db.Uuid
  globalId             String                @unique @db.Uuid
  auditCorrelationId   String?               @db.Uuid
  dataClassification   String                @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  personNumber         String                @unique @db.VarChar(20)
  firstName            String                @db.VarChar(100)
  lastName             String                @db.VarChar(100)
  dateOfBirth          DateTime?             @db.Date
  socialSecurityNumber String?               @db.VarChar(11)
  gender               GenderType?
  maritalStatus        MaritalStatus?
  ethnicity            String?               @db.VarChar(50)
  nationality          String?               @db.VarChar(50)
  isDeceased           Boolean               @default(false)
  PersonAddress        PersonAddress[]
  PersonContactMethod  PersonContactMethod[]
  PersonDocument       PersonDocument[]
  PersonName           PersonName[]
  Worker               Worker[]

  @@index([auditCorrelationId])
  @@index([dataClassification])
  @@index([dateOfBirth])
  @@index([firstName, lastName])
  @@index([gender])
  @@index([isDeceased])
  @@index([maritalStatus])
  @@index([nationality])
  @@index([personNumber])
  @@index([socialSecurityNumber])
}

model PersonAddress {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  personId           String                 @db.Uuid
  addressType        AddressType
  address1           String                 @db.VarChar(255)
  address2           String?                @db.VarChar(255)
  city               String                 @db.VarChar(100)
  state              String                 @db.VarChar(50)
  postalCode         String                 @db.VarChar(20)
  country            String                 @db.VarChar(50)
  latitude           Decimal?               @db.Decimal(10, 8)
  longitude          Decimal?               @db.Decimal(11, 8)
  effectiveDate      DateTime               @db.Date
  isPrimary          Boolean                @default(false)
  Person             Person                 @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, addressType, effectiveDate])
  @@index([addressType])
  @@index([city, state])
  @@index([dataClassification])
  @@index([personId, isPrimary])
  @@index([postalCode])
}

model PersonContactMethod {
  id                  String                 @id @default(uuid(7)) @db.Uuid
  status              HRWorkforceChildStatus @default(ACTIVE)
  version             Int                    @default(1)
  createdAt           DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime               @db.Timestamptz(6)
  deletedAt           DateTime?              @db.Timestamptz(6)
  deletedByActorId    String?                @db.Uuid
  createdByActorId    String?                @db.Uuid
  updatedByActorId    String?                @db.Uuid
  auditCorrelationId  String?                @db.Uuid
  dataClassification  String                 @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  personId            String                 @db.Uuid
  contactType         ContactType
  contactValue        String                 @db.VarChar(255)
  isPrimary           Boolean                @default(false)
  isVerified          Boolean                @default(false)
  canReceiveMarketing Boolean                @default(false)
  effectiveDate       DateTime               @db.Date
  Person              Person                 @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, contactType, contactValue])
  @@index([contactType])
  @@index([dataClassification])
  @@index([isVerified])
  @@index([personId, isPrimary])
}

model PersonDocument {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  personId           String                 @db.Uuid
  documentType       DocumentType
  documentNumber     String                 @db.VarChar(100)
  issuingAuthority   String?                @db.VarChar(100)
  issueDate          DateTime?              @db.Date
  expirationDate     DateTime?              @db.Date
  isVerified         Boolean                @default(false)
  fileObjectId       String?                @db.Uuid
  complianceFlags    Json?
  Person             Person                 @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, documentType, documentNumber])
  @@index([dataClassification])
  @@index([documentType])
  @@index([expirationDate])
  @@index([isVerified])
  @@index([personId])
}

model PersonName {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  personId           String                 @db.Uuid
  nameType           NameType
  firstName          String                 @db.VarChar(100)
  lastName           String                 @db.VarChar(100)
  middleName         String?                @db.VarChar(100)
  effectiveDate      DateTime               @db.Date
  isPrimary          Boolean                @default(false)
  verificationStatus VerificationStatus     @default(PENDING)
  Person             Person                 @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, nameType, effectiveDate])
  @@index([dataClassification])
  @@index([firstName, lastName])
  @@index([nameType])
  @@index([personId, isPrimary])
  @@index([verificationStatus])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Position {
  id                                                                           String               @id @default(uuid(7)) @db.Uuid
  status                                                                       PositionStatus       @default(ACTIVE)
  version                                                                      Int                  @default(1)
  createdAt                                                                    DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt                                                                    DateTime             @db.Timestamptz(6)
  tenantId                                                                     String               @db.Uuid
  deletedAt                                                                    DateTime?            @db.Timestamptz(6)
  deletedByActorId                                                             String?              @db.Uuid
  createdByActorId                                                             String?              @db.Uuid
  updatedByActorId                                                             String?              @db.Uuid
  auditCorrelationId                                                           String?              @db.Uuid
  dataClassification                                                           String               @default("INTERNAL")
  retentionPolicy                                                              RetentionPolicy?
  positionNumber                                                               String               @unique @db.VarChar(20)
  positionTitle                                                                String               @db.VarChar(100)
  department                                                                   String?              @db.VarChar(100)
  jobProfileId                                                                 String?              @db.Uuid
  gradeId                                                                      String?              @db.Uuid
  reportsToId                                                                  String?              @db.Uuid
  isSupervisor                                                                 Boolean              @default(false)
  isManager                                                                    Boolean              @default(false)
  isExecutive                                                                  Boolean              @default(false)
  headcount                                                                    Int                  @default(1)
  fte                                                                          Decimal              @default(1.0) @db.Decimal(4, 2)
  budgetedSalary                                                               Decimal?             @db.Decimal(12, 2)
  locationId                                                                   String?              @db.Uuid
  workSchedule                                                                 WorkScheduleType?    @default(FULL_TIME)
  isRemoteEligible                                                             Boolean              @default(false)
  travelRequired                                                               Int?                 @default(0)
  effectiveDate                                                                DateTime             @db.Date
  endDate                                                                      DateTime?            @db.Date
  approvedByActorId                                                            String?              @db.Uuid
  approvedAt                                                                   DateTime?            @db.Timestamptz(6)
  Tenant                                                                       Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Grade                                                                        Grade?               @relation(fields: [tenantId, gradeId], references: [tenantId, id])
  JobProfile                                                                   JobProfile?          @relation(fields: [tenantId, jobProfileId], references: [tenantId, id])
  Position                                                                     Position?            @relation("PositionToPosition", fields: [tenantId, reportsToId], references: [tenantId, id])
  other_Position                                                               Position[]           @relation("PositionToPosition")
  PositionAssignment_PositionAssignment_tenantId_positionIdToPosition          PositionAssignment[] @relation("PositionAssignment_tenantId_positionIdToPosition")
  PositionAssignment_PositionAssignment_tenantId_reportsToPositionIdToPosition PositionAssignment[] @relation("PositionAssignment_tenantId_reportsToPositionIdToPosition")
  PositionBudget                                                               PositionBudget[]

  @@unique([tenantId, id])
  @@unique([tenantId, positionNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, department])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, fte])
  @@index([tenantId, gradeId])
  @@index([tenantId, isSupervisor])
  @@index([tenantId, jobProfileId])
  @@index([tenantId, locationId])
  @@index([tenantId, positionTitle])
  @@index([tenantId, reportsToId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PositionAssignment {
  id                                                                 String                 @id @default(uuid(7)) @db.Uuid
  status                                                             HRWorkforceChildStatus @default(ACTIVE)
  version                                                            Int                    @default(1)
  createdAt                                                          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                                                          DateTime               @db.Timestamptz(6)
  tenantId                                                           String                 @db.Uuid
  deletedAt                                                          DateTime?              @db.Timestamptz(6)
  deletedByActorId                                                   String?                @db.Uuid
  createdByActorId                                                   String?                @db.Uuid
  updatedByActorId                                                   String?                @db.Uuid
  auditCorrelationId                                                 String?                @db.Uuid
  dataClassification                                                 String                 @default("CONFIDENTIAL")
  retentionPolicy                                                    RetentionPolicy?
  workerId                                                           String                 @db.Uuid
  positionId                                                         String                 @db.Uuid
  assignmentType                                                     AssignmentType         @default(PRIMARY)
  assignmentStatus                                                   EmploymentStatus       @default(ACTIVE)
  startDate                                                          DateTime               @db.Date
  endDate                                                            DateTime?              @db.Date
  allocationPercent                                                  Decimal?               @default(100.0) @db.Decimal(5, 2)
  isPrimary                                                          Boolean                @default(true)
  reportsToPositionId                                                String?                @db.Uuid
  reportingLevel                                                     Int?                   @default(1)
  assignmentReason                                                   String?                @db.VarChar(100)
  assignmentNotes                                                    String?
  effectiveDate                                                      DateTime               @db.Date
  endDateEffective                                                   DateTime?              @db.Date
  Tenant                                                             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Position_PositionAssignment_tenantId_positionIdToPosition          Position               @relation("PositionAssignment_tenantId_positionIdToPosition", fields: [tenantId, positionId], references: [tenantId, id], onDelete: Cascade)
  Position_PositionAssignment_tenantId_reportsToPositionIdToPosition Position?              @relation("PositionAssignment_tenantId_reportsToPositionIdToPosition", fields: [tenantId, reportsToPositionId], references: [tenantId, id])
  Worker                                                             Worker                 @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, positionId, startDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assignmentStatus])
  @@index([tenantId, assignmentType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, endDate])
  @@index([tenantId, isPrimary])
  @@index([tenantId, positionId])
  @@index([tenantId, reportsToPositionId])
  @@index([tenantId, startDate])
  @@index([tenantId, workerId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PositionBudget {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             HRWorkforceChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  positionId         String                 @db.Uuid
  budgetYear         Int
  budgetPeriod       BudgetPeriod
  baseSalary         Decimal                @db.Decimal(12, 2)
  benefits           Decimal                @default(0) @db.Decimal(12, 2)
  bonuses            Decimal                @default(0) @db.Decimal(12, 2)
  overtime           Decimal                @default(0) @db.Decimal(12, 2)
  totalBudget        Decimal                @db.Decimal(12, 2)
  actualSpent        Decimal                @default(0) @db.Decimal(12, 2)
  variance           Decimal                @default(0) @db.Decimal(12, 2)
  budgetStatus       PositionBudgetStatus   @default(DRAFT)
  approvedByActorId  String?                @db.Uuid
  approvedAt         DateTime?              @db.Timestamptz(6)
  effectiveDate      DateTime               @db.Date
  endDate            DateTime?              @db.Date
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Position           Position               @relation(fields: [tenantId, positionId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, positionId, budgetYear, budgetPeriod])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedByActorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, budgetPeriod])
  @@index([tenantId, budgetStatus])
  @@index([tenantId, budgetYear])
  @@index([tenantId, dataClassification])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, positionId])
  @@index([tenantId, totalBudget])
  @@index([tenantId, variance])
}

model PriceList {
  id                 String            @id @default(uuid(7)) @db.Uuid
  status             CatalogStatus     @default(ACTIVE)
  version            Int               @default(1)
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @db.Timestamptz(6)
  deletedAt          DateTime?         @db.Timestamptz(6)
  deletedByActorId   String?           @db.Uuid
  createdByActorId   String?           @db.Uuid
  updatedByActorId   String?           @db.Uuid
  auditCorrelationId String?           @db.Uuid
  dataClassification String            @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  name               String            @db.VarChar(255)
  description        String?
  currency           String            @db.VarChar(3)
  priceListType      String            @db.VarChar(50)
  isActive           Boolean           @default(true)
  effectiveDate      DateTime?         @db.Date
  expiryDate         DateTime?         @db.Date
  discountPercent    Decimal?          @db.Decimal(5, 2)
  markupPercent      Decimal?          @db.Decimal(5, 2)
  notes              String?
  PriceListItem      PriceListItem[]
  TenantPriceList    TenantPriceList[]

  @@unique([name, currency])
  @@index([auditCorrelationId])
  @@index([createdAt], type: Brin)
  @@index([currency])
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([isActive, effectiveDate])
  @@index([priceListType])
  @@index([status])
}

model PriceListItem {
  id                  String                @id @default(uuid(7)) @db.Uuid
  status              String                @default("ACTIVE")
  version             Int                   @default(1)
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @db.Timestamptz(6)
  deletedAt           DateTime?             @db.Timestamptz(6)
  deletedByActorId    String?               @db.Uuid
  createdByActorId    String?               @db.Uuid
  updatedByActorId    String?               @db.Uuid
  auditCorrelationId  String?               @db.Uuid
  dataClassification  String                @default("INTERNAL")
  retentionPolicy     RetentionPolicy?
  sku                 String
  name                String
  description         String?
  unitPrice           Decimal               @db.Decimal(12, 4)
  currency            String                @db.VarChar(3)
  unitOfMeasure       String?
  isActive            Boolean               @default(true)
  priceListId         String                @db.Uuid
  EstimateLineItem    EstimateLineItem[]
  OpportunityLineItem OpportunityLineItem[]
  PriceList           PriceList             @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  QuoteLineItem       QuoteLineItem[]
  TenantPriceOverride TenantPriceOverride[]

  @@unique([priceListId, sku])
  @@index([auditCorrelationId])
  @@index([createdAt], type: Brin)
  @@index([currency])
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([isActive])
  @@index([priceListId, currency])
  @@index([priceListId])
  @@index([priceListId, isActive])
  @@index([sku])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Project {
  id                                                      String                        @id @default(uuid(7)) @db.Uuid
  status                                                  ProjectStatus                 @default(PLANNING)
  version                                                 Int                           @default(1)
  createdAt                                               DateTime                      @default(now()) @db.Timestamptz(6)
  updatedAt                                               DateTime                      @db.Timestamptz(6)
  tenantId                                                String                        @db.Uuid
  deletedAt                                               DateTime?                     @db.Timestamptz(6)
  deletedByActorId                                        String?                       @db.Uuid
  createdByActorId                                        String?                       @db.Uuid
  updatedByActorId                                        String?                       @db.Uuid
  globalId                                                String                        @unique @db.Uuid
  auditCorrelationId                                      String?                       @db.Uuid
  dataClassification                                      String                        @default("INTERNAL")
  retentionPolicy                                         RetentionPolicy?
  documentGroupId                                         String                        @db.Uuid
  externalNumber                                          String                        @db.Citext
  estimateId                                              String?                       @db.Uuid
  invoiceId                                               String?                       @db.Uuid
  clientAccountId                                         String?                       @db.Uuid
  clientContactId                                         String?                       @db.Uuid
  contractTemplateId                                      String?                       @db.Uuid
  termsTemplateId                                         String?                       @db.Uuid
  approvedByMemberId                                      String?                       @db.Uuid
  finalApprovedByMemberId                                 String?                       @db.Uuid
  approvedAt                                              DateTime?                     @db.Timestamptz(6)
  finalApprovedAt                                         DateTime?                     @db.Timestamptz(6)
  declineReason                                           String?
  approvedByActorId                                       String?                       @db.Uuid
  finalApprovedByActorId                                  String?                       @db.Uuid
  approvalCorrelationId                                   String?                       @db.Uuid
  approvalNotes                                           String?
  subtotal                                                Decimal?                      @db.Decimal(12, 2)
  discountAmount                                          Decimal?                      @db.Decimal(12, 2)
  taxAmount                                               Decimal?                      @db.Decimal(12, 2)
  grandTotal                                              Decimal?                      @db.Decimal(12, 2)
  budgetedCost                                            Decimal?                      @db.Decimal(14, 2)
  actualCost                                              Decimal?                      @db.Decimal(14, 2)
  departmentId                                            String?                       @db.Uuid
  orgUnitId                                               String?                       @db.Uuid
  costCenterId                                            String?                       @db.Uuid
  locationId                                              String?                       @db.Uuid
  priority                                                TaskPriority                  @default(MEDIUM)
  riskClassification                                      ImpactLevel                   @default(LOW)
  complexityScore                                         Decimal?                      @db.Decimal(3, 2)
  strategicImportance                                     String?                       @db.VarChar(20)
  name                                                    String
  description                                             String?
  startDate                                               DateTime?                     @db.Date
  endDate                                                 DateTime?                     @db.Date
  APBillLine                                              APBillLine[]
  ApprovalRule                                            ApprovalRule[]
  ChangeOrder                                             ChangeOrder[]
  Channel                                                 Channel[]
  DailyLog                                                DailyLog[]
  ESignatureEnvelope                                      ESignatureEnvelope[]
  Estimate_Estimate_tenantId_approvedProjectIdToProject   Estimate?                     @relation("Estimate_tenantId_approvedProjectIdToProject")
  FileObject                                              FileObject[]
  Inspection                                              Inspection[]
  Invoice                                                 Invoice?
  JournalEntry                                            JournalEntry[]
  JournalLine                                             JournalLine[]
  Milestone                                               Milestone[]
  Member_Project_tenantId_approvedByMemberIdToMember      Member?                       @relation("Project_tenantId_approvedByMemberIdToMember", fields: [tenantId, approvedByMemberId], references: [tenantId, id])
  Account                                                 Account?                      @relation(fields: [tenantId, clientAccountId], references: [tenantId, id], onDelete: NoAction)
  Contact                                                 Contact?                      @relation(fields: [tenantId, clientContactId], references: [tenantId, id])
  ContractTemplate                                        ContractTemplate?             @relation(fields: [tenantId, contractTemplateId], references: [tenantId, id])
  CostCenter                                              CostCenter?                   @relation(fields: [tenantId, costCenterId], references: [tenantId, id])
  Department                                              Department?                   @relation(fields: [tenantId, departmentId], references: [tenantId, id])
  DocumentGroup                                           DocumentGroup                 @relation(fields: [tenantId, documentGroupId], references: [tenantId, id])
  Estimate_Project_tenantId_estimateIdToEstimate          Estimate?                     @relation("Project_tenantId_estimateIdToEstimate", fields: [tenantId, estimateId], references: [tenantId, id])
  Member_Project_tenantId_finalApprovedByMemberIdToMember Member?                       @relation("Project_tenantId_finalApprovedByMemberIdToMember", fields: [tenantId, finalApprovedByMemberId], references: [tenantId, id])
  Location                                                Location?                     @relation(fields: [tenantId, locationId], references: [tenantId, id])
  OrgUnit                                                 OrgUnit?                      @relation(fields: [tenantId, orgUnitId], references: [tenantId, id])
  TermsTemplate                                           TermsTemplate?                @relation(fields: [tenantId, termsTemplateId], references: [tenantId, id])
  ProjectBudgetLine                                       ProjectBudgetLine[]
  ProjectDocument                                         ProjectDocument[]
  ProjectExternalAccess                                   ProjectExternalAccess[]
  ProjectFinancialSnapshot                                ProjectFinancialSnapshot[]
  ProjectInventoryTransaction                             ProjectInventoryTransaction[]
  ProjectIssue                                            ProjectIssue[]
  ProjectLocation                                         ProjectLocation[]
  ProjectMember                                           ProjectMember[]
  ProjectNote                                             ProjectNote[]
  ProjectPhase                                            ProjectPhase[]
  ProjectReport                                           ProjectReport[]
  ProjectRisk                                             ProjectRisk[]
  ProjectTask                                             ProjectTask[]
  ProjectTaskAssignment                                   ProjectTaskAssignment[]
  PunchList                                               PunchList[]
  PurchaseOrderLine                                       PurchaseOrderLine[]
  RFI                                                     RFI[]
  RequestForQuote                                         RequestForQuote[]
  ResourceAllocation                                      ResourceAllocation[]
  Schedule                                                Schedule[]
  Submittal                                               Submittal[]
  Task                                                    Task[]
  TaskAssignment                                          TaskAssignment[]
  Timesheet                                               Timesheet[]
  WBSItem                                                 WBSItem[]
  weather_alerts                                          weather_alerts[]
  weather_incidents                                       weather_incidents[]
  weather_watches                                         weather_watches[]

  // RoomPlan relationships
  RoomScanSession RoomScanSession[]
  RoomModel       RoomModel[]

  // Actor audit relationships
  CreatedByActor Actor? @relation("ProjectCreatedByActor", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("ProjectUpdatedByActor", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor? @relation("ProjectDeletedByActor", fields: [deletedByActorId], references: [id])

  @@unique([tenantId, estimateId])
  @@unique([tenantId, id])
  @@unique([tenantId, invoiceId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvalCorrelationId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, clientAccountId])
  @@index([tenantId, clientContactId])
  @@index([tenantId, contractTemplateId])
  @@index([tenantId, costCenterId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, departmentId])
  @@index([tenantId, documentGroupId])
  @@index([tenantId, estimateId])
  @@index([tenantId, invoiceId])
  @@index([tenantId, locationId])
  @@index([tenantId, orgUnitId])
  @@index([tenantId, priority])
  @@index([tenantId, riskClassification])
  @@index([tenantId, status])
  @@index([tenantId, status, updatedAt])
  @@index([tenantId, strategicImportance])
  @@index([tenantId, termsTemplateId])
  @@index([tenantId, deletedAt], map: "idx_project_tenant_deleted")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectBudgetLine {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  budgetCategory     String
  costCode           String
  budgetedAmount     Decimal            @db.Decimal(12, 2)
  actualAmount       Decimal            @default(0) @db.Decimal(12, 2)
  projectId          String             @db.Uuid
  taskId             String?            @db.Uuid
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  TimesheetEntry     TimesheetEntry[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, budgetCategory])
  @@index([tenantId, costCode])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId, costCode])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectDocument {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  description        String?
  fileUrl            String
  fileType           String?
  uploadedAt         DateTime           @default(now()) @db.Timestamptz(6)
  uploaderId         String?            @db.Uuid
  attachmentId       String?            @db.Uuid
  projectId          String             @db.Uuid
  Attachment         Attachment?        @relation(fields: [tenantId, attachmentId], references: [tenantId, id])
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  Member             Member?            @relation(fields: [tenantId, uploaderId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, attachmentId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, fileType])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
  @@index([tenantId, status, updatedAt])
  @@index([tenantId, uploadedAt])
  @@index([tenantId, uploaderId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectExternalAccess {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  email              String
  role               String
  expiresAt          DateTime?          @db.Timestamptz(6)
  invitedAt          DateTime           @default(now()) @db.Timestamptz(6)
  projectId          String             @db.Uuid
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, projectId, email])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, email])
  @@index([tenantId, expiresAt])
  @@index([tenantId, invitedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, role])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectFinancialSnapshot {
  id                    String             @id @default(uuid(7)) @db.Uuid
  status                ProjectChildStatus @default(ACTIVE)
  version               Int                @default(1)
  createdAt             DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime           @db.Timestamptz(6)
  tenantId              String             @db.Uuid
  deletedAt             DateTime?          @db.Timestamptz(6)
  deletedByActorId      String?            @db.Uuid
  createdByActorId      String?            @db.Uuid
  updatedByActorId      String?            @db.Uuid
  auditCorrelationId    String?            @db.Uuid
  dataClassification    String             @default("INTERNAL")
  retentionPolicy       RetentionPolicy?
  estimateOriginalTotal Decimal            @db.Decimal(14, 2)
  changeOrderDeltaTotal Decimal            @default(0) @db.Decimal(14, 2)
  actualCostsToDate     Decimal            @default(0) @db.Decimal(14, 2)
  totalLaborHours       Decimal            @default(0) @db.Decimal(10, 2)
  totalLaborCost        Decimal            @default(0) @db.Decimal(14, 2)
  snapshotDate          DateTime           @db.Timestamptz(6)
  snapshotReason        String
  projectId             String             @db.Uuid
  Project               Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, projectId, snapshotDate])
  @@index([tenantId, snapshotDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectInventoryTransaction {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  projectId          String             @db.Uuid
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectIssue {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  description        String?
  severity           ImpactLevel        @default(MEDIUM)
  issueStatus        WorkItemStatus     @default(OPEN)
  reportedAt         DateTime           @default(now()) @db.Timestamptz(6)
  resolvedAt         DateTime?          @db.Timestamptz(6)
  assigneeId         String?            @db.Uuid
  projectId          String             @db.Uuid
  Member             Member?            @relation(fields: [tenantId, assigneeId], references: [tenantId, id])
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assigneeId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, issueStatus])
  @@index([tenantId, projectId])
  @@index([tenantId, reportedAt])
  @@index([tenantId, resolvedAt])
  @@index([tenantId, severity])
  @@index([tenantId, status])
  @@index([tenantId, status, updatedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectLedgerEntry {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectLocation {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  name               String
  address            String?
  coordinates        String?
  locationType       LocationType       @default(SITE)
  isPrimary          Boolean            @default(false)
  description        String?
  projectId          String             @db.Uuid
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, projectId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isPrimary])
  @@index([tenantId, locationType])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectMember {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  memberId           String             @db.Uuid
  role               String
  joinedAt           DateTime           @default(now()) @db.Timestamptz(6)
  leftAt             DateTime?          @db.Timestamptz(6)
  projectId          String             @db.Uuid
  Member             Member             @relation(fields: [tenantId, memberId], references: [tenantId, id])
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, projectId, memberId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, joinedAt])
  @@index([tenantId, leftAt])
  @@index([tenantId, memberId])
  @@index([tenantId, projectId])
  @@index([tenantId, role])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectNote {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  projectId          String             @db.Uuid
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectPhase {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  name               String
  description        String?
  startDate          DateTime?          @db.Date
  endDate            DateTime?          @db.Date
  sortOrder          Int                @default(0)
  completion         Decimal?           @db.Decimal(5, 2)
  projectId          String             @db.Uuid
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  ProjectTask        ProjectTask[]
  WBSItem            WBSItem[]

  @@unique([tenantId, id])
  @@unique([tenantId, projectId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, sortOrder])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectReport {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  projectId          String             @db.Uuid
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectRisk {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             RiskStatus       @default(IDENTIFIED)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  description        String?
  probability        Int              @default(0)
  impact             ImpactLevel      @default(MEDIUM)
  mitigationPlan     String?
  identifiedAt       DateTime         @default(now()) @db.Timestamptz(6)
  ownerId            String?          @db.Uuid
  projectId          String           @db.Uuid
  Member             Member?          @relation(fields: [tenantId, ownerId], references: [tenantId, id])
  Project            Project          @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, identifiedAt])
  @@index([tenantId, impact])
  @@index([tenantId, ownerId])
  @@index([tenantId, probability])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
  @@index([tenantId, status, updatedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectTask {
  id                                                                                  String                     @id @default(uuid(7)) @db.Uuid
  status                                                                              WorkItemStatus             @default(OPEN)
  version                                                                             Int                        @default(1)
  createdAt                                                                           DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                                                                           DateTime                   @db.Timestamptz(6)
  tenantId                                                                            String                     @db.Uuid
  deletedAt                                                                           DateTime?                  @db.Timestamptz(6)
  deletedByActorId                                                                    String?                    @db.Uuid
  createdByActorId                                                                    String?                    @db.Uuid
  updatedByActorId                                                                    String?                    @db.Uuid
  auditCorrelationId                                                                  String?                    @db.Uuid
  dataClassification                                                                  String                     @default("INTERNAL")
  retentionPolicy                                                                     RetentionPolicy?
  name                                                                                String
  description                                                                         String?
  priority                                                                            TaskPriority               @default(MEDIUM)
  budgetedHours                                                                       Decimal?                   @db.Decimal(8, 2)
  actualHours                                                                         Decimal?                   @db.Decimal(8, 2)
  budgetedAmount                                                                      Decimal?                   @db.Decimal(12, 2)
  actualCostToDate                                                                    Decimal?                   @db.Decimal(12, 2)
  plannedStartDate                                                                    DateTime?                  @db.Date
  plannedEndDate                                                                      DateTime?                  @db.Date
  actualStartDate                                                                     DateTime?                  @db.Date
  actualEndDate                                                                       DateTime?                  @db.Date
  sourceEstimateLineItemId                                                            String?                    @db.Uuid
  sourceChangeOrderLineId                                                             String?                    @db.Uuid
  phaseId                                                                             String?                    @db.Uuid
  wbsItemId                                                                           String?                    @db.Uuid
  projectId                                                                           String                     @db.Uuid
  EstimateLineItem_EstimateLineItem_tenantId_taskIdToProjectTask                      EstimateLineItem[]         @relation("EstimateLineItem_tenantId_taskIdToProjectTask")
  InvoiceLineItem                                                                     InvoiceLineItem[]
  ProjectPhase                                                                        ProjectPhase?              @relation(fields: [tenantId, phaseId], references: [tenantId, id])
  Project                                                                             Project                    @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  ChangeOrderLine                                                                     ChangeOrderLine?           @relation(fields: [tenantId, sourceChangeOrderLineId], references: [tenantId, id])
  EstimateLineItem_ProjectTask_tenantId_sourceEstimateLineItemIdToEstimateLineItem    EstimateLineItem?          @relation("ProjectTask_tenantId_sourceEstimateLineItemIdToEstimateLineItem", fields: [tenantId, sourceEstimateLineItemId], references: [tenantId, id])
  WBSItem                                                                             WBSItem?                   @relation(fields: [tenantId, wbsItemId], references: [tenantId, id])
  ProjectTaskAssignment                                                               ProjectTaskAssignment[]
  ProjectTaskAttachment                                                               ProjectTaskAttachment[]
  ProjectTaskChecklistItem                                                            ProjectTaskChecklistItem[]
  ProjectTaskComment                                                                  ProjectTaskComment[]
  ProjectTaskDependency_ProjectTaskDependency_tenantId_predecessorTaskIdToProjectTask ProjectTaskDependency[]    @relation("ProjectTaskDependency_tenantId_predecessorTaskIdToProjectTask")
  ProjectTaskDependency_ProjectTaskDependency_tenantId_successorTaskIdToProjectTask   ProjectTaskDependency[]    @relation("ProjectTaskDependency_tenantId_successorTaskIdToProjectTask")
  TimesheetEntry                                                                      TimesheetEntry[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, phaseId])
  @@index([tenantId, plannedStartDate])
  @@index([tenantId, projectId])
  @@index([tenantId, projectId, status])
  @@index([tenantId, sourceChangeOrderLineId])
  @@index([tenantId, sourceEstimateLineItemId])
  @@index([tenantId, status])
  @@index([tenantId, wbsItemId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectTaskAssignment {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  assigneeId         String             @db.Uuid
  role               String?
  allocationPercent  Decimal?           @db.Decimal(5, 2)
  startDate          DateTime?          @db.Date
  endDate            DateTime?          @db.Date
  assignedDate       DateTime           @default(now()) @db.Timestamptz(6)
  projectId          String             @db.Uuid
  taskId             String             @db.Uuid
  Member             Member             @relation(fields: [tenantId, assigneeId], references: [tenantId, id])
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  ProjectTask        ProjectTask        @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, taskId, assigneeId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assignedDate])
  @@index([tenantId, assigneeId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, endDate])
  @@index([tenantId, projectId])
  @@index([tenantId, startDate])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectTaskAttachment {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  fileName           String
  fileUrl            String
  fileType           String?
  fileSize           Int?
  uploadedAt         DateTime           @default(now()) @db.Timestamptz(6)
  uploadedById       String             @db.Uuid
  taskId             String             @db.Uuid
  attachmentId       String?            @db.Uuid
  Attachment         Attachment?        @relation(fields: [tenantId, attachmentId], references: [tenantId, id])
  ProjectTask        ProjectTask        @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, fileType])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
  @@index([tenantId, uploadedAt])
  @@index([tenantId, uploadedById])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectTaskChecklistItem {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  description        String?
  isCompleted        Boolean            @default(false)
  completedAt        DateTime?          @db.Timestamptz(6)
  sortOrder          Int                @default(0)
  taskId             String             @db.Uuid
  ProjectTask        ProjectTask        @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isCompleted])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
  @@index([tenantId, taskId, sortOrder])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectTaskComment {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  content            String
  mentionedMemberIds Json?
  isInternal         Boolean            @default(false)
  authoredById       String             @db.Uuid
  taskId             String             @db.Uuid
  Member             Member             @relation(fields: [tenantId, authoredById], references: [tenantId, id])
  ProjectTask        ProjectTask        @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, authoredById])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isInternal])
  @@index([tenantId, status])
  @@index([tenantId, taskId, createdAt])
  @@index([tenantId, taskId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProjectTaskDependency {
  id                                                                        String             @id @default(uuid(7)) @db.Uuid
  status                                                                    ProjectChildStatus @default(ACTIVE)
  version                                                                   Int                @default(1)
  createdAt                                                                 DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt                                                                 DateTime           @db.Timestamptz(6)
  tenantId                                                                  String             @db.Uuid
  deletedAt                                                                 DateTime?          @db.Timestamptz(6)
  deletedByActorId                                                          String?            @db.Uuid
  createdByActorId                                                          String?            @db.Uuid
  updatedByActorId                                                          String?            @db.Uuid
  auditCorrelationId                                                        String?            @db.Uuid
  dataClassification                                                        String             @default("INTERNAL")
  retentionPolicy                                                           RetentionPolicy?
  dependencyType                                                            DependencyType     @default(FINISH_TO_START)
  lagDays                                                                   Int?               @default(0)
  predecessorTaskId                                                         String             @db.Uuid
  successorTaskId                                                           String             @db.Uuid
  ProjectTask_ProjectTaskDependency_tenantId_predecessorTaskIdToProjectTask ProjectTask        @relation("ProjectTaskDependency_tenantId_predecessorTaskIdToProjectTask", fields: [tenantId, predecessorTaskId], references: [tenantId, id], onDelete: Cascade)
  ProjectTask_ProjectTaskDependency_tenantId_successorTaskIdToProjectTask   ProjectTask        @relation("ProjectTaskDependency_tenantId_successorTaskIdToProjectTask", fields: [tenantId, successorTaskId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, predecessorTaskId, successorTaskId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dependencyType])
  @@index([tenantId, predecessorTaskId])
  @@index([tenantId, status])
  @@index([tenantId, successorTaskId])
}

model ProjectType {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

// =============================================================
// 1️⃣ RoomScanSession
// =============================================================

model RoomScanSession {
  id                 String         @id @default(uuid(7)) @db.Uuid
  tenantId           String         @db.Uuid
  projectId          String?        @db.Uuid
  createdByActorId   String?        @db.Uuid
  updatedByActorId   String?        @db.Uuid
  deletedByActorId   String?        @db.Uuid
  auditCorrelationId String?        @db.Uuid
  deviceInfo         Json?          @default("{}")
  status             RoomScanStatus @default(PENDING)
  startedAt          DateTime?      @db.Timestamptz(6)
  completedAt        DateTime?      @db.Timestamptz(6)
  location           Json?          @default("{}")
  totalFiles         Int            @default(0)
  notes              String?
  metadata           Json?          @default("{}")
  version            Int            @default(1)
  createdAt          DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime       @db.Timestamptz(6)
  deletedAt          DateTime?      @db.Timestamptz(6)

  // Relations
  Tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project        Project? @relation(fields: [tenantId, projectId], references: [tenantId, id])
  CreatedByActor Actor?   @relation("RoomScanSessionCreatedBy", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor?   @relation("RoomScanSessionUpdatedBy", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor?   @relation("RoomScanSessionDeletedBy", fields: [deletedByActorId], references: [id])

  // Child relations
  RoomScanFile      RoomScanFile[]
  RoomModel         RoomModel[]
  RoomMeasurement   RoomMeasurement[]
  RoomProcessingJob RoomProcessingJob[]

  @@unique([tenantId, id])
  @@index([tenantId, createdAt], type: Brin)
  @@index([tenantId, status])
  @@index([tenantId, projectId])
  @@index([tenantId, deletedAt])
}

// =============================================================
// 2️⃣ RoomScanFile
// =============================================================

model RoomScanFile {
  id          String       @id @default(uuid(7)) @db.Uuid
  tenantId    String       @db.Uuid
  sessionId   String       @db.Uuid
  fileName    String
  fileType    RoomFileType
  fileSizeMB  Decimal?     @db.Decimal(10, 2)
  storagePath String
  checksum    String?
  uploadedAt  DateTime     @default(now()) @db.Timestamptz(6)
  metadata    Json?        @default("{}")
  version     Int          @default(1)
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime     @db.Timestamptz(6)
  deletedAt   DateTime?    @db.Timestamptz(6)

  // Relations
  Tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RoomScanSession RoomScanSession @relation(fields: [tenantId, sessionId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, sessionId])
  @@index([tenantId, fileType])
  @@index([tenantId, deletedAt])
}

// =============================================================
// 3️⃣ RoomModel
// =============================================================

model RoomModel {
  id                 String          @id @default(uuid(7)) @db.Uuid
  tenantId           String          @db.Uuid
  sessionId          String?         @db.Uuid
  projectId          String?         @db.Uuid
  estimateId         String?         @db.Uuid
  documentGroupId    String?         @db.Uuid
  createdByActorId   String?         @db.Uuid
  updatedByActorId   String?         @db.Uuid
  deletedByActorId   String?         @db.Uuid
  auditCorrelationId String?         @db.Uuid
  modelName          String
  modelType          RoomModelType
  modelUrl           String?
  polygonCount       Int?
  surfaceArea        Decimal?        @db.Decimal(12, 2)
  volume             Decimal?        @db.Decimal(12, 2)
  unit               MeasurementUnit @default(METER)
  generatedAt        DateTime?       @db.Timestamptz(6)
  metadata           Json?           @default("{}")
  version            Int             @default(1)
  createdAt          DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime        @db.Timestamptz(6)
  deletedAt          DateTime?       @db.Timestamptz(6)

  // Relations
  Tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RoomScanSession RoomScanSession? @relation(fields: [tenantId, sessionId], references: [tenantId, id])
  Project         Project?         @relation(fields: [tenantId, projectId], references: [tenantId, id])
  Estimate        Estimate?        @relation(fields: [tenantId, estimateId], references: [tenantId, id])
  DocumentGroup   DocumentGroup?   @relation(fields: [tenantId, documentGroupId], references: [tenantId, id])
  CreatedByActor  Actor?           @relation("RoomModelCreatedBy", fields: [createdByActorId], references: [id])
  UpdatedByActor  Actor?           @relation("RoomModelUpdatedBy", fields: [updatedByActorId], references: [id])
  DeletedByActor  Actor?           @relation("RoomModelDeletedBy", fields: [deletedByActorId], references: [id])

  // Child relations
  RoomSurface     RoomSurface[]
  RoomObject      RoomObject[]
  RoomAnnotation  RoomAnnotation[]
  RoomExport      RoomExport[]
  RoomMeasurement RoomMeasurement[]

  @@unique([tenantId, id])
  @@index([tenantId, sessionId])
  @@index([tenantId, projectId])
  @@index([tenantId, estimateId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, createdAt], type: Brin)
}

// =============================================================
// 4️⃣ RoomMeasurement
// =============================================================

model RoomMeasurement {
  id        String          @id @default(uuid(7)) @db.Uuid
  tenantId  String          @db.Uuid
  sessionId String?         @db.Uuid
  modelId   String?         @db.Uuid
  label     String
  value     Decimal         @db.Decimal(12, 3)
  unit      MeasurementUnit
  axis      Axis?
  metadata  Json?           @default("{}")
  version   Int             @default(1)
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt DateTime        @db.Timestamptz(6)
  deletedAt DateTime?       @db.Timestamptz(6)

  Tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RoomModel       RoomModel?       @relation(fields: [tenantId, modelId], references: [tenantId, id])
  RoomScanSession RoomScanSession? @relation(fields: [tenantId, sessionId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([tenantId, modelId])
  @@index([tenantId, sessionId])
  @@index([tenantId, deletedAt])
}

// =============================================================
// 5️⃣ RoomObject
// =============================================================

model RoomObject {
  id         String         @id @default(uuid(7)) @db.Uuid
  tenantId   String         @db.Uuid
  modelId    String         @db.Uuid
  objectType RoomObjectType
  position   Json?          @default("{}")
  dimensions Json?          @default("{}")
  material   String?
  confidence Decimal?       @db.Decimal(4, 3)
  detectedAt DateTime?      @db.Timestamptz(6)
  metadata   Json?          @default("{}")
  version    Int            @default(1)
  createdAt  DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime       @db.Timestamptz(6)
  deletedAt  DateTime?      @db.Timestamptz(6)

  Tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RoomModel RoomModel @relation(fields: [tenantId, modelId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, modelId])
  @@index([tenantId, objectType])
  @@index([tenantId, deletedAt])
}

// =============================================================
// 6️⃣ RoomSurface
// =============================================================

model RoomSurface {
  id          String          @id @default(uuid(7)) @db.Uuid
  tenantId    String          @db.Uuid
  modelId     String          @db.Uuid
  surfaceType RoomSurfaceType
  area        Decimal?        @db.Decimal(12, 2)
  material    String?
  textureUrl  String?
  colorHex    String?
  metadata    Json?           @default("{}")
  version     Int             @default(1)
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime        @db.Timestamptz(6)
  deletedAt   DateTime?       @db.Timestamptz(6)

  Tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RoomModel RoomModel @relation(fields: [tenantId, modelId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, modelId])
  @@index([tenantId, surfaceType])
  @@index([tenantId, deletedAt])
}

// =============================================================
// 7️⃣ RoomAnnotation
// =============================================================

model RoomAnnotation {
  id               String    @id @default(uuid(7)) @db.Uuid
  tenantId         String    @db.Uuid
  modelId          String    @db.Uuid
  createdByActorId String?   @db.Uuid
  label            String
  description      String?
  position         Json?     @default("{}")
  metadata         Json?     @default("{}")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)

  Tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RoomModel      RoomModel @relation(fields: [tenantId, modelId], references: [tenantId, id], onDelete: Cascade)
  CreatedByActor Actor?    @relation("RoomAnnotationCreatedBy", fields: [createdByActorId], references: [id])

  @@unique([tenantId, id])
  @@index([tenantId, modelId])
  @@index([tenantId, createdByActorId])
  @@index([tenantId, deletedAt])
}

// =============================================================
// 8️⃣ RoomExport
// =============================================================

model RoomExport {
  id               String               @id @default(uuid(7)) @db.Uuid
  tenantId         String               @db.Uuid
  modelId          String               @db.Uuid
  documentGroupId  String?              @db.Uuid
  createdByActorId String?              @db.Uuid
  exportType       RoomExportType
  status           RoomProcessingStatus @default(QUEUED)
  fileUrl          String?
  fileSizeMB       Decimal?             @db.Decimal(10, 2)
  generatedAt      DateTime?            @db.Timestamptz(6)
  metadata         Json?                @default("{}")
  version          Int                  @default(1)
  createdAt        DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime             @db.Timestamptz(6)
  deletedAt        DateTime?            @db.Timestamptz(6)

  Tenant         Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RoomModel      RoomModel      @relation(fields: [tenantId, modelId], references: [tenantId, id], onDelete: Cascade)
  DocumentGroup  DocumentGroup? @relation(fields: [tenantId, documentGroupId], references: [tenantId, id])
  CreatedByActor Actor?         @relation("RoomExportCreatedBy", fields: [createdByActorId], references: [id])

  @@unique([tenantId, id])
  @@index([tenantId, modelId])
  @@index([tenantId, exportType])
  @@index([tenantId, status])
  @@index([tenantId, deletedAt])
}

// =============================================================
// 9️⃣ RoomPlanPreset
// =============================================================

model RoomPlanPreset {
  id               String         @id @default(uuid(7)) @db.Uuid
  tenantId         String         @db.Uuid
  createdByActorId String?        @db.Uuid
  updatedByActorId String?        @db.Uuid
  name             String
  description      String?
  presetType       RoomPresetType
  config           Json           @default("{}")
  isDefault        Boolean        @default(false)
  metadata         Json?          @default("{}")
  version          Int            @default(1)
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime       @db.Timestamptz(6)
  deletedAt        DateTime?      @db.Timestamptz(6)

  Tenant         Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  CreatedByActor Actor? @relation("RoomPlanPresetCreatedBy", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("RoomPlanPresetUpdatedBy", fields: [updatedByActorId], references: [id])

  @@unique([tenantId, id])
  @@unique([tenantId, name])
  @@index([tenantId, presetType])
  @@index([tenantId, deletedAt])
}

// =============================================================
// 🔟 RoomProcessingJob
// =============================================================

model RoomProcessingJob {
  id                 String               @id @default(uuid(7)) @db.Uuid
  tenantId           String               @db.Uuid
  sessionId          String               @db.Uuid
  jobType            RoomJobType
  status             RoomProcessingStatus @default(QUEUED)
  progress           Int                  @default(0)
  auditCorrelationId String?              @db.Uuid
  startedAt          DateTime?            @db.Timestamptz(6)
  completedAt        DateTime?            @db.Timestamptz(6)
  errorMessage       String?
  metadata           Json?                @default("{}")
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  deletedAt          DateTime?            @db.Timestamptz(6)

  Tenant          Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RoomScanSession RoomScanSession @relation(fields: [tenantId, sessionId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([tenantId, sessionId])
  @@index([tenantId, jobType])
  @@index([tenantId, status])
  @@index([tenantId, deletedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PunchList {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             WorkItemStatus   @default(OPEN)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  priority           TaskPriority     @default(MEDIUM)
  dueDate            DateTime?        @db.Date
  assigneeId         String?          @db.Uuid
  projectId          String           @db.Uuid
  Project            Project          @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  PunchListItem      PunchListItem[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assigneeId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PunchListItem {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             WorkItemStatus   @default(OPEN)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  description        String?
  priority           TaskPriority     @default(MEDIUM)
  dueDate            DateTime?        @db.Date
  completedAt        DateTime?        @db.Timestamptz(6)
  assigneeId         String?          @db.Uuid
  punchListId        String           @db.Uuid
  Member             Member?          @relation(fields: [tenantId, assigneeId], references: [tenantId, id])
  PunchList          PunchList        @relation(fields: [tenantId, punchListId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assigneeId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, completedAt])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, priority])
  @@index([tenantId, punchListId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PurchaseOrder {
  id                    String                  @id @default(uuid(7)) @db.Uuid
  status                PurchaseOrderStatus     @default(DRAFT)
  version               Int                     @default(1)
  createdAt             DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                @db.Timestamptz(6)
  tenantId              String                  @db.Uuid
  deletedAt             DateTime?               @db.Timestamptz(6)
  deletedByActorId      String?                 @db.Uuid
  createdByActorId      String?                 @db.Uuid
  updatedByActorId      String?                 @db.Uuid
  globalId              String                  @db.Uuid
  poNumber              String                  @db.VarChar(50)
  orderDate             DateTime                @db.Date
  expectedDate          DateTime?               @db.Date
  totalAmount           Decimal                 @db.Decimal(12, 2)
  currency              String                  @default("USD") @db.VarChar(3)
  vendorId              String                  @db.Uuid
  approvedAt            DateTime?               @db.Timestamptz(6)
  approvedById          String?                 @db.Uuid
  auditCorrelationId    String?                 @db.Uuid
  dataClassification    String                  @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  GoodsReceipt          GoodsReceipt[]
  Member                Member?                 @relation(fields: [tenantId, approvedById], references: [tenantId, id], onDelete: NoAction)
  Vendor                Vendor                  @relation(fields: [tenantId, vendorId], references: [tenantId, id])
  PurchaseOrderApproval PurchaseOrderApproval[]
  PurchaseOrderLine     PurchaseOrderLine[]

  //Actor audit Actor relations
  CreatedByActor Actor? @relation("PurchaseOrderCreatedByActor", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("PurchaseOrderUpdatedByActor", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor? @relation("PurchaseOrderDeletedByActor", fields: [deletedByActorId], references: [id])

  @@unique([tenantId, id])
  @@unique([tenantId, poNumber])
  @@index([approvedAt])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedById])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, orderDate])
  @@index([tenantId, status])
  @@index([tenantId, totalAmount])
  @@index([tenantId, vendorId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PurchaseOrderApproval {
  id                                                          String                    @id @default(uuid(7)) @db.Uuid
  status                                                      ProcurementApprovalStatus @default(PENDING)
  version                                                     Int                       @default(1)
  createdAt                                                   DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt                                                   DateTime                  @db.Timestamptz(6)
  tenantId                                                    String                    @db.Uuid
  deletedAt                                                   DateTime?                 @db.Timestamptz(6)
  deletedByActorId                                            String?                   @db.Uuid
  createdByActorId                                            String?                   @db.Uuid
  updatedByActorId                                            String?                   @db.Uuid
  auditCorrelationId                                          String?                   @db.Uuid
  dataClassification                                          String                    @default("CONFIDENTIAL")
  retentionPolicy                                             RetentionPolicy?
  purchaseOrderId                                             String                    @db.Uuid
  approverId                                                  String?                   @db.Uuid
  decision                                                    ProcurementApprovalStatus @default(PENDING)
  approvedAt                                                  DateTime?                 @db.Timestamptz(6)
  decisionAt                                                  DateTime?                 @db.Timestamptz(6)
  comment                                                     String?
  approvalLevel                                               Int                       @default(1)
  delegatedFrom                                               String?                   @db.Uuid
  requestedAmount                                             Decimal                   @db.Decimal(12, 2)
  currency                                                    String                    @default("USD") @db.VarChar(3)
  Member_PurchaseOrderApproval_tenantId_approverIdToMember    Member?                   @relation("PurchaseOrderApproval_tenantId_approverIdToMember", fields: [tenantId, approverId], references: [tenantId, id], onDelete: NoAction)
  Member_PurchaseOrderApproval_tenantId_delegatedFromToMember Member?                   @relation("PurchaseOrderApproval_tenantId_delegatedFromToMember", fields: [tenantId, delegatedFrom], references: [tenantId, id], onDelete: NoAction)
  Tenant                                                      Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  PurchaseOrder                                               PurchaseOrder             @relation(fields: [tenantId, purchaseOrderId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, purchaseOrderId, approvalLevel])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedAt])
  @@index([tenantId, approverId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, decision])
  @@index([tenantId, purchaseOrderId])
  @@index([tenantId, requestedAmount])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PurchaseOrderLine {
  id                      String                   @id @default(uuid(7)) @db.Uuid
  status                  ProcurementChildStatus   @default(ACTIVE)
  version                 Int                      @default(1)
  createdAt               DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime                 @db.Timestamptz(6)
  tenantId                String                   @db.Uuid
  deletedAt               DateTime?                @db.Timestamptz(6)
  deletedByActorId        String?                  @db.Uuid
  createdByActorId        String?                  @db.Uuid
  updatedByActorId        String?                  @db.Uuid
  auditCorrelationId      String?                  @db.Uuid
  dataClassification      String                   @default("CONFIDENTIAL")
  retentionPolicy         RetentionPolicy?
  lineNumber              Int                      @default(1)
  description             String                   @db.VarChar(500)
  quantity                Decimal                  @db.Decimal(12, 3)
  unitOfMeasure           ProcurementUnitOfMeasure @default(EA)
  unitPrice               Decimal                  @db.Decimal(12, 2)
  lineTotal               Decimal                  @db.Decimal(15, 2)
  receiptTolerancePercent Decimal?                 @db.Decimal(5, 2)
  priceTolerancePercent   Decimal?                 @db.Decimal(5, 2)
  itemCode                String?                  @db.VarChar(50)
  itemDescription         String?
  requestedDate           DateTime?                @db.Date
  promisedDate            DateTime?                @db.Date
  projectId               String?                  @db.Uuid
  budgetLineId            String?                  @db.Uuid
  costCode                String?                  @db.VarChar(50)
  purchaseOrderId         String                   @db.Uuid
  APBillLine              APBillLine[]
  EstimateLineItem        EstimateLineItem[]
  GoodsReceiptLine        GoodsReceiptLine[]
  Tenant                  Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project                 Project?                 @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  PurchaseOrder           PurchaseOrder            @relation(fields: [tenantId, purchaseOrderId], references: [tenantId, id], onDelete: Cascade)
  RFQResponseLine         RFQResponseLine[]

  @@unique([tenantId, id])
  @@unique([tenantId, purchaseOrderId, lineNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, itemCode])
  @@index([tenantId, projectId])
  @@index([tenantId, purchaseOrderId])
  @@index([tenantId, requestedDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Quote {
  id                  String           @id @default(uuid(7)) @db.Uuid
  status              QuoteStatus      @default(DRAFT)
  version             Int              @default(1)
  createdAt           DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime         @db.Timestamptz(6)
  tenantId            String           @db.Uuid
  deletedAt           DateTime?        @db.Timestamptz(6)
  deletedByActorId    String?          @db.Uuid
  createdByActorId    String?          @db.Uuid
  updatedByActorId    String?          @db.Uuid
  globalId            String           @db.Uuid
  auditCorrelationId  String?          @db.Uuid
  dataClassification  String           @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  quoteNumber         String           @db.Citext
  name                String?          @db.VarChar(255)
  description         String?
  validUntil          DateTime?        @db.Date
  totalAmount         Decimal          @db.Decimal(15, 2)
  subtotal            Decimal?         @db.Decimal(15, 2)
  taxAmount           Decimal?         @db.Decimal(15, 2)
  discountAmount      Decimal?         @db.Decimal(15, 2)
  sentDate            DateTime?        @db.Date
  viewedDate          DateTime?        @db.Date
  acceptedDate        DateTime?        @db.Date
  clientNotes         String?
  internalNotes       String?
  specialRequirements String?
  terms               String?
  accountId           String?          @db.Uuid
  contactId           String?          @db.Uuid
  leadId              String?          @db.Uuid
  Activity            Activity[]
  Account             Account?         @relation(fields: [tenantId, accountId], references: [tenantId, id])
  Contact             Contact?         @relation(fields: [tenantId, contactId], references: [tenantId, id])
  Lead                Lead?            @relation(fields: [tenantId, leadId], references: [tenantId, id])
  QuoteApproval       QuoteApproval[]
  QuoteLineItem       QuoteLineItem[]

  @@unique([tenantId, id])
  @@unique([tenantId, quoteNumber])
  @@index([createdAt], type: Brin)
  @@index([globalId])
  @@index([tenantId, accountId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contactId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, leadId])
  @@index([tenantId, sentDate])
  @@index([tenantId, status])
  @@index([tenantId, totalAmount])
  @@index([tenantId, validUntil])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model QuoteLineItem {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CRMChildStatus   @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  name               String           @db.VarChar(255)
  description        String?
  quantity           Decimal          @db.Decimal(12, 3)
  unitPrice          Decimal          @db.Decimal(12, 2)
  total              Decimal          @db.Decimal(12, 2)
  sortOrder          Int              @default(0)
  priceListItemId    String?          @db.Uuid
  quoteId            String           @db.Uuid
  PriceListItem      PriceListItem?   @relation(fields: [priceListItemId], references: [id])
  Quote              Quote            @relation(fields: [tenantId, quoteId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([priceListItemId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, quoteId])
  @@index([tenantId, sortOrder])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RFI {
  id                                      String           @id @default(uuid(7)) @db.Uuid
  status                                  RFIStatus        @default(SUBMITTED)
  version                                 Int              @default(1)
  createdAt                               DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                               DateTime         @db.Timestamptz(6)
  tenantId                                String           @db.Uuid
  deletedAt                               DateTime?        @db.Timestamptz(6)
  deletedByActorId                        String?          @db.Uuid
  createdByActorId                        String?          @db.Uuid
  updatedByActorId                        String?          @db.Uuid
  auditCorrelationId                      String?          @db.Uuid
  dataClassification                      String           @default("INTERNAL")
  retentionPolicy                         RetentionPolicy?
  number                                  String
  title                                   String
  description                             String
  category                                String?
  priority                                TaskPriority     @default(MEDIUM)
  dueDate                                 DateTime?        @db.Date
  submitterId                             String           @db.Uuid
  assigneeId                              String?          @db.Uuid
  projectId                               String           @db.Uuid
  Member_RFI_tenantId_assigneeIdToMember  Member?          @relation("RFI_tenantId_assigneeIdToMember", fields: [tenantId, assigneeId], references: [tenantId, id])
  Project                                 Project          @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  Member_RFI_tenantId_submitterIdToMember Member           @relation("RFI_tenantId_submitterIdToMember", fields: [tenantId, submitterId], references: [tenantId, id])
  RFIReply                                RFIReply[]

  @@unique([tenantId, id])
  @@unique([tenantId, number])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assigneeId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, priority])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
  @@index([tenantId, submitterId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RFIReply {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  message            String
  replyType          RFIReplyType       @default(RESPONSE)
  authorId           String             @db.Uuid
  rfiId              String             @db.Uuid
  Member             Member             @relation(fields: [tenantId, authorId], references: [tenantId, id])
  RFI                RFI                @relation(fields: [tenantId, rfiId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, authorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, replyType])
  @@index([tenantId, rfiId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RFQLine {
  id                   String                   @id @default(uuid(7)) @db.Uuid
  status               ProcurementChildStatus   @default(ACTIVE)
  version              Int                      @default(1)
  createdAt            DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime                 @db.Timestamptz(6)
  tenantId             String                   @db.Uuid
  deletedAt            DateTime?                @db.Timestamptz(6)
  deletedByActorId     String?                  @db.Uuid
  createdByActorId     String?                  @db.Uuid
  updatedByActorId     String?                  @db.Uuid
  auditCorrelationId   String?                  @db.Uuid
  dataClassification   String                   @default("CONFIDENTIAL")
  retentionPolicy      RetentionPolicy?
  rfqId                String                   @db.Uuid
  lineNumber           Int                      @default(1)
  description          String                   @db.VarChar(500)
  quantity             Decimal                  @db.Decimal(12, 3)
  itemCode             String?                  @db.VarChar(50)
  itemDescription      String?
  itemCategory         String?                  @db.VarChar(100)
  unitOfMeasure        ProcurementUnitOfMeasure @default(EA)
  technicalSpecs       String?
  qualityStandard      String?                  @db.VarChar(100)
  deliveryTerms        String?                  @db.VarChar(200)
  specRevision         String?                  @db.VarChar(20)
  targetUnitPrice      Decimal?                 @db.Decimal(12, 2)
  maxUnitPrice         Decimal?                 @db.Decimal(12, 2)
  currency             String                   @default("USD") @db.VarChar(3)
  projectId            String?                  @db.Uuid
  budgetLineId         String?                  @db.Uuid
  costCode             String?                  @db.VarChar(50)
  requiredDeliveryDate DateTime?                @db.Date
  deliveryLocation     String?                  @db.VarChar(200)
  internalNotes        String?
  vendorNotes          String?
  Tenant               Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RequestForQuote      RequestForQuote          @relation(fields: [tenantId, rfqId], references: [tenantId, id], onDelete: Cascade)
  RFQResponseLine      RFQResponseLine[]

  @@unique([tenantId, id])
  @@unique([tenantId, rfqId, lineNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, itemCode])
  @@index([tenantId, projectId])
  @@index([tenantId, requiredDeliveryDate])
  @@index([tenantId, rfqId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RFQResponse {
  id                                              String            @id @default(uuid(7)) @db.Uuid
  status                                          RFQResponseStatus @default(DRAFT)
  version                                         Int               @default(1)
  createdAt                                       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt                                       DateTime          @db.Timestamptz(6)
  tenantId                                        String            @db.Uuid
  deletedAt                                       DateTime?         @db.Timestamptz(6)
  deletedByActorId                                String?           @db.Uuid
  createdByActorId                                String?           @db.Uuid
  updatedByActorId                                String?           @db.Uuid
  auditCorrelationId                              String?           @db.Uuid
  dataClassification                              String            @default("CONFIDENTIAL")
  retentionPolicy                                 RetentionPolicy?
  rfqId                                           String            @db.Uuid
  vendorId                                        String            @db.Uuid
  responseNumber                                  String            @db.VarChar(50)
  submittedAt                                     DateTime?         @db.Timestamptz(6)
  validUntil                                      DateTime?         @db.Date
  totalAmount                                     Decimal?          @db.Decimal(15, 2)
  currency                                        String            @default("USD") @db.VarChar(3)
  exchangeRate                                    Decimal?          @db.Decimal(10, 6)
  baseCurrencyAmount                              Decimal?          @db.Decimal(15, 2)
  paymentTerms                                    PaymentTerms?
  deliveryTerms                                   String?           @db.VarChar(200)
  warranty                                        String?
  leadTime                                        Int?
  minimumOrderQuantity                            Decimal?          @db.Decimal(12, 3)
  shippingCost                                    Decimal?          @db.Decimal(12, 2)
  shippingTerms                                   String?           @db.VarChar(100)
  originLocation                                  String?           @db.VarChar(200)
  isAlternative                                   Boolean           @default(false)
  alternativeReason                               String?
  vendorNotes                                     String?
  internalNotes                                   String?
  evaluationScore                                 Decimal?          @db.Decimal(5, 2)
  evaluatedBy                                     String?           @db.Uuid
  evaluatedAt                                     DateTime?         @db.Timestamptz(6)
  isAwarded                                       Boolean           @default(false)
  awardedAt                                       DateTime?         @db.Timestamptz(6)
  awardedBy                                       String?           @db.Uuid
  awardReason                                     String?
  Member_RFQResponse_tenantId_awardedByToMember   Member?           @relation("RFQResponse_tenantId_awardedByToMember", fields: [tenantId, awardedBy], references: [tenantId, id], onDelete: NoAction)
  Member_RFQResponse_tenantId_evaluatedByToMember Member?           @relation("RFQResponse_tenantId_evaluatedByToMember", fields: [tenantId, evaluatedBy], references: [tenantId, id], onDelete: NoAction)
  Tenant                                          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RequestForQuote                                 RequestForQuote   @relation(fields: [tenantId, rfqId], references: [tenantId, id], onDelete: Cascade)
  Vendor                                          Vendor            @relation(fields: [tenantId, vendorId], references: [tenantId, id], onDelete: Cascade)
  RFQResponseLine                                 RFQResponseLine[]

  @@unique([tenantId, id])
  @@unique([tenantId, rfqId, vendorId])
  @@unique([tenantId, vendorId, responseNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, evaluationScore])
  @@index([tenantId, isAwarded])
  @@index([tenantId, rfqId])
  @@index([tenantId, status])
  @@index([tenantId, submittedAt])
  @@index([tenantId, validUntil])
  @@index([tenantId, vendorId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RFQResponseLine {
  id                  String                   @id @default(uuid(7)) @db.Uuid
  status              ProcurementChildStatus   @default(ACTIVE)
  version             Int                      @default(1)
  createdAt           DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime                 @db.Timestamptz(6)
  tenantId            String                   @db.Uuid
  deletedAt           DateTime?                @db.Timestamptz(6)
  deletedByActorId    String?                  @db.Uuid
  createdByActorId    String?                  @db.Uuid
  updatedByActorId    String?                  @db.Uuid
  auditCorrelationId  String?                  @db.Uuid
  dataClassification  String                   @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  rfqResponseId       String                   @db.Uuid
  rfqLineId           String?                  @db.Uuid
  lineNumber          Int                      @default(1)
  itemDescription     String                   @db.VarChar(500)
  itemCode            String?                  @db.VarChar(50)
  quantity            Decimal                  @db.Decimal(12, 3)
  unitOfMeasure       ProcurementUnitOfMeasure @default(EA)
  unitPrice           Decimal                  @db.Decimal(12, 2)
  listPrice           Decimal?                 @db.Decimal(12, 2)
  discountPercent     Decimal?                 @db.Decimal(5, 2)
  discountAmount      Decimal?                 @db.Decimal(12, 2)
  netUnitPrice        Decimal                  @db.Decimal(12, 2)
  lineTotal           Decimal                  @db.Decimal(15, 2)
  taxAmount           Decimal?                 @db.Decimal(12, 2)
  taxRate             Decimal?                 @db.Decimal(5, 4)
  isTaxExempt         Boolean                  @default(false)
  currency            String                   @default("USD") @db.VarChar(3)
  exchangeRate        Decimal?                 @db.Decimal(10, 6)
  baseCurrencyAmount  Decimal?                 @db.Decimal(15, 2)
  deliveryDays        Int?
  deliveryDate        DateTime?                @db.Date
  shippingCost        Decimal?                 @db.Decimal(12, 2)
  originLocation      String?                  @db.VarChar(200)
  brand               String?                  @db.VarChar(100)
  model               String?                  @db.VarChar(100)
  partNumber          String?                  @db.VarChar(100)
  technicalSpecs      String?
  certifications      String?
  warranty            String?                  @db.VarChar(200)
  qualityGrade        QualityGrade?
  vendorPartNumber    String?                  @db.VarChar(100)
  vendorNotes         String?
  alternativeItem     Boolean                  @default(false)
  alternativeReason   String?
  internalNotes       String?
  evaluationScore     Decimal?                 @db.Decimal(5, 2)
  isRecommended       Boolean                  @default(false)
  isAwarded           Boolean                  @default(false)
  awardedQuantity     Decimal?                 @db.Decimal(12, 3)
  purchaseOrderLineId String?                  @db.Uuid
  Tenant              Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  PurchaseOrderLine   PurchaseOrderLine?       @relation(fields: [tenantId, purchaseOrderLineId], references: [tenantId, id], onDelete: NoAction)
  RFQLine             RFQLine?                 @relation(fields: [tenantId, rfqLineId], references: [tenantId, id], onDelete: NoAction)
  RFQResponse         RFQResponse              @relation(fields: [tenantId, rfqResponseId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, rfqResponseId, lineNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deliveryDays])
  @@index([tenantId, isAwarded])
  @@index([tenantId, itemCode])
  @@index([tenantId, rfqLineId])
  @@index([tenantId, rfqResponseId])
  @@index([tenantId, status])
  @@index([tenantId, unitPrice])
  @@index([tenantId, vendorPartNumber])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ReasonCode {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ReasonCodeStatus   @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  codeValue          String             @db.VarChar(50)
  codeName           String             @db.VarChar(255)
  description        String?
  codeType           ReasonCodeType     @default(GENERAL)
  category           ReasonCodeCategory @default(OTHER)
  isSystemCode       Boolean            @default(false)
  severity           String?            @db.VarChar(20)
  impact             String?            @db.VarChar(20)
  applicableEntities String?
  moduleScope        String?            @db.VarChar(50)
  departmentScope    String?            @db.Uuid
  requiresComments   Boolean            @default(true)
  requiresEvidence   Boolean            @default(false)
  autoActions        String?
  displayOrder       Int                @default(1)
  colorCode          String?            @db.VarChar(7)
  iconName           String?            @db.VarChar(50)
  blocksApproval     Boolean            @default(true)
  allowOverride      Boolean            @default(false)
  overrideLevel      Int?
  usageCount         Int                @default(0)
  lastUsedAt         DateTime?          @db.Timestamptz(6)
  isActive           Boolean            @default(true)
  retiredAt          DateTime?          @db.Timestamptz(6)
  retiredReason      String?
  localizedNames     String?
  localizedDescs     String?
  ApprovalDecision   ApprovalDecision[]
  Department         Department?        @relation(fields: [tenantId, departmentScope], references: [tenantId, id], onDelete: NoAction)
  Tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, codeValue])
  @@unique([tenantId, id])
  @@index([blocksApproval])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, category])
  @@index([tenantId, codeType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, departmentScope])
  @@index([tenantId, displayOrder])
  @@index([tenantId, isActive])
  @@index([tenantId, isSystemCode])
  @@index([tenantId, lastUsedAt])
  @@index([tenantId, moduleScope])
  @@index([tenantId, severity])
  @@index([tenantId, status])
  @@index([usageCount])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Reconciliation {
  id                                                    String               @id @default(uuid(7)) @db.Uuid
  status                                                ReconciliationStatus @default(DRAFT)
  version                                               Int                  @default(1)
  createdAt                                             DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt                                             DateTime             @db.Timestamptz(6)
  tenantId                                              String               @db.Uuid
  deletedAt                                             DateTime?            @db.Timestamptz(6)
  deletedByActorId                                      String?              @db.Uuid
  createdByActorId                                      String?              @db.Uuid
  updatedByActorId                                      String?              @db.Uuid
  reconciliationNumber                                  String               @unique
  startDate                                             DateTime             @db.Timestamptz(6)
  endDate                                               DateTime             @db.Timestamptz(6)
  statementEndingBalance                                Decimal              @db.Decimal(12, 2)
  calculatedEndingBalance                               Decimal?             @db.Decimal(12, 2)
  difference                                            Decimal?             @db.Decimal(12, 2)
  notes                                                 String?
  bankAccountId                                         String               @db.Uuid
  reconciledById                                        String?              @db.Uuid
  reconciledAt                                          DateTime?            @db.Timestamptz(6)
  reviewedById                                          String?              @db.Uuid
  reviewedAt                                            DateTime?            @db.Timestamptz(6)
  reviewNotes                                           String?
  auditCorrelationId                                    String?              @db.Uuid
  dataClassification                                    String               @default("CONFIDENTIAL")
  retentionPolicy                                       RetentionPolicy?
  metadata                                              Json?
  BankStatementLine                                     BankStatementLine[]
  BankAccount                                           BankAccount          @relation(fields: [tenantId, bankAccountId], references: [tenantId, id])
  Member_Reconciliation_tenantId_reconciledByIdToMember Member?              @relation("Reconciliation_tenantId_reconciledByIdToMember", fields: [tenantId, reconciledById], references: [tenantId, id])
  Member_Reconciliation_tenantId_reviewedByIdToMember   Member?              @relation("Reconciliation_tenantId_reviewedByIdToMember", fields: [tenantId, reviewedById], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([endDate], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, bankAccountId])
  @@index([tenantId, createdByActorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, endDate])
  @@index([tenantId, reconciledById])
  @@index([tenantId, reconciliationNumber])
  @@index([tenantId, reviewedById])
  @@index([tenantId, status, endDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Refund {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             RefundStatus     @default(DRAFT)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  refundNumber       String           @unique
  refundDate         DateTime         @db.Timestamptz(6)
  amount             Decimal          @db.Decimal(12, 2)
  currency           String           @default("USD")
  reason             String?
  referenceNumber    String?
  notes              String?
  paymentId          String           @db.Uuid
  processedById      String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  metadata           Json?
  Payment            Payment          @relation(fields: [tenantId, paymentId], references: [tenantId, id])
  Member             Member?          @relation(fields: [tenantId, processedById], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([refundDate], type: Brin)
  @@index([tenantId, amount])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, createdByActorId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, paymentId])
  @@index([tenantId, processedById])
  @@index([tenantId, referenceNumber])
  @@index([tenantId, refundDate])
  @@index([tenantId, refundNumber])
  @@index([tenantId, status])
  @@index([tenantId, status, refundDate])
}

model Region {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Reimbursement {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  reimbursementCode  String                 @db.Citext
  reimbursementName  String                 @db.VarChar(100)
  description        String?
  reimbursementType  String                 @db.VarChar(50)
  rate               Decimal?               @db.Decimal(12, 4)
  amount             Decimal?               @db.Decimal(12, 4)
  minimumAmount      Decimal?               @db.Decimal(12, 4)
  maximumAmount      Decimal?               @db.Decimal(12, 4)
  annualLimit        Decimal?               @db.Decimal(12, 4)
  monthlyLimit       Decimal?               @db.Decimal(12, 4)
  isTaxable          Boolean                @default(false)
  taxCategory        String?                @db.VarChar(50)
  requiresReceipts   Boolean                @default(true)
  requiresApproval   Boolean                @default(true)
  approvalLevel      Int?                   @default(1)
  effectiveDate      DateTime               @db.Date
  expirationDate     DateTime?              @db.Date
  isActive           Boolean                @default(true)
  employeeGroup      String?                @db.VarChar(50)
  department         String?                @db.VarChar(50)
  jobTitle           String?                @db.VarChar(100)
  glAccount          String?                @db.VarChar(50)
  expenseAccount     String?                @db.VarChar(50)
  costCenter         String?                @db.VarChar(50)

  @@unique([tenantId, id])
  @@unique([tenantId, reimbursementCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, employeeGroup])
  @@index([tenantId, isActive])
  @@index([tenantId, reimbursementType])
  @@index([tenantId, requiresApproval])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ReportDefinition {
  id               String          @id @default(uuid(7)) @db.Uuid
  // Lifecycle
  status           String          @default("ACTIVE") @db.VarChar(20)
  // Shadow enum for gradual cutover to typed status
  statusEnum       TemplateStatus? @default(ACTIVE)
  version          Int             @default(1)
  createdAt        DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime        @db.Timestamptz(6)
  tenantId         String          @db.Uuid
  deletedAt        DateTime?       @db.Timestamptz(6)
  deletedByActorId String?         @db.Uuid
  createdByActorId String?         @db.Uuid
  updatedByActorId String?         @db.Uuid

  // Enterprise
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Definition metadata
  name        String    @db.VarChar(255)
  code        String?   @db.VarChar(50)
  description String?
  definition  Json?
  tags        String?   @db.VarChar(255)
  isPublished Boolean   @default(false)
  publishedAt DateTime? @db.Timestamptz(6)

  // Relations
  ExportJob ExportJob[]

  @@unique([tenantId, id])
  @@unique([tenantId, code])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isPublished])
  @@index([tenantId, publishedAt])
  @@index([tenantId, status])
  @@index([tenantId, statusEnum])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RequestForQuote {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             RFQStatus        @default(DRAFT)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  rfqNumber          String           @unique @db.VarChar(50)
  title              String           @db.VarChar(255)
  description        String?
  publishedAt        DateTime?        @db.Timestamptz(6)
  responsesDue       DateTime         @db.Timestamptz(6)
  evaluationBy       DateTime?        @db.Timestamptz(6)
  firstResponseAt    DateTime?        @db.Timestamptz(6)
  projectId          String?          @db.Uuid
  budgetTotal        Decimal?         @db.Decimal(15, 2)
  requirements       String?
  termsConditions    String?
  RFQLine            RFQLine[]
  RFQResponse        RFQResponse[]
  Tenant             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project            Project?         @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, id])
  @@unique([tenantId, rfqNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, firstResponseAt])
  @@index([tenantId, projectId])
  @@index([tenantId, publishedAt])
  @@index([tenantId, responsesDue])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ResourceAllocation {
  id                                                      String           @id @default(uuid(7)) @db.Uuid
  status                                                  String           @default("ACTIVE")
  version                                                 Int              @default(1)
  createdAt                                               DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                               DateTime         @db.Timestamptz(6)
  tenantId                                                String           @db.Uuid
  deletedAt                                               DateTime?        @db.Timestamptz(6)
  deletedByActorId                                        String?          @db.Uuid
  createdByActorId                                        String?          @db.Uuid
  updatedByActorId                                        String?          @db.Uuid
  auditCorrelationId                                      String?          @db.Uuid
  dataClassification                                      String           @default("INTERNAL")
  retentionPolicy                                         RetentionPolicy?
  resourceType                                            ResourceType     @default(HUMAN)
  resourceId                                              String?          @db.Uuid
  resourceName                                            String           @db.VarChar(255)
  allocationType                                          AllocationType   @default(FULL_TIME)
  allocationUnit                                          String           @db.VarChar(20)
  allocatedAmount                                         Decimal          @db.Decimal(10, 2)
  availableAmount                                         Decimal?         @db.Decimal(10, 2)
  startDate                                               DateTime         @db.Date
  endDate                                                 DateTime         @db.Date
  estimatedHours                                          Decimal?         @db.Decimal(8, 2)
  actualHours                                             Decimal?         @db.Decimal(8, 2)
  costPerUnit                                             Decimal?         @db.Decimal(10, 2)
  budgetedCost                                            Decimal?         @db.Decimal(12, 2)
  actualCost                                              Decimal?         @db.Decimal(12, 2)
  assignedById                                            String           @db.Uuid
  assignedToId                                            String?          @db.Uuid
  priority                                                ImpactLevel      @default(MEDIUM)
  allocationStatus                                        AllocationStatus @default(PLANNED)
  utilizationRate                                         Decimal?         @db.Decimal(5, 2)
  requiresApproval                                        Boolean          @default(false)
  approvedAt                                              DateTime?        @db.Timestamptz(6)
  approvedById                                            String?          @db.Uuid
  scheduleId                                              String?          @db.Uuid
  projectId                                               String?          @db.Uuid
  taskId                                                  String?          @db.Uuid
  metadata                                                Json?
  tags                                                    String[]         @db.VarChar(50)
  Member_ResourceAllocation_tenantId_approvedByIdToMember Member?          @relation("ResourceAllocation_tenantId_approvedByIdToMember", fields: [tenantId, approvedById], references: [tenantId, id])
  Member_ResourceAllocation_tenantId_assignedByIdToMember Member           @relation("ResourceAllocation_tenantId_assignedByIdToMember", fields: [tenantId, assignedById], references: [tenantId, id])
  Member_ResourceAllocation_tenantId_assignedToIdToMember Member?          @relation("ResourceAllocation_tenantId_assignedToIdToMember", fields: [tenantId, assignedToId], references: [tenantId, id])
  Tenant                                                  Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project                                                 Project?         @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  Schedule                                                Schedule?        @relation(fields: [tenantId, scheduleId], references: [tenantId, id], onDelete: Cascade)
  Task                                                    Task?            @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, allocationStatus])
  @@index([tenantId, assignedById])
  @@index([tenantId, assignedToId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, requiresApproval, approvedAt])
  @@index([tenantId, resourceType])
  @@index([tenantId, scheduleId])
  @@index([tenantId, startDate, endDate])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RetentionSchedule {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ReturnReminder {
  id                    String                  @id @default(uuid(7)) @db.Uuid
  status                InventoryChildStatus    @default(ACTIVE)
  version               Int                     @default(1)
  createdAt             DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                @db.Timestamptz(6)
  tenantId              String                  @db.Uuid
  deletedAt             DateTime?               @db.Timestamptz(6)
  deletedByActorId      String?                 @db.Uuid
  createdByActorId      String?                 @db.Uuid
  updatedByActorId      String?                 @db.Uuid
  auditCorrelationId    String?                 @db.Uuid
  dataClassification    String                  @default("INTERNAL")
  retentionPolicy       RetentionPolicy?
  reminderNumber        String                  @db.VarChar(50)
  reminderType          String                  @db.VarChar(50)
  reminderDate          DateTime                @db.Timestamptz(6)
  dueDate               DateTime                @db.Date
  overdueDate           DateTime?               @db.Date
  reminderStatus        String                  @default("PENDING") @db.VarChar(20)
  priority              String                  @default("NORMAL") @db.VarChar(20)
  urgency               String                  @default("STANDARD") @db.VarChar(20)
  assignedTo            String                  @db.Uuid
  reminderFor           String                  @db.Uuid
  escalatedTo           String?                 @db.Uuid
  assetId               String?                 @db.Uuid
  inventoryItemId       String?                 @db.Uuid
  referenceType         String?                 @db.VarChar(50)
  referenceId           String?                 @db.Uuid
  subject               String                  @db.VarChar(255)
  message               String
  instructions          String?
  escalationLevel       Int                     @default(0)
  maxEscalations        Int                     @default(3)
  nextReminderDate      DateTime?               @db.Timestamptz(6)
  completedDate         DateTime?               @db.Timestamptz(6)
  ReturnReminderAttempt ReturnReminderAttempt[]

  @@unique([tenantId, id])
  @@unique([tenantId, reminderNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, assetId])
  @@index([tenantId, assignedTo])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, priority])
  @@index([tenantId, reminderDate])
  @@index([tenantId, reminderFor])
  @@index([tenantId, reminderStatus])
  @@index([tenantId, reminderType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ReturnReminderAttempt {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             InventoryChildStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  attemptNumber      Int                  @default(1)
  attemptDate        DateTime             @db.Timestamptz(6)
  attemptType        String               @db.VarChar(50)
  attemptMethod      String               @db.VarChar(50)
  attemptStatus      String               @default("PENDING") @db.VarChar(20)
  deliveryStatus     String?              @db.VarChar(50)
  responseReceived   Boolean              @default(false)
  responseDate       DateTime?            @db.Timestamptz(6)
  responseNotes      String?
  recipientEmail     String?              @db.Citext
  recipientPhone     String?              @db.VarChar(50)
  messageSubject     String?              @db.VarChar(255)
  messageBody        String?
  sentAt             DateTime?            @db.Timestamptz(6)
  deliveredAt        DateTime?            @db.Timestamptz(6)
  errorCode          String?              @db.VarChar(50)
  errorMessage       String?
  returnReminderId   String               @db.Uuid
  ReturnReminder     ReturnReminder       @relation(fields: [tenantId, returnReminderId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, returnReminderId, attemptNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, attemptDate])
  @@index([tenantId, attemptStatus])
  @@index([tenantId, attemptType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, responseReceived])
  @@index([tenantId, returnReminderId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RiskFactor {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Role {
  id                                              String           @id @default(uuid(7)) @db.Uuid
  status                                          String           @default("ACTIVE")
  version                                         Int              @default(1)
  createdAt                                       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                       DateTime         @db.Timestamptz(6)
  tenantId                                        String           @db.Uuid
  deletedAt                                       DateTime?        @db.Timestamptz(6)
  deletedByActorId                                String?          @db.Uuid
  createdByActorId                                String?          @db.Uuid
  updatedByActorId                                String?          @db.Uuid
  auditCorrelationId                              String?          @db.Uuid
  dataClassification                              String           @default("INTERNAL")
  retentionPolicy                                 RetentionPolicy?
  code                                            String           @db.Citext
  name                                            String           @db.VarChar(255)
  description                                     String?
  roleType                                        RoleType         @default(CUSTOM)
  isActive                                        Boolean          @default(true)
  isDefault                                       Boolean          @default(false)
  priority                                        Int              @default(0)
  parentRoleId                                    String?          @db.Uuid
  inheritsPermissions                             Boolean          @default(true)
  maxMembers                                      Int?
  requiresApproval                                Boolean          @default(false)
  color                                           String?          @db.VarChar(7)
  icon                                            String?          @db.VarChar(50)
  metadata                                        Json?
  tags                                            String[]         @db.VarChar(50)
  MemberRole_MemberRole_inheritedFromRoleIdToRole MemberRole[]     @relation("MemberRole_inheritedFromRoleIdToRole")
  MemberRole_MemberRole_roleIdToRole              MemberRole[]     @relation("MemberRole_roleIdToRole")
  Role                                            Role?            @relation("RoleToRole", fields: [parentRoleId], references: [id])
  other_Role                                      Role[]           @relation("RoleToRole")
  Tenant                                          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  RolePermission                                  RolePermission[]

  @@unique([tenantId, code])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([parentRoleId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, isDefault])
  @@index([tenantId, priority])
  @@index([tenantId, roleType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model RolePermission {
  id                                               String           @id @default(uuid(7)) @db.Uuid
  status                                           String           @default("ACTIVE")
  version                                          Int              @default(1)
  createdAt                                        DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                        DateTime         @db.Timestamptz(6)
  tenantId                                         String           @db.Uuid
  deletedAt                                        DateTime?        @db.Timestamptz(6)
  deletedByActorId                                 String?          @db.Uuid
  createdByActorId                                 String?          @db.Uuid
  updatedByActorId                                 String?          @db.Uuid
  auditCorrelationId                               String?          @db.Uuid
  dataClassification                               String           @default("INTERNAL")
  retentionPolicy                                  RetentionPolicy?
  roleId                                           String           @db.Uuid
  permissionId                                     String           @db.Uuid
  memberId                                         String?          @db.Uuid
  isActive                                         Boolean          @default(true)
  isInherited                                      Boolean          @default(false)
  isDenied                                         Boolean          @default(false)
  resourceType                                     String?          @db.VarChar(100)
  resourceId                                       String?          @db.Uuid
  contextData                                      Json?
  validFrom                                        DateTime?        @db.Timestamptz(6)
  validUntil                                       DateTime?        @db.Timestamptz(6)
  conditions                                       Json?
  assignedAt                                       DateTime         @default(now()) @db.Timestamptz(6)
  assignedByMemberId                               String?          @db.Uuid
  assignmentReason                                 String?
  requiresApproval                                 Boolean          @default(false)
  approvedAt                                       DateTime?        @db.Timestamptz(6)
  approvedByMemberId                               String?          @db.Uuid
  revokedAt                                        DateTime?        @db.Timestamptz(6)
  revokedByMemberId                                String?          @db.Uuid
  revocationReason                                 String?
  metadata                                         Json?
  tags                                             String[]         @db.VarChar(50)
  Member_RolePermission_approvedByMemberIdToMember Member?          @relation("RolePermission_approvedByMemberIdToMember", fields: [approvedByMemberId], references: [id])
  Member_RolePermission_assignedByMemberIdToMember Member?          @relation("RolePermission_assignedByMemberIdToMember", fields: [assignedByMemberId], references: [id])
  Member_RolePermission_memberIdToMember           Member?          @relation("RolePermission_memberIdToMember", fields: [memberId], references: [id], onDelete: Cascade)
  Permission                                       Permission       @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  Member_RolePermission_revokedByMemberIdToMember  Member?          @relation("RolePermission_revokedByMemberIdToMember", fields: [revokedByMemberId], references: [id])
  Role                                             Role             @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Tenant                                           Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, roleId, permissionId, memberId])
  @@unique([tenantId, roleId, permissionId, resourceType, resourceId])
  @@index([approvedByMemberId])
  @@index([assignedByMemberId])
  @@index([createdAt], type: Brin)
  @@index([revokedByMemberId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, isDenied])
  @@index([tenantId, memberId])
  @@index([tenantId, permissionId])
  @@index([tenantId, resourceType])
  @@index([tenantId, resourceType, resourceId])
  @@index([tenantId, roleId])
  @@index([tenantId, status])
  @@index([tenantId, validFrom, validUntil])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ScenarioAssumption {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ScenarioPlan {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ScenarioWhatIfRun {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Schedule {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             ScheduleStatus       @default(DRAFT)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  name               String               @db.VarChar(255)
  description        String?
  startDate          DateTime             @db.Date
  endDate            DateTime             @db.Date
  isBaseline         Boolean              @default(false)
  baselineDate       DateTime?            @db.Timestamptz(6)
  projectId          String               @db.Uuid
  Milestone          Milestone[]
  ResourceAllocation ResourceAllocation[]
  Project            Project              @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  ScheduleException  ScheduleException[]
  Task               Task[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, startDate, endDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ScheduleException {
  id                 String                @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus    @default(ACTIVE)
  version            Int                   @default(1)
  createdAt          DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime              @db.Timestamptz(6)
  tenantId           String                @db.Uuid
  deletedAt          DateTime?             @db.Timestamptz(6)
  deletedByActorId   String?               @db.Uuid
  createdByActorId   String?               @db.Uuid
  updatedByActorId   String?               @db.Uuid
  auditCorrelationId String?               @db.Uuid
  dataClassification String                @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  reason             String                @db.VarChar(500)
  description        String?
  exceptionDate      DateTime              @db.Date
  isWorkday          Boolean               @default(false)
  exceptionType      ScheduleExceptionType @default(HOLIDAY)
  affectedHours      Decimal?              @db.Decimal(4, 2)
  isRecurring        Boolean               @default(false)
  approvedAt         DateTime?             @db.Timestamptz(6)
  approvedById       String?               @db.Uuid
  scheduleId         String                @db.Uuid
  Member             Member?               @relation(fields: [tenantId, approvedById], references: [tenantId, id])
  Schedule           Schedule              @relation(fields: [tenantId, scheduleId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, scheduleId, exceptionDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedById])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, exceptionDate])
  @@index([tenantId, exceptionType])
  @@index([tenantId, isRecurring])
  @@index([tenantId, isWorkday])
  @@index([tenantId, scheduleId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ScheduleRisk {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ServiceAccount {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             ServiceAccountStatus @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  tenantId           String               @db.Uuid
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  name               String               @db.VarChar(100)
  description        String?
  email              String?              @db.Citext
  accountType        ServiceAccountType   @default(API)
  purpose            String?              @db.VarChar(255)
  isActive           Boolean              @default(true)
  lastUsedAt         DateTime?            @db.Timestamptz(6)
  expiresAt          DateTime?            @db.Timestamptz(6)
  allowedIpRanges    String[]             @db.VarChar(50)
  allowedDomains     String[]             @db.VarChar(100)
  rateLimitPerHour   Int?                 @default(1000)
  rateLimitPerDay    Int?                 @default(10000)
  ownerId            String               @db.Uuid
  managedByTeam      String?              @db.VarChar(100)
  requiresMfa        Boolean              @default(false)
  monitoringEnabled  Boolean              @default(true)
  alertOnUsage       Boolean              @default(false)
  metadata           Json?
  tags               String[]             @db.VarChar(50)
  Tenant             Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member             Member               @relation(fields: [tenantId, ownerId], references: [tenantId, id])
  ServiceAccountKey  ServiceAccountKey[]

  @@unique([tenantId, email])
  @@unique([tenantId, id])
  @@unique([tenantId, name])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expiresAt])
  @@index([tenantId, isActive])
  @@index([tenantId, lastUsedAt])
  @@index([tenantId, ownerId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ServiceAccountKey {
  id                      String              @id @default(uuid(7)) @db.Uuid
  status                  String              @default("ACTIVE")
  version                 Int                 @default(1)
  createdAt               DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime            @db.Timestamptz(6)
  tenantId                String              @db.Uuid
  deletedAt               DateTime?           @db.Timestamptz(6)
  deletedByActorId        String?             @db.Uuid
  createdByActorId        String?             @db.Uuid
  updatedByActorId        String?             @db.Uuid
  auditCorrelationId      String?             @db.Uuid
  dataClassification      String              @default("CONFIDENTIAL")
  retentionPolicy         RetentionPolicy?
  serviceAccountId        String              @db.Uuid
  name                    String              @db.VarChar(100)
  keyId                   String              @unique @db.VarChar(50)
  keyHash                 String              @db.VarChar(255)
  keyPrefix               String              @db.VarChar(20)
  scopes                  String[]            @db.VarChar(100)
  permissions             String[]            @db.VarChar(100)
  isActive                Boolean             @default(true)
  expiresAt               DateTime?           @db.Timestamptz(6)
  lastUsedAt              DateTime?           @db.Timestamptz(6)
  usageCount              Int                 @default(0)
  rateLimitPerHour        Int?
  rateLimitPerDay         Int?
  allowedIpRanges         String[]            @db.VarChar(50)
  rotatedFromKeyId        String?             @db.Uuid
  rotatedAt               DateTime?           @db.Timestamptz(6)
  createdById             String              @db.Uuid
  metadata                Json?
  ServiceAccountKey       ServiceAccountKey?  @relation("ServiceAccountKeyToServiceAccountKey", fields: [rotatedFromKeyId], references: [id])
  other_ServiceAccountKey ServiceAccountKey[] @relation("ServiceAccountKeyToServiceAccountKey")
  Member                  Member              @relation(fields: [tenantId, createdById], references: [tenantId, id])
  Tenant                  Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  ServiceAccount          ServiceAccount      @relation(fields: [tenantId, serviceAccountId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, serviceAccountId, name])
  @@index([createdAt], type: Brin)
  @@index([keyId])
  @@index([keyPrefix])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, createdById])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, expiresAt])
  @@index([tenantId, isActive])
  @@index([tenantId, lastUsedAt])
  @@index([tenantId, serviceAccountId])
  @@index([tenantId, status])
}

model ServiceType {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Session {
  id                                          String           @id @default(uuid(7)) @db.Uuid
  status                                      SessionStatus    @default(ACTIVE)
  version                                     Int              @default(1)
  createdAt                                   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                   DateTime         @db.Timestamptz(6)
  tenantId                                    String           @db.Uuid
  deletedAt                                   DateTime?        @db.Timestamptz(6)
  deletedByActorId                            String?          @db.Uuid
  createdByActorId                            String?          @db.Uuid
  updatedByActorId                            String?          @db.Uuid
  auditCorrelationId                          String?          @db.Uuid
  dataClassification                          String           @default("CONFIDENTIAL")
  retentionPolicy                             RetentionPolicy?
  userId                                      String           @db.Uuid
  memberId                                    String?          @db.Uuid
  sessionToken                                String           @unique @db.VarChar(255)
  hashedToken                                 String           @db.VarChar(255)
  refreshToken                                String?          @unique @db.VarChar(255)
  hashedRefreshToken                          String?          @db.VarChar(255)
  expiresAt                                   DateTime         @db.Timestamptz(6)
  refreshExpiresAt                            DateTime?        @db.Timestamptz(6)
  lastAccessedAt                              DateTime         @default(now()) @db.Timestamptz(6)
  deviceId                                    String?          @db.Uuid
  deviceFingerprint                           String?          @db.VarChar(255)
  userAgent                                   String?
  ipAddress                                   String?          @db.VarChar(45)
  location                                    Json?
  isSecure                                    Boolean          @default(true)
  isMfaVerified                               Boolean          @default(false)
  riskScore                                   Int              @default(0)
  terminatedAt                                DateTime?        @db.Timestamptz(6)
  terminationReason                           String?
  terminatedByMemberId                        String?          @db.Uuid
  activityCount                               Int              @default(0)
  lastActivityType                            String?          @db.VarChar(100)
  metadata                                    Json?
  Member_Session_memberIdToMember             Member?          @relation("Session_memberIdToMember", fields: [memberId], references: [id], onDelete: Cascade)
  Tenant                                      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member_Session_terminatedByMemberIdToMember Member?          @relation("Session_terminatedByMemberIdToMember", fields: [terminatedByMemberId], references: [id])
  User                                        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, refreshToken])
  @@unique([tenantId, sessionToken])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deviceId])
  @@index([tenantId, expiresAt])
  @@index([tenantId, ipAddress])
  @@index([tenantId, isMfaVerified])
  @@index([tenantId, lastAccessedAt])
  @@index([tenantId, memberId])
  @@index([tenantId, status])
  @@index([tenantId, userId])
  @@index([terminatedByMemberId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SignatureArtifact {
  id                      String              @id @default(uuid(7)) @db.Uuid
  status                  ArtifactStatus      @default(ACTIVE)
  version                 Int                 @default(1)
  createdAt               DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime            @db.Timestamptz(6)
  tenantId                String              @db.Uuid
  deletedAt               DateTime?           @db.Timestamptz(6)
  deletedByActorId        String?             @db.Uuid
  createdByActorId        String?             @db.Uuid
  updatedByActorId        String?             @db.Uuid
  auditCorrelationId      String?             @db.Uuid
  dataClassification      String              @default("CONFIDENTIAL")
  retentionPolicy         RetentionPolicy?
  envelopeId              String              @db.Uuid
  sessionId               String?             @db.Uuid
  artifactType            ArtifactType
  artifactName            String              @db.VarChar(255)
  description             String?
  fileObjectId            String              @db.Uuid
  fileName                String              @db.VarChar(255)
  fileSize                BigInt
  mimeType                String              @db.VarChar(100)
  fileHash                String?             @db.VarChar(255)
  generatedAt             DateTime            @default(now()) @db.Timestamptz(6)
  generatedBy             String?             @db.VarChar(100)
  generationTime          Int?                @default(0)
  templateUsed            String?             @db.VarChar(100)
  pageCount               Int?                @default(0)
  signatureCount          Int?                @default(0)
  initialCount            Int?                @default(0)
  fieldCount              Int?                @default(0)
  recipientCount          Int?                @default(0)
  artifactVersion         String              @default("1.0") @db.VarChar(20)
  isLatest                Boolean             @default(true)
  parentArtifactId        String?             @db.Uuid
  isEncrypted             Boolean             @default(false)
  encryptionMethod        String?             @db.VarChar(50)
  certificateInfo         String?
  tamperSeal              String?             @db.VarChar(255)
  complianceFlags         String[]            @db.VarChar(50)
  providerArtifactId      String?             @db.VarChar(255)
  providerUrl             String?             @db.VarChar(1000)
  providerMetadata        String?
  syncStatus              String?             @default("SYNCED") @db.VarChar(20)
  lastSyncAt              DateTime?           @db.Timestamptz(6)
  isPublic                Boolean             @default(false)
  accessUrl               String?             @db.VarChar(1000)
  accessExpiry            DateTime?           @db.Timestamptz(6)
  downloadCount           Int                 @default(0)
  lastDownloadAt          DateTime?           @db.Timestamptz(6)
  retentionDate           DateTime?           @db.Timestamptz(6)
  archivalDate            DateTime?           @db.Timestamptz(6)
  isArchived              Boolean             @default(false)
  archivalLocation        String?             @db.VarChar(255)
  disposalDate            DateTime?           @db.Timestamptz(6)
  ESignatureEnvelope      ESignatureEnvelope  @relation(fields: [tenantId, envelopeId], references: [tenantId, id], onDelete: Cascade)
  FileObject              FileObject          @relation(fields: [tenantId, fileObjectId], references: [tenantId, id])
  Tenant                  Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  SignatureArtifact       SignatureArtifact?  @relation("SignatureArtifactToSignatureArtifact", fields: [tenantId, parentArtifactId], references: [tenantId, id], onDelete: NoAction)
  other_SignatureArtifact SignatureArtifact[] @relation("SignatureArtifactToSignatureArtifact")
  SignatureSession        SignatureSession?   @relation(fields: [tenantId, sessionId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, artifactType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, disposalDate])
  @@index([tenantId, envelopeId])
  @@index([tenantId, fileObjectId])
  @@index([tenantId, generatedAt])
  @@index([tenantId, isArchived])
  @@index([tenantId, isLatest])
  @@index([tenantId, isPublic])
  @@index([tenantId, parentArtifactId])
  @@index([tenantId, providerArtifactId])
  @@index([tenantId, retentionDate])
  @@index([tenantId, sessionId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SignatureEvent {
  id                 String                    @id @default(uuid(7)) @db.Uuid
  status             PlatformTenantChildStatus @default(ACTIVE)
  version            Int                       @default(1)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @db.Timestamptz(6)
  tenantId           String                    @db.Uuid
  deletedAt          DateTime?                 @db.Timestamptz(6)
  deletedByActorId   String?                   @db.Uuid
  createdByActorId   String?                   @db.Uuid
  updatedByActorId   String?                   @db.Uuid
  auditCorrelationId String?                   @db.Uuid
  dataClassification String                    @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  signatureType      String                    @db.VarChar(50)
  signedById         String                    @db.Uuid
  signatureHash      String                    @db.VarChar(255)
  signatureData      Json?
  ipAddress          String?                   @db.VarChar(45)
  userAgent          String?
  signedAt           DateTime                  @default(now()) @db.Timestamptz(6)
  isVerified         Boolean                   @default(false)
  verifiedAt         DateTime?                 @db.Timestamptz(6)
  verificationMethod String?                   @db.VarChar(50)
  Tenant             Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member             Member                    @relation(fields: [tenantId, signedById], references: [tenantId, id])
  Task               Task[]
  TaskAssignment     TaskAssignment[]
  TaskChecklistItem  TaskChecklistItem[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isVerified])
  @@index([tenantId, signatureType])
  @@index([tenantId, signedAt])
  @@index([tenantId, signedById])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SignatureIntent {
  id                  String                @id @default(uuid(7)) @db.Uuid
  status              SignatureIntentStatus @default(PENDING)
  version             Int                   @default(1)
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @db.Timestamptz(6)
  tenantId            String                @db.Uuid
  deletedAt           DateTime?             @db.Timestamptz(6)
  deletedByActorId    String?               @db.Uuid
  createdByActorId    String?               @db.Uuid
  updatedByActorId    String?               @db.Uuid
  auditCorrelationId  String?               @db.Uuid
  dataClassification  String                @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  sessionId           String                @db.Uuid
  recipientId         String                @db.Uuid
  intentType          SignatureIntentType
  signatureType       SignatureType         @default(ELECTRONIC)
  action              String                @db.VarChar(50)
  pageNumber          Int?
  positionX           Decimal?              @db.Decimal(10, 4)
  positionY           Decimal?              @db.Decimal(10, 4)
  width               Decimal?              @db.Decimal(10, 4)
  height              Decimal?              @db.Decimal(10, 4)
  signatureText       String?               @db.VarChar(255)
  initialText         String?               @db.VarChar(10)
  dateText            String?               @db.VarChar(50)
  customText          String?               @db.VarChar(255)
  checkboxChecked     Boolean?
  dropdownValue       String?               @db.VarChar(100)
  reason              String?
  intentedAt          DateTime              @default(now()) @db.Timestamptz(6)
  completedAt         DateTime?             @db.Timestamptz(6)
  processedAt         DateTime?             @db.Timestamptz(6)
  isValid             Boolean               @default(true)
  validationHash      String?               @db.VarChar(255)
  biometricData       String?
  pressurePoints      String?
  timeStamps          String?
  deviceType          String?               @db.VarChar(50)
  inputMethod         String?               @db.VarChar(50)
  deviceId            String?               @db.VarChar(255)
  gpsLocation         String?               @db.VarChar(255)
  networkInfo         String?               @db.VarChar(255)
  providerIntentId    String?               @db.VarChar(255)
  providerData        String?
  isError             Boolean               @default(false)
  errorMessage        String?
  errorCode           String?               @db.VarChar(50)
  retryCount          Int                   @default(0)
  lastRetryAt         DateTime?             @db.Timestamptz(6)
  Tenant              Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  ESignatureRecipient ESignatureRecipient   @relation(fields: [tenantId, recipientId], references: [tenantId, id], onDelete: Cascade)
  SignatureSession    SignatureSession      @relation(fields: [tenantId, sessionId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, completedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, intentType])
  @@index([tenantId, intentedAt])
  @@index([tenantId, isError])
  @@index([tenantId, isValid])
  @@index([tenantId, providerIntentId])
  @@index([tenantId, recipientId])
  @@index([tenantId, sessionId])
  @@index([tenantId, signatureType])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SignatureSession {
  id                     String                 @id @default(uuid(7)) @db.Uuid
  status                 SignatureSessionStatus @default(ACTIVE)
  version                Int                    @default(1)
  createdAt              DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime               @db.Timestamptz(6)
  tenantId               String                 @db.Uuid
  deletedAt              DateTime?              @db.Timestamptz(6)
  deletedByActorId       String?                @db.Uuid
  createdByActorId       String?                @db.Uuid
  updatedByActorId       String?                @db.Uuid
  auditCorrelationId     String?                @db.Uuid
  dataClassification     String                 @default("CONFIDENTIAL")
  retentionPolicy        RetentionPolicy?
  envelopeId             String                 @db.Uuid
  recipientId            String                 @db.Uuid
  sessionToken           String                 @db.VarChar(255)
  sessionUrl             String?                @db.VarChar(1000)
  returnUrl              String?                @db.VarChar(500)
  startedAt              DateTime               @default(now()) @db.Timestamptz(6)
  lastActivity           DateTime               @default(now()) @db.Timestamptz(6)
  completedAt            DateTime?              @db.Timestamptz(6)
  expiredAt              DateTime?              @db.Timestamptz(6)
  expiresAt              DateTime               @db.Timestamptz(6)
  ipAddress              String?                @db.VarChar(45)
  userAgent              String?                @db.VarChar(500)
  deviceInfo             String?                @db.VarChar(255)
  location               String?                @db.VarChar(255)
  timezone               String?                @db.VarChar(50)
  authenticationAttempts Int                    @default(0)
  authenticationSuccess  Boolean                @default(false)
  authenticationMethod   String?                @db.VarChar(50)
  authenticationAt       DateTime?              @db.Timestamptz(6)
  documentsViewed        Int                    @default(0)
  pagesViewed            Int                    @default(0)
  timeSpentSeconds       Int                    @default(0)
  activityLog            String?
  providerSessionId      String?                @db.VarChar(255)
  providerUrl            String?                @db.VarChar(1000)
  providerToken          String?                @db.VarChar(500)
  errorCount             Int                    @default(0)
  lastError              String?
  lastErrorAt            DateTime?              @db.Timestamptz(6)
  recoveryToken          String?                @db.VarChar(255)
  SignatureArtifact      SignatureArtifact[]
  SignatureIntent        SignatureIntent[]
  ESignatureEnvelope     ESignatureEnvelope     @relation(fields: [tenantId, envelopeId], references: [tenantId, id], onDelete: Cascade)
  Tenant                 Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  ESignatureRecipient    ESignatureRecipient    @relation(fields: [tenantId, recipientId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, sessionToken])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, authenticationSuccess])
  @@index([tenantId, completedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, envelopeId])
  @@index([tenantId, expiredAt])
  @@index([tenantId, expiresAt])
  @@index([tenantId, ipAddress])
  @@index([tenantId, lastActivity])
  @@index([tenantId, providerSessionId])
  @@index([tenantId, recipientId])
  @@index([tenantId, startedAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SnapshotCube {
  id               String    @id @default(uuid(7)) @db.Uuid
  // Lifecycle
  status           String    @default("ACTIVE") @db.VarChar(20)
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid

  // Enterprise
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Cube metadata
  name              String    @db.VarChar(255)
  code              String?   @db.VarChar(50)
  description       String?
  grain             String?   @db.VarChar(50) // e.g., DAILY, MONTHLY
  isMaterialized    Boolean   @default(true)
  latestPartitionAt DateTime? @db.Timestamptz(6)

  // Relations
  SnapshotCubePartition SnapshotCubePartition[]
  MetricSnapshot        MetricSnapshot[]
  KPIAggregate          KPIAggregate[]

  @@unique([tenantId, id])
  @@unique([tenantId, code])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, latestPartitionAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SnapshotCubePartition {
  id               String    @id @default(uuid(7)) @db.Uuid
  // Lifecycle
  status           String    @default("ACTIVE") @db.VarChar(20)
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid

  // Enterprise
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Partition metadata
  cubeId       String    @db.Uuid
  partitionKey String    @db.VarChar(100)
  periodStart  DateTime  @db.Date
  periodEnd    DateTime? @db.Date
  recordCount  Int?
  storageUrl   String?   @db.VarChar(500)

  SnapshotCube   SnapshotCube     @relation(fields: [tenantId, cubeId], references: [tenantId, id], onDelete: Cascade)
  MetricSnapshot MetricSnapshot[]
  KPIAggregate   KPIAggregate[]

  @@unique([tenantId, id])
  @@unique([tenantId, cubeId, partitionKey])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, cubeId])
  @@index([tenantId, periodStart])
  @@index([tenantId, status])
}

model StateProvince {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Submittal {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             SubmittalStatus     @default(SUBMITTED)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  submittedDate      DateTime?           @db.Date
  reviewDate         DateTime?           @db.Date
  projectId          String              @db.Uuid
  Project            Project             @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)
  SubmittalApproval  SubmittalApproval[]
  SubmittalItem      SubmittalItem[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SubmittalApproval {
  id                 String                    @id @default(uuid(7)) @db.Uuid
  version            Int                       @default(1)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @db.Timestamptz(6)
  tenantId           String                    @db.Uuid
  deletedAt          DateTime?                 @db.Timestamptz(6)
  deletedByActorId   String?                   @db.Uuid
  createdByActorId   String?                   @db.Uuid
  updatedByActorId   String?                   @db.Uuid
  auditCorrelationId String?                   @db.Uuid
  dataClassification String                    @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  decision           SubmittalApprovalDecision @default(PENDING)
  approverId         String?                   @db.Uuid
  requestedAt        DateTime?                 @db.Timestamptz(6)
  decidedAt          DateTime?                 @db.Timestamptz(6)
  comments           String?
  submittalId        String                    @db.Uuid
  Submittal          Submittal                 @relation(fields: [tenantId, submittalId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approverId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, decidedAt])
  @@index([tenantId, decision])
  @@index([tenantId, deletedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SubmittalItem {
  id                 String              @id @default(uuid(7)) @db.Uuid
  status             SubmittalItemStatus @default(DRAFT)
  version            Int                 @default(1)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime            @db.Timestamptz(6)
  tenantId           String              @db.Uuid
  deletedAt          DateTime?           @db.Timestamptz(6)
  deletedByActorId   String?             @db.Uuid
  createdByActorId   String?             @db.Uuid
  updatedByActorId   String?             @db.Uuid
  auditCorrelationId String?             @db.Uuid
  dataClassification String              @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  title              String
  description        String?
  submittedAt        DateTime?           @db.Timestamptz(6)
  approvedAt         DateTime?           @db.Timestamptz(6)
  dueDate            DateTime?           @db.Date
  reviewerId         String?             @db.Uuid
  submittalId        String              @db.Uuid
  Member             Member?             @relation(fields: [tenantId, reviewerId], references: [tenantId, id])
  Submittal          Submittal           @relation(fields: [tenantId, submittalId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, reviewerId])
  @@index([tenantId, status])
  @@index([tenantId, submittalId])
  @@index([tenantId, submittedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SyncJob {
  id                      String                @id @default(uuid(7)) @db.Uuid
  status                  SyncJobStatus         @default(QUEUED)
  version                 Int                   @default(1)
  createdAt               DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime              @db.Timestamptz(6)
  tenantId                String                @db.Uuid
  deletedAt               DateTime?             @db.Timestamptz(6)
  deletedByActorId        String?               @db.Uuid
  createdByActorId        String?               @db.Uuid
  updatedByActorId        String?               @db.Uuid
  globalId                String                @unique @db.Uuid
  auditCorrelationId      String?               @db.Uuid
  dataClassification      String                @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy         RetentionPolicy?
  integrationConnectionId String                @db.Uuid
  jobName                 String                @db.VarChar(255)
  description             String?
  syncJobType             SyncJobType           @default(MANUAL_SYNC)
  syncDirection           SyncDirection         @default(BIDIRECTIONAL)
  jobPriority             JobPriority           @default(NORMAL)
  scheduledAt             DateTime?             @db.Timestamptz(6)
  startedAt               DateTime?             @db.Timestamptz(6)
  completedAt             DateTime?             @db.Timestamptz(6)
  estimatedDuration       Int?
  actualDuration          Int?
  cronExpression          String?               @db.VarChar(100)
  isRecurring             Boolean               @default(false)
  nextRunAt               DateTime?             @db.Timestamptz(6)
  lastRunAt               DateTime?             @db.Timestamptz(6)
  maxRuns                 Int?
  currentRunCount         Int                   @default(0)
  entityTypes             String?
  entityFilters           String?
  dateRangeFrom           DateTime?             @db.Timestamptz(6)
  dateRangeTo             DateTime?             @db.Timestamptz(6)
  batchSize               Int?                  @default(100)
  maxRecords              Int?
  executionContext        String?
  configurationSnapshot   String?
  environmentVariables    String?
  processId               String?               @db.VarChar(100)
  totalRecords            Int?                  @default(0)
  processedRecords        Int                   @default(0)
  successfulRecords       Int                   @default(0)
  failedRecords           Int                   @default(0)
  skippedRecords          Int                   @default(0)
  progressPercentage      Decimal?              @db.Decimal(5, 2)
  retryStrategy           RetryStrategy         @default(EXPONENTIAL)
  maxRetries              Int                   @default(3)
  currentRetryCount       Int                   @default(0)
  retryDelaySeconds       Int?                  @default(60)
  lastRetryAt             DateTime?             @db.Timestamptz(6)
  dependsOnJobs           String?
  blockedByJobs           String?
  triggersJobs            String?
  parentJobId             String?               @db.Uuid
  isParallelExecution     Boolean               @default(false)
  enableAlerts            Boolean               @default(true)
  alertOnFailure          Boolean               @default(true)
  alertOnSuccess          Boolean               @default(false)
  alertRecipients         String?
  slackWebhookUrl         String?               @db.VarChar(500)
  memoryUsageMB           Int?
  cpuUsagePercent         Decimal?              @db.Decimal(5, 2)
  networkBytesSent        BigInt?               @default(0)
  networkBytesReceived    BigInt?               @default(0)
  apiCallsCount           Int                   @default(0)
  logLevel                String?               @db.VarChar(20)
  enableDetailedLogging   Boolean               @default(false)
  logRetentionDays        Int?                  @default(30)
  debugMode               Boolean               @default(false)
  externalJobId           String?               @db.VarChar(255)
  externalJobUrl          String?               @db.VarChar(500)
  webhookUrl              String?               @db.VarChar(500)
  callbackData            String?
  resultData              String?
  outputFiles             String?
  errorSummary            String?
  successSummary          String?
  Tenant                  Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  IntegrationConnection   IntegrationConnection @relation(fields: [tenantId, integrationConnectionId], references: [tenantId, id], onDelete: Cascade)
  SyncJob                 SyncJob?              @relation("SyncJobToSyncJob", fields: [tenantId, parentJobId], references: [tenantId, id], onDelete: NoAction)
  other_SyncJob           SyncJob[]             @relation("SyncJobToSyncJob")
  SyncLog                 SyncLog[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, completedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, integrationConnectionId])
  @@index([tenantId, isRecurring])
  @@index([tenantId, jobPriority])
  @@index([tenantId, nextRunAt])
  @@index([tenantId, parentJobId])
  @@index([tenantId, scheduledAt])
  @@index([tenantId, startedAt])
  @@index([tenantId, status])
  @@index([tenantId, syncJobType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SyncLog {
  id                    String           @id @default(uuid(7)) @db.Uuid
  status                String           @default("ACTIVE")
  version               Int              @default(1)
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime         @db.Timestamptz(6)
  tenantId              String           @db.Uuid
  deletedAt             DateTime?        @db.Timestamptz(6)
  deletedByActorId      String?          @db.Uuid
  createdByActorId      String?          @db.Uuid
  updatedByActorId      String?          @db.Uuid
  globalId              String           @unique @db.Uuid
  auditCorrelationId    String?          @db.Uuid
  dataClassification    String           @default("CONFIDENTIAL") @db.VarChar(50)
  retentionPolicy       RetentionPolicy?
  syncJobId             String           @db.Uuid
  logLevel              LogLevel         @default(INFO)
  logType               LogType          @default(EXECUTION)
  logCategory           LogCategory      @default(SYSTEM)
  message               String
  detailedMessage       String?
  structuredData        String?
  exceptionDetails      String?
  stackTrace            String?
  httpMethod            String?          @db.VarChar(10)
  requestUrl            String?          @db.VarChar(1000)
  requestHeaders        String?
  requestBody           String?
  responseStatus        Int?
  responseHeaders       String?
  responseBody          String?
  responseSize          Int?
  executionStart        DateTime?        @db.Timestamptz(6)
  executionEnd          DateTime?        @db.Timestamptz(6)
  executionDurationMs   Int?
  memoryUsedMB          Int?
  cpuUsagePercent       Decimal?         @db.Decimal(5, 2)
  recordsProcessed      Int?             @default(0)
  recordsSuccessful     Int?             @default(0)
  recordsFailed         Int?             @default(0)
  bytesProcessed        BigInt?          @default(0)
  itemsCreated          Int?             @default(0)
  itemsUpdated          Int?             @default(0)
  itemsDeleted          Int?             @default(0)
  externalSystemId      String?          @db.VarChar(255)
  externalTransactionId String?          @db.VarChar(255)
  apiCallId             String?          @db.VarChar(255)
  rateLimitRemaining    Int?
  rateLimitReset        DateTime?        @db.Timestamptz(6)
  errorCode             String?          @db.VarChar(50)
  errorType             String?          @db.VarChar(100)
  errorSeverity         String?          @db.VarChar(20)
  isRetriable           Boolean?
  retryAttempt          Int?             @default(0)
  maxRetries            Int?
  businessEntityType    String?          @db.VarChar(100)
  businessEntityId      String?          @db.VarChar(255)
  correlationId         String?          @db.Uuid
  sessionId             String?          @db.Uuid
  userId                String?          @db.Uuid
  batchId               String?          @db.Uuid
  ipAddress             String?          @db.VarChar(45)
  userAgent             String?          @db.VarChar(500)
  containsPII           Boolean          @default(false)
  complianceFlags       String?
  sensitiveDataMasked   Boolean          @default(true)
  stepName              String?          @db.VarChar(100)
  stepOrder             Int?
  totalSteps            Int?
  dependentJobIds       String?
  triggeredByEvent      String?          @db.VarChar(100)
  environment           String?          @db.VarChar(50)
  serverName            String?          @db.VarChar(100)
  processId             Int?
  threadId              String?          @db.VarChar(50)
  applicationVersion    String?          @db.VarChar(50)
  tags                  String?
  customFields          String?
  sourceFile            String?          @db.VarChar(255)
  sourceFunction        String?          @db.VarChar(100)
  sourceLineNumber      Int?
  Tenant                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  SyncJob               SyncJob          @relation(fields: [tenantId, syncJobId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, businessEntityType])
  @@index([tenantId, containsPII])
  @@index([tenantId, correlationId])
  @@index([tenantId, createdAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, errorCode])
  @@index([tenantId, executionStart])
  @@index([tenantId, logCategory])
  @@index([tenantId, logLevel])
  @@index([tenantId, logType])
  @@index([tenantId, status])
  @@index([tenantId, syncJobId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SyncState {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SystemLog {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE") @db.VarChar(20)
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid

  // Enterprise fields
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Log details
  timestamp       DateTime               @default(now()) @db.Timestamptz(6)
  level           LogLevel               @default(INFO)
  category        LogCategory            @default(SYSTEM)
  type            LogType                @default(EXECUTION)
  message         String
  details         String?
  entityType      String?                @db.VarChar(100)
  entityId        String?                @db.Uuid
  requestId       String?                @db.Uuid
  correlationId   String?                @db.Uuid
  traceId         String?                @db.VarChar(64)
  spanId          String?                @db.VarChar(64)
  serviceName     String?                @db.VarChar(100)
  environment     String?                @db.VarChar(20)
  // Shadow enum field for gradual rollout — backfill then cutover
  environmentEnum DeploymentEnvironment?
  source          String?                @db.VarChar(100)
  ipAddress       String?                @db.VarChar(45)
  tags            String[]               @db.VarChar(50)
  metadata        Json?

  // Relations (single-sided)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, category])
  @@index([tenantId, dataClassification])
  @@index([tenantId, entityId])
  @@index([tenantId, level])
  @@index([tenantId, timestamp])
  @@index([tenantId, type])
  @@index([tenantId, environmentEnum])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Task {
  id                                                         String               @id @default(uuid(7)) @db.Uuid
  status                                                     WorkItemStatus       @default(DRAFT)
  version                                                    Int                  @default(1)
  createdAt                                                  DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt                                                  DateTime             @db.Timestamptz(6)
  tenantId                                                   String               @db.Uuid
  deletedAt                                                  DateTime?            @db.Timestamptz(6)
  deletedByActorId                                           String?              @db.Uuid
  createdByActorId                                           String?              @db.Uuid
  updatedByActorId                                           String?              @db.Uuid
  auditCorrelationId                                         String?              @db.Uuid
  dataClassification                                         String               @default("INTERNAL")
  retentionPolicy                                            RetentionPolicy?
  title                                                      String               @db.VarChar(255)
  description                                                String?
  taskType                                                   TaskType             @default(OPERATIONAL)
  priority                                                   TaskPriority         @default(MEDIUM)
  businessImpact                                             ImpactLevel          @default(MEDIUM)
  dueDate                                                    DateTime?            @db.Date
  startDate                                                  DateTime?            @db.Date
  completedAt                                                DateTime?            @db.Timestamptz(6)
  estimatedHours                                             Decimal?             @db.Decimal(8, 2)
  actualHours                                                Decimal?             @db.Decimal(8, 2)
  approvalRequired                                           Boolean              @default(false)
  approvedAt                                                 DateTime?            @db.Timestamptz(6)
  approvedById                                               String?              @db.Uuid
  approvalSignatureEventId                                   String?              @db.Uuid
  projectId                                                  String?              @db.Uuid
  scheduleId                                                 String?              @db.Uuid
  ResourceAllocation                                         ResourceAllocation[]
  SignatureEvent                                             SignatureEvent?      @relation(fields: [tenantId, approvalSignatureEventId], references: [tenantId, id])
  Member                                                     Member?              @relation(fields: [tenantId, approvedById], references: [tenantId, id])
  Project                                                    Project?             @relation(fields: [tenantId, projectId], references: [tenantId, id])
  Schedule                                                   Schedule?            @relation(fields: [tenantId, scheduleId], references: [tenantId, id])
  TaskAssignment                                             TaskAssignment[]
  TaskAttachment                                             TaskAttachment[]
  TaskChecklistItem                                          TaskChecklistItem[]
  TaskDependency_TaskDependency_tenantId_predecessorIdToTask TaskDependency[]     @relation("TaskDependency_tenantId_predecessorIdToTask")
  TaskDependency_TaskDependency_tenantId_successorIdToTask   TaskDependency[]     @relation("TaskDependency_tenantId_successorIdToTask")
  weather_alerts                                             weather_alerts[]
  weather_incidents                                          weather_incidents[]
  weather_watches                                            weather_watches[]

  // Actor audit relationships
  CreatedByActor Actor? @relation("TaskCreatedByActor", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("TaskUpdatedByActor", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor? @relation("TaskDeletedByActor", fields: [deletedByActorId], references: [id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvalRequired, approvedAt])
  @@index([tenantId, approvedById])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, businessImpact])
  @@index([tenantId, completedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, estimatedHours])
  @@index([tenantId, priority])
  @@index([tenantId, projectId])
  @@index([tenantId, scheduleId])
  @@index([tenantId, status])
  @@index([tenantId, taskType])
  @@index([tenantId, deletedAt], map: "idx_task_tenant_deleted")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TaskAssignment {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             TaskChildStatus  @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  assignmentRole     AssignmentRole   @default(ASSIGNEE)
  notes              String?
  estimatedHours     Decimal?         @db.Decimal(8, 2)
  actualHours        Decimal?         @db.Decimal(8, 2)
  dailyHours         Decimal?         @db.Decimal(4, 2)
  workloadWeight     Decimal?         @db.Decimal(5, 2)
  isActive           Boolean          @default(true)
  acceptedAt         DateTime?        @db.Timestamptz(6)
  declinedAt         DateTime?        @db.Timestamptz(6)
  startDate          DateTime?        @db.Date
  endDate            DateTime?        @db.Date
  signatureEventId   String?          @db.Uuid
  taskId             String           @db.Uuid
  memberId           String           @db.Uuid
  projectId          String?          @db.Uuid
  Member             Member           @relation(fields: [tenantId, memberId], references: [tenantId, id])
  Project            Project?         @relation(fields: [tenantId, projectId], references: [tenantId, id])
  SignatureEvent     SignatureEvent?  @relation(fields: [tenantId, signatureEventId], references: [tenantId, id])
  Task               Task             @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, taskId, memberId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, acceptedAt])
  @@index([tenantId, assignmentRole])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, memberId])
  @@index([tenantId, projectId])
  @@index([tenantId, signatureEventId])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
  @@index([tenantId, workloadWeight])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TaskAttachment {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             TaskChildStatus    @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  fileName           String
  mimeType           String?
  fileSize           Int?
  uploadedById       String?            @db.Uuid
  attachmentType     TaskAttachmentType @default(DOCUMENT)
  description        String?
  taskId             String             @db.Uuid
  fileObjectId       String?            @db.Uuid
  documentGroupId    String?            @db.Uuid
  DocumentGroup      DocumentGroup?     @relation(fields: [tenantId, documentGroupId], references: [tenantId, id])
  FileObject         FileObject?        @relation(fields: [tenantId, fileObjectId], references: [tenantId, id])
  Task               Task               @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: Cascade)
  Member             Member?            @relation(fields: [tenantId, uploadedById], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, attachmentType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, documentGroupId])
  @@index([tenantId, fileObjectId])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
  @@index([tenantId, uploadedById])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TaskChecklistItem {
  id                                                      String           @id @default(uuid(7)) @db.Uuid
  status                                                  TaskChildStatus  @default(ACTIVE)
  version                                                 Int              @default(1)
  createdAt                                               DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                               DateTime         @db.Timestamptz(6)
  tenantId                                                String           @db.Uuid
  deletedAt                                               DateTime?        @db.Timestamptz(6)
  deletedByActorId                                        String?          @db.Uuid
  createdByActorId                                        String?          @db.Uuid
  updatedByActorId                                        String?          @db.Uuid
  auditCorrelationId                                      String?          @db.Uuid
  dataClassification                                      String           @default("INTERNAL")
  retentionPolicy                                         RetentionPolicy?
  title                                                   String
  description                                             String?
  sortOrder                                               Int              @default(0)
  isCompleted                                             Boolean          @default(false)
  completedAt                                             DateTime?        @db.Timestamptz(6)
  completedById                                           String?          @db.Uuid
  isRequired                                              Boolean          @default(false)
  requiresSignature                                       Boolean          @default(false)
  validatedAt                                             DateTime?        @db.Timestamptz(6)
  validatedById                                           String?          @db.Uuid
  validationSignatureEventId                              String?          @db.Uuid
  validationNotes                                         String?
  taskId                                                  String           @db.Uuid
  Member_TaskChecklistItem_tenantId_completedByIdToMember Member?          @relation("TaskChecklistItem_tenantId_completedByIdToMember", fields: [tenantId, completedById], references: [tenantId, id])
  Task                                                    Task             @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: Cascade)
  Member_TaskChecklistItem_tenantId_validatedByIdToMember Member?          @relation("TaskChecklistItem_tenantId_validatedByIdToMember", fields: [tenantId, validatedById], references: [tenantId, id])
  SignatureEvent                                          SignatureEvent?  @relation(fields: [tenantId, validationSignatureEventId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, completedById])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isCompleted])
  @@index([tenantId, isRequired])
  @@index([tenantId, requiresSignature])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
  @@index([tenantId, validatedById])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TaskDependency {
  id                                               String           @id @default(uuid(7)) @db.Uuid
  status                                           TaskChildStatus  @default(ACTIVE)
  version                                          Int              @default(1)
  createdAt                                        DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                        DateTime         @db.Timestamptz(6)
  tenantId                                         String           @db.Uuid
  deletedAt                                        DateTime?        @db.Timestamptz(6)
  deletedByActorId                                 String?          @db.Uuid
  createdByActorId                                 String?          @db.Uuid
  updatedByActorId                                 String?          @db.Uuid
  auditCorrelationId                               String?          @db.Uuid
  dataClassification                               String           @default("INTERNAL")
  retentionPolicy                                  RetentionPolicy?
  dependencyType                                   DependencyType   @default(FINISH_TO_START)
  lagDays                                          Int?             @default(0)
  notes                                            String?
  predecessorId                                    String           @db.Uuid
  successorId                                      String           @db.Uuid
  Task_TaskDependency_tenantId_predecessorIdToTask Task             @relation("TaskDependency_tenantId_predecessorIdToTask", fields: [tenantId, predecessorId], references: [tenantId, id], onDelete: Cascade)
  Task_TaskDependency_tenantId_successorIdToTask   Task             @relation("TaskDependency_tenantId_successorIdToTask", fields: [tenantId, successorId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, predecessorId, successorId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dependencyType])
  @@index([tenantId, predecessorId])
  @@index([tenantId, status])
  @@index([tenantId, successorId])
}

model TaxJurisdiction {
  id                    String                @id @default(uuid(7)) @db.Uuid
  status                TaxJurisdictionStatus @default(ACTIVE)
  version               Int                   @default(1)
  createdAt             DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime              @db.Timestamptz(6)
  deletedAt             DateTime?             @db.Timestamptz(6)
  deletedByActorId      String?               @db.Uuid
  createdByActorId      String?               @db.Uuid
  updatedByActorId      String?               @db.Uuid
  auditCorrelationId    String?               @db.Uuid
  dataClassification    String                @default("PUBLIC")
  retentionPolicy       RetentionPolicy?
  jurisdictionCode      String                @unique @db.VarChar(20)
  jurisdictionName      String                @db.VarChar(255)
  fullName              String?               @db.VarChar(500)
  jurisdictionType      TaxJurisdictionType
  parentJurisdictionId  String?               @db.Uuid
  countryCode           String                @db.VarChar(2)
  stateCode             String?               @db.VarChar(10)
  level                 Int                   @default(1)
  taxAuthorityName      String?               @db.VarChar(255)
  taxAuthorityCode      String?               @db.VarChar(50)
  website               String?               @db.VarChar(500)
  contactInfo           String?
  timeZone              String?               @db.VarChar(50)
  currency              String                @default("USD") @db.VarChar(3)
  language              String?               @db.VarChar(5)
  dateFormat            String?               @db.VarChar(20)
  filingFrequency       String?               @db.VarChar(20)
  dueDateDay            Int?
  extensionDays         Int?                  @default(0)
  JournalLine           JournalLine[]
  TaxJurisdiction       TaxJurisdiction?      @relation("TaxJurisdictionToTaxJurisdiction", fields: [parentJurisdictionId], references: [id], onDelete: NoAction)
  other_TaxJurisdiction TaxJurisdiction[]     @relation("TaxJurisdictionToTaxJurisdiction")
  TaxRate               TaxRate[]

  @@index([auditCorrelationId])
  @@index([countryCode])
  @@index([createdAt], type: Brin)
  @@index([currency])
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([jurisdictionType])
  @@index([level])
  @@index([parentJurisdictionId])
  @@index([stateCode])
  @@index([status])
}

model TaxRate {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             TaxRateStatus        @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("PUBLIC")
  retentionPolicy    RetentionPolicy?
  taxCode            String               @db.VarChar(50)
  taxName            String               @db.VarChar(255)
  description        String?
  taxType            TaxRateType
  calculationMethod  TaxCalculationMethod @default(PERCENTAGE)
  rate               Decimal              @db.Decimal(8, 6)
  fixedAmount        Decimal?             @db.Decimal(12, 2)
  minimumAmount      Decimal?             @db.Decimal(12, 2)
  maximumAmount      Decimal?             @db.Decimal(12, 2)
  taxJurisdictionId  String               @db.Uuid
  countryCode        String               @db.VarChar(2)
  stateCode          String?              @db.VarChar(10)
  cityCode           String?              @db.VarChar(10)
  postalCode         String?              @db.VarChar(20)
  effectiveFrom      DateTime             @db.Date
  effectiveTo        DateTime?            @db.Date
  isDefault          Boolean              @default(false)
  isInclusive        Boolean              @default(false)
  isReversed         Boolean              @default(false)
  isWithholding      Boolean              @default(false)
  compound           Boolean              @default(false)
  reportingCode      String?              @db.VarChar(50)
  reportingCategory  String?              @db.VarChar(100)
  glAccountId        String?              @db.Uuid
  JournalLine        JournalLine[]
  GLAccount          GLAccount?           @relation(fields: [glAccountId], references: [id], onDelete: NoAction)
  TaxJurisdiction    TaxJurisdiction      @relation(fields: [taxJurisdictionId], references: [id])

  @@unique([taxCode, effectiveFrom])
  @@index([auditCorrelationId])
  @@index([calculationMethod])
  @@index([countryCode])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([effectiveFrom])
  @@index([effectiveTo])
  @@index([glAccountId])
  @@index([isDefault])
  @@index([reportingCode])
  @@index([stateCode])
  @@index([status])
  @@index([taxJurisdictionId])
  @@index([taxType])
}

/// Actor represents any entity that can perform actions in the system
/// This includes users, service accounts, API keys, and system processes
/// Used throughout the system for audit trails and access control
model Actor {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             ActorStatus      @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?

  // Core identification
  actorType   ActorType
  globalId    String    @unique @db.VarChar(255) // Cross-tenant identifier
  displayName String    @db.VarChar(255)
  description String?

  // Entity references (only one should be set based on actorType)
  userId            String? @unique @db.Uuid // For USER type
  serviceAccountId  String? @unique @db.Uuid // For SERVICE_ACCOUNT type
  apiKeyId          String? @unique @db.Uuid // For API_KEY type
  systemProcessName String? @db.VarChar(100) // For SYSTEM type

  // Actor capabilities and constraints
  isActive          Boolean @default(true)
  isSystem          Boolean @default(false)
  canPerformActions Boolean @default(true)
  requiresMfa       Boolean @default(false)

  // Security and monitoring
  lastActivityAt      DateTime? @db.Timestamptz(6)
  lastLoginAt         DateTime? @db.Timestamptz(6)
  lastIpAddress       String?   @db.Inet
  sessionCount        Int       @default(0)
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime? @db.Timestamptz(6)

  // Audit and compliance
  riskScore       Int?     @default(0) @db.SmallInt // 0-100
  complianceLevel String?  @db.VarChar(50)
  auditFlags      String[] @default([])

  // Metadata and context
  tags     String[] @default([])
  metadata Json?    @default("{}")

  // Self-referential relationships for audit trail
  DeletedByActor Actor? @relation("ActorDeletedBy", fields: [deletedByActorId], references: [id])
  CreatedByActor Actor? @relation("ActorCreatedBy", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("ActorUpdatedBy", fields: [updatedByActorId], references: [id])

  ActorsDeleted Actor[] @relation("ActorDeletedBy")
  ActorsCreated Actor[] @relation("ActorCreatedBy")
  ActorsUpdated Actor[] @relation("ActorUpdatedBy")

  // Related entity relationships (these will be added when those models exist)
  // User                  User?         @relation(fields: [userId], references: [id])
  // ServiceAccount        ServiceAccount? @relation(fields: [serviceAccountId], references: [id])
  // ApiKey                ApiKey?       @relation(fields: [apiKeyId], references: [id])

  // =============================================================================
  // CRITICAL MODULE RELATIONSHIPS
  // =============================================================================

  // Financial Modules
  InvoicesCreated Invoice[] @relation("InvoiceCreatedByActor")
  InvoicesUpdated Invoice[] @relation("InvoiceUpdatedByActor")
  InvoicesDeleted Invoice[] @relation("InvoiceDeletedByActor")

  APBillsCreated APBill[] @relation("APBillCreatedByActor")
  APBillsUpdated APBill[] @relation("APBillUpdatedByActor")
  APBillsDeleted APBill[] @relation("APBillDeletedByActor")

  EstimatesCreated Estimate[] @relation("EstimateCreatedByActor")
  EstimatesUpdated Estimate[] @relation("EstimateUpdatedByActor")
  EstimatesDeleted Estimate[] @relation("EstimateDeletedByActor")

  // Project Management
  ProjectsCreated Project[] @relation("ProjectCreatedByActor")
  ProjectsUpdated Project[] @relation("ProjectUpdatedByActor")
  ProjectsDeleted Project[] @relation("ProjectDeletedByActor")

  TasksCreated Task[] @relation("TaskCreatedByActor")
  TasksUpdated Task[] @relation("TaskUpdatedByActor")
  TasksDeleted Task[] @relation("TaskDeletedByActor")

  // Access Control & Identity
  UsersCreated User[] @relation("UserCreatedByActor")
  UsersUpdated User[] @relation("UserUpdatedByActor")
  UsersDeleted User[] @relation("UserDeletedByActor")

  // Procurement
  PurchaseOrdersCreated PurchaseOrder[] @relation("PurchaseOrderCreatedByActor")
  PurchaseOrdersUpdated PurchaseOrder[] @relation("PurchaseOrderUpdatedByActor")
  PurchaseOrdersDeleted PurchaseOrder[] @relation("PurchaseOrderDeletedByActor")

  // Compliance & Audit
  ApprovalRequestsCreated ApprovalRequest[] @relation("ApprovalRequestCreatedByActor")
  ApprovalRequestsUpdated ApprovalRequest[] @relation("ApprovalRequestUpdatedByActor")
  ApprovalRequestsDeleted ApprovalRequest[] @relation("ApprovalRequestDeletedByActor")

  // RoomPlan Module
  RoomScanSessionsCreated RoomScanSession[] @relation("RoomScanSessionCreatedBy")
  RoomScanSessionsUpdated RoomScanSession[] @relation("RoomScanSessionUpdatedBy")
  RoomScanSessionsDeleted RoomScanSession[] @relation("RoomScanSessionDeletedBy")

  RoomModelsCreated RoomModel[] @relation("RoomModelCreatedBy")
  RoomModelsUpdated RoomModel[] @relation("RoomModelUpdatedBy")
  RoomModelsDeleted RoomModel[] @relation("RoomModelDeletedBy")

  RoomAnnotationsCreated RoomAnnotation[] @relation("RoomAnnotationCreatedBy")
  RoomExportsCreated     RoomExport[]     @relation("RoomExportCreatedBy")

  RoomPlanPresetsCreated RoomPlanPreset[] @relation("RoomPlanPresetCreatedBy")
  RoomPlanPresetsUpdated RoomPlanPreset[] @relation("RoomPlanPresetUpdatedBy")

  @@index([actorType])
  @@index([globalId])
  @@index([isActive])
  @@index([isSystem])
  @@index([lastActivityAt])
  @@index([riskScore])
  @@index([complianceLevel])
  @@index([userId])
  @@index([serviceAccountId])
  @@index([apiKeyId])
  @@index([systemProcessName])
  @@index([createdAt], type: Brin)
  @@index([auditCorrelationId])
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([status])
}

model Tenant {
  id                         String                       @id @default(uuid(7)) @db.Uuid
  status                     TenantStatus                 @default(ACTIVE)
  version                    Int                          @default(1)
  createdAt                  DateTime                     @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                     @db.Timestamptz(6)
  deletedAt                  DateTime?                    @db.Timestamptz(6)
  deletedByActorId           String?                      @db.Uuid
  createdByActorId           String?                      @db.Uuid
  updatedByActorId           String?                      @db.Uuid
  auditCorrelationId         String?                      @db.Uuid
  dataClassification         String                       @default("INTERNAL")
  retentionPolicy            RetentionPolicy?
  name                       String                       @db.VarChar(255)
  slug                       String                       @unique @db.Citext
  displayName                String?                      @db.VarChar(255)
  description                String?
  industry                   String?                      @db.VarChar(100)
  website                    String?                      @db.VarChar(500)
  deploymentType             TenantDeploymentType         @default(SHARED)
  isolationLevel             DataIsolationLevel           @default(SHARED_DATABASE)
  tier                       TenantTier                   @default(STARTER)
  region                     TenantRegion                 @default(US_EAST_1)
  migrationStatus            MigrationStatus              @default(NOT_STARTED)
  maxUsers                   Int?                         @default(10)
  maxStorage                 Int?                         @default(1024)
  maxApiCalls                Int?                         @default(10000)
  billingEmail               String?                      @db.Citext
  subscriptionId             String?                      @db.Uuid
  trialEndsAt                DateTime?                    @db.Timestamptz(6)
  subscriptionEndsAt         DateTime?                    @db.Timestamptz(6)
  complianceLevel            String?                      @default("STANDARD")
  encryptionEnabled          Boolean                      @default(true)
  backupEnabled              Boolean                      @default(true)
  AIAction                   AIAction[]
  AIActionRun                AIActionRun[]
  AIAssistantProfile         AIAssistantProfile[]
  AIDocumentChunk            AIDocumentChunk[]
  AIDocumentIndex            AIDocumentIndex[]
  AIEmbedding                AIEmbedding[]
  AIInsight                  AIInsight[]
  AIInsightFeedback          AIInsightFeedback[]
  AIJob                      AIJob[]
  AIJobArtifact              AIJobArtifact[]
  AIPlaybook                 AIPlaybook[]
  AIPlaybookStep             AIPlaybookStep[]
  AIPromptTemplate           AIPromptTemplate[]
  APBill                     APBill[]
  APBillLine                 APBillLine[]
  AbsenceBalance             AbsenceBalance[]
  ApiKey                     ApiKey[]
  ApprovalDecision           ApprovalDecision[]
  ApprovalRequest            ApprovalRequest[]
  ApprovalRule               ApprovalRule[]
  Attachment                 Attachment[]
  AttachmentLink             AttachmentLink[]
  AuthFactor                 AuthFactor[]
  BenefitDependent           BenefitDependent[]
  BenefitEnrollment          BenefitEnrollment[]
  BillApproval               BillApproval[]
  BillPayment                BillPayment[]
  Certification              Certification[]
  Channel                    Channel[]
  ChannelMember              ChannelMember[]
  CompensationComponent      CompensationComponent[]
  CompensationPlan           CompensationPlan[]
  CostCenter                 CostCenter[]
  CreditMemo                 CreditMemo[]
  CreditMemoLine             CreditMemoLine[]
  Department                 Department[]
  DirectChat                 DirectChat[]
  DirectMessage              DirectMessage[]
  DirectMessageRead          DirectMessageRead[]
  DunningNotice              DunningNotice[]
  ESignatureEnvelope         ESignatureEnvelope[]
  ESignatureRecipient        ESignatureRecipient[]
  Employment                 Employment[]
  ExternalShareLink          ExternalShareLink[]
  FileObject                 FileObject[]
  GLAccount                  GLAccount[]
  GoodsReceipt               GoodsReceipt[]
  GoodsReceiptLine           GoodsReceiptLine[]
  Grade                      Grade[]
  HolidayCalendar            HolidayCalendar[]
  IdentityProviderConnection IdentityProviderConnection[]
  IntegrationConnection      IntegrationConnection[]
  IntegrationConnector       IntegrationConnector[]
  IntegrationMapping         IntegrationMapping[]
  IntegrationSecret          IntegrationSecret[]
  Invoice                    Invoice[]
  InvoiceAttachment          InvoiceAttachment[]
  InvoiceLineItem            InvoiceLineItem[]
  InvoiceTax                 InvoiceTax[]
  JobFamily                  JobFamily[]
  JobProfile                 JobProfile[]
  JobProfileAssignment       JobProfileAssignment[]
  JournalEntry               JournalEntry[]
  JournalLine                JournalLine[]
  Leave                      Leave[]
  Location                   Location[]
  Member                     Member[]
  MemberDocument             MemberDocument[]
  MemberRole                 MemberRole[]
  MemberSettings             MemberSettings[]
  Message                    Message[]
  MessageAttachment          MessageAttachment[]
  MessageRead                MessageRead[]
  Milestone                  Milestone[]
  MilestoneDependency        MilestoneDependency[]
  MilestoneStakeholder       MilestoneStakeholder[]
  OrgUnit                    OrgUnit[]
  PasswordResetToken         PasswordResetToken[]
  PayCalendar                PayCalendar[]
  PayGroup                   PayGroup[]
  PayGroupAssignment         PayGroupAssignment[]
  PaymentSchedule            PaymentSchedule[]
  PayrollRun                 PayrollRun[]
  PerformanceGoal            PerformanceGoal[]
  PerformanceReview          PerformanceReview[]
  Position                   Position[]
  PositionAssignment         PositionAssignment[]
  PositionBudget             PositionBudget[]
  PurchaseOrderApproval      PurchaseOrderApproval[]
  PurchaseOrderLine          PurchaseOrderLine[]
  RFQLine                    RFQLine[]
  RFQResponse                RFQResponse[]
  RFQResponseLine            RFQResponseLine[]
  ReasonCode                 ReasonCode[]
  RequestForQuote            RequestForQuote[]
  ResourceAllocation         ResourceAllocation[]
  Role                       Role[]
  RolePermission             RolePermission[]
  ServiceAccount             ServiceAccount[]
  ServiceAccountKey          ServiceAccountKey[]
  Session                    Session[]
  SignatureArtifact          SignatureArtifact[]
  SignatureEvent             SignatureEvent[]
  SignatureIntent            SignatureIntent[]
  SignatureSession           SignatureSession[]
  SyncJob                    SyncJob[]
  SyncLog                    SyncLog[]
  TenantAuditLog             TenantAuditLog[]
  TenantBillingAccount       TenantBillingAccount[]
  TenantEvent                TenantEvent[]
  TenantFeatureFlag          TenantFeatureFlag[]
  TenantMetrics              TenantMetrics[]
  TenantSettings             TenantSettings?
  TenantSubscription         TenantSubscription[]
  TenantUsageRecord          TenantUsageRecord[]
  NumberSequence             NumberSequence[]
  Timesheet                  Timesheet[]
  TrainingEnrollment         TrainingEnrollment[]
  UserDevice                 UserDevice[]
  Vendor                     Vendor[]
  VendorContact              VendorContact[]
  VendorDocument             VendorDocument[]
  Worker                     Worker[]
  external_data_policies     external_data_policies[]
  external_share_audits      external_share_audits[]
  redaction_rules            redaction_rules[]
  watermark_policies         watermark_policies[]
  weather_alert_deliveries   weather_alert_deliveries[]
  weather_alerts             weather_alerts[]
  weather_incidents          weather_incidents[]
  weather_risk_factors       weather_risk_factors[]
  weather_watches            weather_watches[]

  // RoomPlan Relations
  RoomScanSession   RoomScanSession[]
  RoomScanFile      RoomScanFile[]
  RoomModel         RoomModel[]
  RoomMeasurement   RoomMeasurement[]
  RoomObject        RoomObject[]
  RoomSurface       RoomSurface[]
  RoomAnnotation    RoomAnnotation[]
  RoomExport        RoomExport[]
  RoomPlanPreset    RoomPlanPreset[]
  RoomProcessingJob RoomProcessingJob[]

  // Fraud and Delegation Relations
  AnomalyCase          AnomalyCase[]
  AnomalyCaseAction    AnomalyCaseAction[]
  AnomalySignal        AnomalySignal[]
  AnomalySignalFeature AnomalySignalFeature[]
  DelegationConstraint DelegationConstraint[]
  DelegationGrant      DelegationGrant[]
  FraudPolicy          FraudPolicy[]
  FraudPolicyRule      FraudPolicyRule[]
  FraudPolicyScope     FraudPolicyScope[]

  @@index([auditCorrelationId])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([deploymentType])
  @@index([migrationStatus])
  @@index([region])
  @@index([slug])
  @@index([status])
  @@index([subscriptionEndsAt])
  @@index([tier])
  @@index([trialEndsAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantAuditLog {
  id                 String                    @id @default(uuid(7)) @db.Uuid
  status             PlatformTenantChildStatus @default(ACTIVE)
  version            Int                       @default(1)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @db.Timestamptz(6)
  tenantId           String                    @db.Uuid
  deletedAt          DateTime?                 @db.Timestamptz(6)
  deletedByActorId   String?                   @db.Uuid
  createdByActorId   String?                   @db.Uuid
  updatedByActorId   String?                   @db.Uuid
  auditCorrelationId String?                   @db.Uuid
  dataClassification String                    @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  action             AuditAction               @default(READ)
  targetModel        String                    @db.VarChar(100)
  targetId           String?                   @db.Uuid
  targetName         String?                   @db.VarChar(255)
  actorId            String?                   @db.Uuid
  actorType          String?                   @db.VarChar(50)
  actorName          String?                   @db.VarChar(255)
  requestId          String?                   @db.Uuid
  sessionId          String?                   @db.Uuid
  ipAddress          String?                   @db.VarChar(45)
  userAgent          String?
  oldValues          Json?
  newValues          Json?
  changedFields      String[]                  @db.VarChar(100)
  payloadHash        String?                   @db.VarChar(64)
  riskLevel          ImpactLevel               @default(LOW)
  complianceFlags    String[]                  @db.VarChar(50)
  metadata           Json?
  tags               String[]                  @db.VarChar(50)
  success            Boolean                   @default(true)
  errorCode          String?                   @db.VarChar(50)
  errorMessage       String?
  Tenant             Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, action])
  @@index([tenantId, actorId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, createdAt], type: Brin)
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, requestId])
  @@index([tenantId, riskLevel])
  @@index([tenantId, status])
  @@index([tenantId, success])
  @@index([tenantId, targetModel])
  @@index([tenantId, targetModel, targetId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantBillingAccount {
  id                     String               @id @default(uuid(7)) @db.Uuid
  status                 BillingAccountStatus @default(ACTIVE)
  version                Int                  @default(1)
  createdAt              DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime             @db.Timestamptz(6)
  tenantId               String               @db.Uuid
  deletedAt              DateTime?            @db.Timestamptz(6)
  deletedByActorId       String?              @db.Uuid
  createdByActorId       String?              @db.Uuid
  updatedByActorId       String?              @db.Uuid
  auditCorrelationId     String?              @db.Uuid
  dataClassification     String               @default("INTERNAL")
  retentionPolicy        RetentionPolicy?
  paymentProvider        PaymentProvider      @default(STRIPE)
  providerCustomerId     String?              @db.VarChar(255)
  providerAccountId      String?              @db.VarChar(255)
  defaultPaymentMethodId String?              @db.VarChar(255)
  paymentMethodType      String?              @db.VarChar(50)
  billingContactName     String?              @db.VarChar(255)
  billingContactEmail    String?              @db.Citext
  billingContactPhone    String?              @db.VarChar(50)
  billingAddressLine1    String?              @db.VarChar(255)
  billingAddressLine2    String?              @db.VarChar(255)
  billingCity            String?              @db.VarChar(100)
  billingState           String?              @db.VarChar(100)
  billingPostalCode      String?              @db.VarChar(20)
  billingCountry         String?              @db.VarChar(2)
  taxId                  String?              @db.VarChar(50)
  taxExempt              Boolean              @default(false)
  taxExemptReason        String?              @db.VarChar(255)
  currency               String               @default("USD") @db.VarChar(3)
  invoiceDeliveryMethod  String               @default("email") @db.VarChar(20)
  paymentTerms           Int?                 @default(30)
  providerSettings       Json?
  webhookEndpoints       String[]             @db.VarChar(500)
  verificationStatus     String               @default("pending") @db.VarChar(20)
  verifiedAt             DateTime?            @db.Timestamptz(6)
  lastVerificationCheck  DateTime?            @db.Timestamptz(6)
  Tenant                 Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, providerCustomerId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, paymentProvider])
  @@index([tenantId, status])
  @@index([tenantId, verificationStatus])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantEvent {
  id                 String                    @id @default(uuid(7)) @db.Uuid
  status             PlatformTenantChildStatus @default(ACTIVE)
  version            Int                       @default(1)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @db.Timestamptz(6)
  tenantId           String                    @db.Uuid
  deletedAt          DateTime?                 @db.Timestamptz(6)
  deletedByActorId   String?                   @db.Uuid
  createdByActorId   String?                   @db.Uuid
  updatedByActorId   String?                   @db.Uuid
  auditCorrelationId String?                   @db.Uuid
  dataClassification String                    @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  eventType          EventType                 @default(TENANT_PROVISIONED)
  aggregateType      String                    @db.VarChar(100)
  aggregateId        String                    @db.Uuid
  sequence           Int                       @default(1)
  eventName          String                    @db.VarChar(255)
  eventDescription   String?
  occurredAt         DateTime                  @default(now()) @db.Timestamptz(6)
  payload            Json
  payloadSchema      String?                   @db.VarChar(100)
  payloadHash        String?                   @db.VarChar(64)
  actorId            String?                   @db.Uuid
  actorType          String?                   @db.VarChar(50)
  causationId        String?                   @db.Uuid
  correlationId      String?                   @db.Uuid
  streamId           String                    @db.Uuid
  streamPosition     Int                       @default(1)
  expectedVersion    Int?
  processed          Boolean                   @default(false)
  processedAt        DateTime?                 @db.Timestamptz(6)
  projectionVersion  Int?                      @default(1)
  metadata           Json?
  tags               String[]                  @db.VarChar(50)
  isSnapshot         Boolean                   @default(false)
  snapshotVersion    Int?
  Tenant             Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, aggregateType, aggregateId, sequence])
  @@unique([tenantId, id])
  @@unique([tenantId, streamId, streamPosition])
  @@index([occurredAt], type: Brin)
  @@index([tenantId, actorId])
  @@index([tenantId, aggregateType, aggregateId])
  @@index([tenantId, aggregateType])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, causationId])
  @@index([tenantId, correlationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, eventType])
  @@index([tenantId, isSnapshot])
  @@index([tenantId, occurredAt], type: Brin)
  @@index([tenantId, processed])
  @@index([tenantId, status])
  @@index([tenantId, streamId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantFeatureFlag {
  id                 String                    @id @default(uuid(7)) @db.Uuid
  status             PlatformTenantChildStatus @default(ACTIVE)
  version            Int                       @default(1)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @db.Timestamptz(6)
  tenantId           String                    @db.Uuid
  deletedAt          DateTime?                 @db.Timestamptz(6)
  deletedByActorId   String?                   @db.Uuid
  createdByActorId   String?                   @db.Uuid
  updatedByActorId   String?                   @db.Uuid
  auditCorrelationId String?                   @db.Uuid
  dataClassification String                    @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  key                String                    @db.VarChar(100)
  name               String                    @db.VarChar(255)
  description        String?
  enabled            Boolean                   @default(false)
  rolloutPercentage  Int                       @default(0)
  scope              FeatureFlagScope          @default(TENANT)
  targetUserIds      String[]                  @db.Uuid
  targetRoles        String[]                  @db.VarChar(50)
  conditions         Json?
  startDate          DateTime?                 @db.Timestamptz(6)
  endDate            DateTime?                 @db.Timestamptz(6)
  isTemporary        Boolean                   @default(false)
  tags               String[]                  @db.VarChar(50)
  environment        String                    @default("production") @db.VarChar(20)
  priority           Int                       @default(0)
  Tenant             Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, key])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, enabled])
  @@index([tenantId, key, enabled])
  @@index([tenantId, scope])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantMetrics {
  id                        String                    @id @default(uuid(7)) @db.Uuid
  status                    PlatformTenantChildStatus @default(ACTIVE)
  version                   Int                       @default(1)
  createdAt                 DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                  @db.Timestamptz(6)
  tenantId                  String                    @db.Uuid
  deletedAt                 DateTime?                 @db.Timestamptz(6)
  deletedByActorId          String?                   @db.Uuid
  createdByActorId          String?                   @db.Uuid
  updatedByActorId          String?                   @db.Uuid
  auditCorrelationId        String?                   @db.Uuid
  dataClassification        String                    @default("INTERNAL")
  retentionPolicy           RetentionPolicy?
  metricDate                DateTime                  @db.Date
  metricHour                Int?                      @default(0)
  activeUsersCount          Int                       @default(0)
  totalUsersCount           Int                       @default(0)
  newUsersCount             Int                       @default(0)
  loginCount                Int                       @default(0)
  sessionDuration           Int?
  storageUsedMB             Int                       @default(0)
  storageQuotaMB            Int?
  filesCount                Int                       @default(0)
  documentsCount            Int                       @default(0)
  apiCallsCount             Int                       @default(0)
  apiErrorsCount            Int                       @default(0)
  avgResponseTimeMs         Int?
  bandwidthUsedMB           Int                       @default(0)
  projectsCount             Int                       @default(0)
  activeProjectsCount       Int                       @default(0)
  tasksCount                Int                       @default(0)
  completedTasksCount       Int                       @default(0)
  revenueAmount             Decimal?                  @db.Decimal(15, 2)
  billingAmount             Decimal?                  @db.Decimal(15, 2)
  lastBillingCycleUsage     Decimal?                  @db.Decimal(15, 2)
  featuresUsedCount         Int                       @default(0)
  integrationsCount         Int                       @default(0)
  reportsGenerated          Int                       @default(0)
  supportTicketsCount       Int                       @default(0)
  avgResolutionTimeHours    Int?
  customerSatisfactionScore Decimal?                  @db.Decimal(3, 2)
  Tenant                    Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, metricDate, metricHour])
  @@index([metricDate], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, metricDate], type: Brin)
  @@index([tenantId, metricDate, metricHour])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantPriceList {
  id                         String            @id @default(uuid(7)) @db.Uuid
  status                     CRMChildStatus    @default(ACTIVE)
  version                    Int               @default(1)
  createdAt                  DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime          @db.Timestamptz(6)
  tenantId                   String            @db.Uuid
  deletedAt                  DateTime?         @db.Timestamptz(6)
  deletedByActorId           String?           @db.Uuid
  createdByActorId           String?           @db.Uuid
  updatedByActorId           String?           @db.Uuid
  auditCorrelationId         String?           @db.Uuid
  dataClassification         String            @default("INTERNAL")
  retentionPolicy            RetentionPolicy?
  isDefault                  Boolean           @default(false)
  activatedAt                DateTime          @default(now()) @db.Timestamptz(6)
  deactivatedAt              DateTime?         @db.Timestamptz(6)
  priceListId                String            @db.Uuid
  PriceList                  PriceList         @relation(fields: [priceListId], references: [id])
  // TODO: Back-relation for CustomerSegment default price list; additive and RLS-safe
  CustomerSegmentsDefaultFor CustomerSegment[] @relation("CustomerSegmentDefaultTenantPriceList")

  @@unique([tenantId, id])
  @@unique([tenantId, priceListId])
  @@index([createdAt], type: Brin)
  @@index([priceListId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isDefault])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantPriceOverride {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             String           @default("ACTIVE")
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  overridePrice      Decimal          @db.Decimal(12, 4)
  discountPercent    Decimal?         @db.Decimal(5, 2)
  reason             String?
  approvedBy         String?          @db.Uuid
  approvedAt         DateTime?        @db.Timestamptz(6)
  effectiveDate      DateTime?        @db.Date
  expiryDate         DateTime?        @db.Date
  priceListItemId    String           @db.Uuid
  PriceListItem      PriceListItem    @relation(fields: [priceListItemId], references: [id])

  @@unique([tenantId, id])
  @@unique([tenantId, priceListItemId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedBy])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AccountInsurance {
  id                    String           @id @default(uuid(7)) @db.Uuid
  status                CRMChildStatus   @default(ACTIVE)
  version               Int              @default(1)
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime         @db.Timestamptz(6)
  tenantId              String           @db.Uuid
  deletedAt             DateTime?        @db.Timestamptz(6)
  deletedByActorId      String?          @db.Uuid
  createdByActorId      String?          @db.Uuid
  updatedByActorId      String?          @db.Uuid
  auditCorrelationId    String?          @db.Uuid
  dataClassification    String           @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  // Insurance Classification
  insuranceType         InsuranceType
  insuranceSubtype      String?          @db.VarChar(100)
  policyNumber          String           @db.VarChar(100)
  carrierName           String           @db.VarChar(255)
  carrierAMRating       String?          @db.VarChar(10)
  brokerName            String?          @db.VarChar(255)
  brokerContact         String?          @db.VarChar(255)
  // Coverage Details
  coverageAmount        Decimal          @db.Decimal(15, 2)
  deductible            Decimal?         @db.Decimal(12, 2)
  aggregateLimit        Decimal?         @db.Decimal(15, 2)
  perOccurrenceLimit    Decimal?         @db.Decimal(15, 2)
  // Policy Dates
  effectiveDate         DateTime         @db.Date
  expirationDate        DateTime         @db.Date
  renewalDate           DateTime?        @db.Date
  // Premium Information
  annualPremium         Decimal?         @db.Decimal(12, 2)
  paymentFrequency      String?          @db.VarChar(20)
  lastPaymentDate       DateTime?        @db.Date
  nextPaymentDate       DateTime?        @db.Date
  // Requirements & Compliance
  isRequiredForWork     Boolean          @default(true)
  minimumRequired       Decimal?         @db.Decimal(15, 2)
  certificateRequired   Boolean          @default(true)
  additionalInsured     String?
  waiverOfSubrogation   Boolean          @default(false)
  primaryNoncontrib     Boolean          @default(false)
  // Status Tracking
  insuranceStatus       InsuranceStatus  @default(ACTIVE)
  isValidated           Boolean          @default(false)
  validatedAt           DateTime?        @db.Timestamptz(6)
  validatedBy           String?          @db.Uuid
  // Alert & Notification
  renewalNoticeDate     DateTime?        @db.Date
  expirationWarningDays Int?             @default(30)
  alertSent             Boolean          @default(false)
  alertSentDate         DateTime?        @db.Date
  // Files & Documentation
  certificateUrl        String?          @db.VarChar(500)
  policyDocumentUrl     String?          @db.VarChar(500)
  endorsementsUrl       String?          @db.VarChar(500)
  // Notes
  notes                 String?
  internalNotes         String?
  // Relationships
  accountId             String           @db.Uuid
  Account               Account          @relation(fields: [tenantId, accountId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, accountId, policyNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, accountId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, carrierName])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, expirationDate])
  @@index([tenantId, insuranceStatus])
  @@index([tenantId, insuranceType])
  @@index([tenantId, isRequiredForWork])
  @@index([tenantId, renewalDate])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model QuoteApproval {
  id                    String           @id @default(uuid(7)) @db.Uuid
  status                ApprovalStatus   @default(PENDING)
  version               Int              @default(1)
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime         @db.Timestamptz(6)
  tenantId              String           @db.Uuid
  deletedAt             DateTime?        @db.Timestamptz(6)
  deletedByActorId      String?          @db.Uuid
  createdByActorId      String?          @db.Uuid
  updatedByActorId      String?          @db.Uuid
  auditCorrelationId    String?          @db.Uuid
  dataClassification    String           @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  // Approval Details
  approvalLevel         Int              @default(1)
  approvalType          String           @db.VarChar(50)
  reasonRequired        Boolean          @default(false)
  approvalReason        String?
  // Quote Information
  quoteTotalAmount      Decimal          @db.Decimal(15, 2)
  discountAmount        Decimal?         @db.Decimal(12, 2)
  discountPercentage    Decimal?         @db.Decimal(5, 2)
  marginImpact          Decimal?         @db.Decimal(5, 2)
  // Approval Process
  requestedAt           DateTime         @default(now()) @db.Timestamptz(6)
  approvedAt            DateTime?        @db.Timestamptz(6)
  rejectedAt            DateTime?        @db.Timestamptz(6)
  escalatedAt           DateTime?        @db.Timestamptz(6)
  // Fraud Prevention
  requiresJustification Boolean          @default(true)
  justification         String?
  supportingDocuments   String?
  riskScore             Int?
  flaggedReason         String?
  // Approval Decision
  decision              String?          @db.VarChar(20)
  decisionReason        String?
  conditions            String?
  validUntil            DateTime?        @db.Date
  // Actor Tracking
  requestedById         String           @db.Uuid
  approvedById          String?          @db.Uuid
  escalatedToId         String?          @db.Uuid
  // Relationships
  quoteId               String           @db.Uuid
  Quote                 Quote            @relation(fields: [tenantId, quoteId], references: [tenantId, id], onDelete: Cascade)
  RequestedBy           Member           @relation("QuoteApproval_requestedBy", fields: [tenantId, requestedById], references: [tenantId, id])
  ApprovedBy            Member?          @relation("QuoteApproval_approvedBy", fields: [tenantId, approvedById], references: [tenantId, id])
  EscalatedTo           Member?          @relation("QuoteApproval_escalatedTo", fields: [tenantId, escalatedToId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, quoteId, approvalLevel])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvalLevel])
  @@index([tenantId, approvalType])
  @@index([tenantId, approvedAt])
  @@index([tenantId, approvedById])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, escalatedToId])
  @@index([tenantId, quoteId])
  @@index([tenantId, requestedById])
  @@index([tenantId, riskScore])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Territory {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             CRMChildStatus   @default(ACTIVE)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  // Territory Definition
  territoryCode      String           @db.VarChar(20)
  territoryName      String           @db.VarChar(255)
  description        String?
  territoryType      String           @db.VarChar(50)
  // TODO: Optional coverage classification for reporting; nullable to ensure safe migration
  coverageLevel      CoverageLevel?
  // Geographic Boundaries
  regions            String?
  cities             String?
  postalCodes        String?
  boundingBox        String?
  // Service Area
  maxDistanceKm      Decimal?         @db.Decimal(8, 2)
  serviceTypes       String?
  specializations    String?
  // Performance Metrics
  annualQuota        Decimal?         @db.Decimal(15, 2)
  currentQuota       Decimal?         @db.Decimal(15, 2)
  quotaPercent       Decimal?         @db.Decimal(5, 2)
  averageProjectSize Decimal?         @db.Decimal(12, 2)
  totalProjects      Int?             @default(0)
  activeProjects     Int?             @default(0)
  // Territory Management
  managerId          String?          @db.Uuid
  salesRepIds        String?
  crewLeaderIds      String?
  // Priority & Strategy
  priority           Int              @default(5)
  growthTarget       Decimal?         @db.Decimal(5, 2)
  marketPenetration  Decimal?         @db.Decimal(5, 2)
  competitiveLevel   String?          @db.VarChar(20)
  // Operational Details
  isActive           Boolean          @default(true)
  seasonalActive     Boolean?
  preferredContacts  String?
  localPartners      String?
  permitRequirements String?
  // Travel & Logistics
  centralLocation    String?          @db.VarChar(255)
  averageTravelTime  Int?
  fuelCostFactor     Decimal?         @db.Decimal(5, 2)
  lodgingRequired    Boolean          @default(false)
  // Notes
  notes              String?
  strategicNotes     String?
  // Relationships
  Manager            Member?          @relation(fields: [tenantId, managerId], references: [tenantId, id])

  @@unique([tenantId, id])
  @@unique([tenantId, territoryCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, managerId])
  @@index([tenantId, priority])
  @@index([tenantId, status])
  @@index([tenantId, territoryType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CustomerSegment {
  id                   String              @id @default(uuid(7)) @db.Uuid
  status               CRMChildStatus      @default(ACTIVE)
  version              Int                 @default(1)
  createdAt            DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime            @db.Timestamptz(6)
  tenantId             String              @db.Uuid
  deletedAt            DateTime?           @db.Timestamptz(6)
  deletedByActorId     String?             @db.Uuid
  createdByActorId     String?             @db.Uuid
  updatedByActorId     String?             @db.Uuid
  auditCorrelationId   String?             @db.Uuid
  dataClassification   String              @default("INTERNAL")
  retentionPolicy      RetentionPolicy?
  // Segment Definition
  segmentCode          String              @db.VarChar(20)
  segmentName          String              @db.VarChar(255)
  description          String?
  segmentType          CustomerSegmentType @default(COMMERCIAL)
  subSegment           String?             @db.VarChar(100)
  // Customer Characteristics
  minAnnualRevenue     Decimal?            @db.Decimal(15, 2)
  maxAnnualRevenue     Decimal?            @db.Decimal(15, 2)
  minProjectValue      Decimal?            @db.Decimal(12, 2)
  maxProjectValue      Decimal?            @db.Decimal(12, 2)
  avgProjectDuration   Int?
  // Service Requirements
  serviceTypes         String?
  specialRequirements  String?
  paymentTerms         String?             @db.VarChar(50)
  creditRequirements   String?             @db.VarChar(100)
  // Business Metrics
  totalCustomers       Int?                @default(0)
  activeCustomers      Int?                @default(0)
  averageProjectSize   Decimal?            @db.Decimal(12, 2)
  averageMargin        Decimal?            @db.Decimal(5, 2)
  customerLifeValue    Decimal?            @db.Decimal(15, 2)
  churnRate            Decimal?            @db.Decimal(5, 2)
  // Pricing Strategy
  // TODO: Replace scalar FK with explicit relation to tenant-scoped TenantPriceList for governance.
  // Kept nullable for migration safety; backfill can be phased later.
  tenantPriceListId    String?             @db.Uuid
  // TODO: Named relation for clarity; back-relation on TenantPriceList added; nullable-safe for phased migration
  TenantPriceList      TenantPriceList?    @relation("CustomerSegmentDefaultTenantPriceList", fields: [tenantPriceListId], references: [id])
  discountTier         String?             @db.VarChar(20)
  maxDiscountPercent   Decimal?            @db.Decimal(5, 2)
  // Sales & Marketing
  salesApproach        String?             @db.VarChar(100)
  marketingChannels    String?
  competitorsFaced     String?
  // Operational
  priority             Int                 @default(5)
  growthPotential      String?             @db.VarChar(20)
  profitability        String?             @db.VarChar(20)
  riskLevel            String?             @db.VarChar(20)
  // Territory & Geographic
  preferredTerritories String?
  geographicFocus      String?
  // Strategy
  isActive             Boolean             @default(true)
  isTargetSegment      Boolean             @default(true)
  strategicImportance  String?             @db.VarChar(20)
  investmentLevel      String?             @db.VarChar(20)
  // Notes
  notes                String?
  strategicNotes       String?

  @@unique([tenantId, id])
  @@unique([tenantId, segmentCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, isTargetSegment])
  @@index([tenantId, priority])
  @@index([tenantId, segmentType])
  @@index([tenantId, status])
  // TODO: Helpful join index for new relation; safe additive index
  @@index([tenantId, tenantPriceListId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CommissionRule {
  id                  String           @id @default(uuid(7)) @db.Uuid
  status              CRMChildStatus   @default(ACTIVE)
  version             Int              @default(1)
  createdAt           DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime         @db.Timestamptz(6)
  tenantId            String           @db.Uuid
  deletedAt           DateTime?        @db.Timestamptz(6)
  deletedByActorId    String?          @db.Uuid
  createdByActorId    String?          @db.Uuid
  updatedByActorId    String?          @db.Uuid
  auditCorrelationId  String?          @db.Uuid
  dataClassification  String           @default("CONFIDENTIAL")
  retentionPolicy     RetentionPolicy?
  // Rule Definition
  ruleName            String           @db.VarChar(255)
  ruleCode            String           @db.VarChar(20)
  description         String?
  commissionType      CommissionType   @default(PERCENTAGE)
  // Applicability
  salesRole           String?          @db.VarChar(50)
  territoryIds        String?
  customerSegmentIds  String?
  productCategories   String?
  serviceTypes        String?
  // Commission Calculation
  baseRate            Decimal          @db.Decimal(8, 4)
  bonusRate           Decimal?         @db.Decimal(8, 4)
  minimumAmount       Decimal?         @db.Decimal(12, 2)
  maximumAmount       Decimal?         @db.Decimal(12, 2)
  // Tiered Structure
  tier1Threshold      Decimal?         @db.Decimal(15, 2)
  tier1Rate           Decimal?         @db.Decimal(8, 4)
  tier2Threshold      Decimal?         @db.Decimal(15, 2)
  tier2Rate           Decimal?         @db.Decimal(8, 4)
  tier3Threshold      Decimal?         @db.Decimal(15, 2)
  tier3Rate           Decimal?         @db.Decimal(8, 4)
  // Time-based Rules
  effectiveDate       DateTime         @db.Date
  expirationDate      DateTime?        @db.Date
  payoutFrequency     String           @db.VarChar(20)
  payoutDelay         Int?             @default(30)
  // Performance Requirements
  quotaRequired       Boolean          @default(false)
  minQuotaPercent     Decimal?         @db.Decimal(5, 2)
  qualityMetrics      String?
  // Split Rules
  allowSplits         Boolean          @default(false)
  maxSplitPeople      Int?             @default(2)
  splitMethod         String?          @db.VarChar(20)
  // Clawback Rules
  clawbackEnabled     Boolean          @default(false)
  clawbackPeriod      Int?
  clawbackConditions  String?
  // Approval Requirements
  requiresApproval    Boolean          @default(false)
  approvalThreshold   Decimal?         @db.Decimal(12, 2)
  autoApproveUnder    Decimal?         @db.Decimal(12, 2)
  // Calculation Method
  calculationBase     String           @default("GROSS_REVENUE") @db.VarChar(50)
  excludeDiscounts    Boolean          @default(false)
  excludeTaxes        Boolean          @default(true)
  includeChangeOrders Boolean          @default(true)
  // Fraud Prevention
  maxMonthlyPayout    Decimal?         @db.Decimal(15, 2)
  auditRequired       Boolean          @default(false)
  signOffRequired     Boolean          @default(false)
  // Status & Control
  isActive            Boolean          @default(true)
  isPrimary           Boolean          @default(false)
  priority            Int              @default(5)
  // Notes
  notes               String?
  internalNotes       String?

  @@unique([tenantId, id])
  @@unique([tenantId, ruleCode])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, calculationBase])
  @@index([tenantId, commissionType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, isActive])
  @@index([tenantId, isPrimary])
  @@index([tenantId, salesRole])
  @@index([tenantId, status])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantSettings {
  id                        String                    @id @default(uuid(7)) @db.Uuid
  status                    PlatformTenantChildStatus @default(ACTIVE)
  version                   Int                       @default(1)
  createdAt                 DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                  @db.Timestamptz(6)
  tenantId                  String                    @unique @db.Uuid
  deletedAt                 DateTime?                 @db.Timestamptz(6)
  deletedByActorId          String?                   @db.Uuid
  createdByActorId          String?                   @db.Uuid
  updatedByActorId          String?                   @db.Uuid
  auditCorrelationId        String?                   @db.Uuid
  dataClassification        String                    @default("INTERNAL")
  retentionPolicy           RetentionPolicy?
  logoUrl                   String?                   @db.VarChar(500)
  faviconUrl                String?                   @db.VarChar(500)
  primaryColor              String?                   @db.VarChar(7)
  secondaryColor            String?                   @db.VarChar(7)
  accentColor               String?                   @db.VarChar(7)
  displayName               String?                   @db.VarChar(255)
  tagline                   String?                   @db.VarChar(500)
  customCss                 String?
  customJs                  String?
  supportEmail              String?                   @db.Citext
  supportPhone              String?                   @db.VarChar(50)
  supportUrl                String?                   @db.VarChar(500)
  salesEmail                String?                   @db.Citext
  salesPhone                String?                   @db.VarChar(50)
  timezone                  String                    @default("UTC") @db.VarChar(50)
  locale                    String                    @default("en-US") @db.VarChar(10)
  currency                  String                    @default("USD") @db.VarChar(3)
  dateFormat                String                    @default("MM/DD/YYYY") @db.VarChar(20)
  timeFormat                String                    @default("12h") @db.VarChar(5)
  emailNotifications        Boolean                   @default(true)
  smsNotifications          Boolean                   @default(false)
  pushNotifications         Boolean                   @default(true)
  marketingEmails           Boolean                   @default(false)
  maintenanceMode           Boolean                   @default(false)
  publicSignup              Boolean                   @default(true)
  ssoEnabled                Boolean                   @default(false)
  mfaRequired               Boolean                   @default(false)
  apiAccessEnabled          Boolean                   @default(true)
  pmCanDeleteEstimate       Boolean                   @default(false)
  pmCanApproveEstimate      Boolean                   @default(false)
  pmCanConvertEstimate      Boolean                   @default(false)
  pmCanDeleteProject        Boolean                   @default(false)
  pmCanDeleteTask           Boolean                   @default(false)
  pmCanApproveChangeOrder   Boolean                   @default(false)
  pmCanApproveInvoice       Boolean                   @default(false)
  pmCanRejectInvoice        Boolean                   @default(false)
  pmCanApproveTimesheet     Boolean                   @default(false)
  pmCanApproveExpense       Boolean                   @default(false)
  pmCanRejectExpense        Boolean                   @default(false)
  pmCanManageMembers        Boolean                   @default(false)
  pmCanAssignRoles          Boolean                   @default(false)
  pmCanTerminateMembers     Boolean                   @default(false)
  pmCanClosePunchListItem   Boolean                   @default(false)
  pmCanApproveInspection    Boolean                   @default(false)
  pmCanPublishDailyLog      Boolean                   @default(false)
  pmCanPublishReport        Boolean                   @default(false)
  pmCanAuthorizeInventory   Boolean                   @default(false)
  pmCanManageExternalAccess Boolean                   @default(false)
  contractTemplateUrl       String?                   @db.VarChar(500)
  termsTemplateUrl          String?                   @db.VarChar(500)
  customSettings            Json?
  pmCanAccessFinancials     Boolean?                  @default(false)
  Tenant                    Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contractTemplateUrl])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, status])
  @@index([tenantId, termsTemplateUrl])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantSubscription {
  id                     String               @id @default(uuid(7)) @db.Uuid
  status                 SubscriptionStatus   @default(ACTIVE)
  version                Int                  @default(1)
  createdAt              DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime             @db.Timestamptz(6)
  tenantId               String               @db.Uuid
  deletedAt              DateTime?            @db.Timestamptz(6)
  deletedByActorId       String?              @db.Uuid
  createdByActorId       String?              @db.Uuid
  updatedByActorId       String?              @db.Uuid
  auditCorrelationId     String?              @db.Uuid
  dataClassification     String               @default("INTERNAL")
  retentionPolicy        RetentionPolicy?
  planId                 String               @db.VarChar(100)
  planName               String               @db.VarChar(255)
  planDescription        String?
  interval               SubscriptionInterval @default(MONTHLY)
  intervalCount          Int                  @default(1)
  currency               String               @default("USD") @db.VarChar(3)
  unitAmount             Decimal              @db.Decimal(15, 2)
  quantity               Int                  @default(1)
  totalAmount            Decimal              @db.Decimal(15, 2)
  currentPeriodStart     DateTime             @db.Timestamptz(6)
  currentPeriodEnd       DateTime             @db.Timestamptz(6)
  nextBillingDate        DateTime?            @db.Timestamptz(6)
  isTrialing             Boolean              @default(false)
  trialStart             DateTime?            @db.Timestamptz(6)
  trialEnd               DateTime?            @db.Timestamptz(6)
  trialDays              Int?                 @default(0)
  startedAt              DateTime             @default(now()) @db.Timestamptz(6)
  activatedAt            DateTime?            @db.Timestamptz(6)
  pausedAt               DateTime?            @db.Timestamptz(6)
  resumedAt              DateTime?            @db.Timestamptz(6)
  cancelAtPeriodEnd      Boolean              @default(false)
  canceledAt             DateTime?            @db.Timestamptz(6)
  cancellationReason     String?              @db.VarChar(255)
  canceledBy             String?              @db.Uuid
  providerSubscriptionId String?              @db.VarChar(255)
  providerCustomerId     String?              @db.VarChar(255)
  providerPlanId         String?              @db.VarChar(255)
  usageBasedBilling      Boolean              @default(false)
  meteringEnabled        Boolean              @default(false)
  usageLimits            Json?
  discountPercent        Decimal?             @db.Decimal(5, 2)
  discountAmount         Decimal?             @db.Decimal(15, 2)
  promoCode              String?              @db.VarChar(50)
  discountEndsAt         DateTime?            @db.Timestamptz(6)
  metadata               Json?
  tags                   String[]             @db.VarChar(50)
  Tenant                 Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, providerSubscriptionId])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, cancelAtPeriodEnd])
  @@index([tenantId, currentPeriodEnd])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isTrialing])
  @@index([tenantId, nextBillingDate])
  @@index([tenantId, planId])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TenantUsageRecord {
  id                 String                    @id @default(uuid(7)) @db.Uuid
  status             PlatformTenantChildStatus @default(ACTIVE)
  version            Int                       @default(1)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @db.Timestamptz(6)
  tenantId           String                    @db.Uuid
  deletedAt          DateTime?                 @db.Timestamptz(6)
  deletedByActorId   String?                   @db.Uuid
  createdByActorId   String?                   @db.Uuid
  updatedByActorId   String?                   @db.Uuid
  auditCorrelationId String?                   @db.Uuid
  dataClassification String                    @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  metric             UsageMetric               @default(API_CALLS)
  quantity           Decimal                   @db.Decimal(15, 4)
  unit               String                    @db.VarChar(50)
  recordedAt         DateTime                  @db.Timestamptz(6)
  subscriptionId     String?                   @db.Uuid
  billingPeriodStart DateTime?                 @db.Timestamptz(6)
  billingPeriodEnd   DateTime?                 @db.Timestamptz(6)
  resourceId         String?                   @db.Uuid
  resourceType       String?                   @db.VarChar(100)
  userId             String?                   @db.Uuid
  unitPrice          Decimal?                  @db.Decimal(15, 4)
  totalAmount        Decimal?                  @db.Decimal(15, 2)
  currency           String                    @default("USD") @db.VarChar(3)
  isAggregated       Boolean                   @default(false)
  aggregationPeriod  String?                   @db.VarChar(20)
  sourceRecordIds    String[]                  @db.Uuid
  metadata           Json?
  tags               String[]                  @db.VarChar(50)
  processed          Boolean                   @default(false)
  processedAt        DateTime?                 @db.Timestamptz(6)
  invoiceId          String?                   @db.Uuid
  Tenant             Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@index([recordedAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, billingPeriodStart, billingPeriodEnd])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, metric])
  @@index([tenantId, processed])
  @@index([tenantId, recordedAt], type: Brin)
  @@index([tenantId, resourceType, resourceId])
  @@index([tenantId, status])
  @@index([tenantId, subscriptionId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TermsTemplate {
  id               String                    @id @default(uuid(7)) @db.Uuid
  status           PlatformTenantChildStatus @default(ACTIVE)
  version          Int                       @default(1)
  createdAt        DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime                  @db.Timestamptz(6)
  tenantId         String                    @db.Uuid
  deletedAt        DateTime?                 @db.Timestamptz(6)
  deletedByActorId String?                   @db.Uuid
  createdByActorId String?                   @db.Uuid
  updatedByActorId String?                   @db.Uuid
  Estimate         Estimate[]
  Project          Project[]

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, deletedAt])
  @@index([tenantId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Timesheet {
  id                                              String              @id @default(uuid(7)) @db.Uuid
  status                                          TimesheetStatus     @default(DRAFT)
  version                                         Int                 @default(1)
  createdAt                                       DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                                       DateTime            @db.Timestamptz(6)
  tenantId                                        String              @db.Uuid
  deletedAt                                       DateTime?           @db.Timestamptz(6)
  deletedByActorId                                String?             @db.Uuid
  createdByActorId                                String?             @db.Uuid
  updatedByActorId                                String?             @db.Uuid
  auditCorrelationId                              String?             @db.Uuid
  dataClassification                              String              @default("INTERNAL")
  retentionPolicy                                 RetentionPolicy?
  workerId                                        String              @db.Uuid
  periodStartDate                                 DateTime            @db.Date
  periodEndDate                                   DateTime            @db.Date
  totalHours                                      Decimal             @default(0) @db.Decimal(8, 2)
  totalRegularHours                               Decimal             @default(0) @db.Decimal(8, 2)
  totalOvertimeHours                              Decimal             @default(0) @db.Decimal(8, 2)
  totalAmount                                     Decimal             @default(0) @db.Decimal(12, 2)
  submittedAt                                     DateTime?           @db.Timestamptz(6)
  submittedById                                   String?             @db.Uuid
  approvedAt                                      DateTime?           @db.Timestamptz(6)
  approvedById                                    String?             @db.Uuid
  projectId                                       String?             @db.Uuid
  notes                                           String?
  isLocked                                        Boolean             @default(false)
  ClockInClockOut                                 ClockInClockOut[]
  Member_Timesheet_tenantId_approvedByIdToMember  Member?             @relation("Timesheet_tenantId_approvedByIdToMember", fields: [tenantId, approvedById], references: [tenantId, id])
  Tenant                                          Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project                                         Project?            @relation(fields: [tenantId, projectId], references: [tenantId, id])
  Member_Timesheet_tenantId_submittedByIdToMember Member?             @relation("Timesheet_tenantId_submittedByIdToMember", fields: [tenantId, submittedById], references: [tenantId, id])
  Worker                                          Worker              @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)
  TimesheetApproval                               TimesheetApproval[]
  TimesheetEntry                                  TimesheetEntry[]

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, periodStartDate])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedById])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
  @@index([tenantId, status, submittedAt])
  @@index([tenantId, workerId])
  @@index([tenantId, workerId, periodStartDate])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TimesheetApproval {
  id                 String                    @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus    @default(ACTIVE)
  version            Int                       @default(1)
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @db.Timestamptz(6)
  tenantId           String                    @db.Uuid
  deletedAt          DateTime?                 @db.Timestamptz(6)
  deletedByActorId   String?                   @db.Uuid
  createdByActorId   String?                   @db.Uuid
  updatedByActorId   String?                   @db.Uuid
  auditCorrelationId String?                   @db.Uuid
  dataClassification String                    @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  approvalNumber     String                    @db.VarChar(50)
  approvalLevel      Int                       @default(1)
  approvalType       TimesheetApprovalType     @default(STANDARD)
  decision           TimesheetApprovalDecision @default(PENDING)
  decisionDate       DateTime?                 @db.Timestamptz(6)
  requestedAt        DateTime?                 @db.Timestamptz(6)
  dueDate            DateTime?                 @db.Date
  approverId         String?                   @db.Uuid
  approverRole       String?                   @db.VarChar(50)
  delegatedFrom      String?                   @db.Uuid
  delegatedTo        String?                   @db.Uuid
  comment            String?
  conditions         String?
  rejectionReason    String?
  escalationLevel    Int                       @default(0)
  escalatedAt        DateTime?                 @db.Timestamptz(6)
  escalatedTo        String?                   @db.Uuid
  notificationSent   Boolean                   @default(false)
  reminderCount      Int                       @default(0)
  hoursApproved      Decimal?                  @db.Decimal(8, 2)
  amountApproved     Decimal?                  @db.Decimal(12, 4)
  varianceNotes      String?
  timesheetId        String                    @db.Uuid
  Member             Member?                   @relation(fields: [tenantId, approverId], references: [tenantId, id])
  Timesheet          Timesheet                 @relation(fields: [tenantId, timesheetId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, approvalNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvalLevel])
  @@index([tenantId, approverId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, decisionDate])
  @@index([tenantId, decision])
  @@index([tenantId, deletedAt])
  @@index([tenantId, dueDate])
  @@index([tenantId, escalationLevel])
  @@index([tenantId, requestedAt])
  @@index([tenantId, status])
  @@index([tenantId, timesheetId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TimesheetEntry {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             TimePayrollChildStatus @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  entryNumber        String                 @db.VarChar(50)
  workDate           DateTime               @db.Date
  startTime          DateTime?              @db.Timestamptz(6)
  endTime            DateTime?              @db.Timestamptz(6)
  hoursWorked        Decimal                @db.Decimal(8, 2)
  entryType          TimesheetEntryType     @default(REGULAR)
  description        String?
  billable           Boolean                @default(true)
  billableRate       Decimal?               @db.Decimal(12, 4)
  costRate           Decimal?               @db.Decimal(12, 4)
  billableAmount     Decimal?               @db.Decimal(12, 4)
  costAmount         Decimal?               @db.Decimal(12, 4)
  costCodeId         String?                @db.Uuid
  phaseId            String?                @db.Uuid
  activityCode       String?                @db.VarChar(50)
  entryStatus        TimesheetEntryStatus   @default(DRAFT)
  submittedAt        DateTime?              @db.Timestamptz(6)
  approvedAt         DateTime?              @db.Timestamptz(6)
  approvedBy         String?                @db.Uuid
  locationId         String?                @db.Uuid
  equipmentId        String?                @db.Uuid
  timesheetId        String                 @db.Uuid
  taskId             String?                @db.Uuid
  memberId           String?                @db.Uuid
  budgetLineId       String?                @db.Uuid
  ProjectBudgetLine  ProjectBudgetLine?     @relation(fields: [tenantId, budgetLineId], references: [tenantId, id])
  Member             Member?                @relation(fields: [tenantId, memberId], references: [tenantId, id])
  ProjectTask        ProjectTask?           @relation(fields: [tenantId, taskId], references: [tenantId, id])
  Timesheet          Timesheet              @relation(fields: [tenantId, timesheetId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, entryNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, approvedBy])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, billable])
  @@index([tenantId, budgetLineId])
  @@index([tenantId, costCodeId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, entryStatus])
  @@index([tenantId, entryType])
  @@index([tenantId, memberId])
  @@index([tenantId, status])
  @@index([tenantId, taskId])
  @@index([tenantId, timesheetId])
  @@index([tenantId, workDate])
  @@index([tenantId, memberId], map: "idx_timesheet_entry_member")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TrainingEnrollment {
  id                 String           @id @default(uuid(7)) @db.Uuid
  status             TrainingStatus   @default(ENROLLED)
  version            Int              @default(1)
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @db.Timestamptz(6)
  tenantId           String           @db.Uuid
  deletedAt          DateTime?        @db.Timestamptz(6)
  deletedByActorId   String?          @db.Uuid
  createdByActorId   String?          @db.Uuid
  updatedByActorId   String?          @db.Uuid
  auditCorrelationId String?          @db.Uuid
  dataClassification String           @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  workerId           String           @db.Uuid
  trainingId         String           @db.Uuid
  enrollmentDate     DateTime         @db.Date
  startDate          DateTime?        @db.Date
  completionDate     DateTime?        @db.Date
  expirationDate     DateTime?        @db.Date
  score              Decimal?         @db.Decimal(5, 2)
  passingScore       Decimal?         @db.Decimal(5, 2)
  attemptCount       Int              @default(1)
  cost               Decimal?         @db.Decimal(10, 2)
  costCenter         String?          @db.VarChar(50)
  Tenant             Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Worker             Worker           @relation(fields: [tenantId, workerId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, workerId, trainingId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, completionDate])
  @@index([tenantId, dataClassification])
  @@index([tenantId, enrollmentDate])
  @@index([tenantId, expirationDate])
  @@index([tenantId, status])
  @@index([tenantId, workerId])
}

model UnitOfMeasure {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

model User {
  id                 String               @id @default(uuid(7)) @db.Uuid
  status             UserStatus           @default(ACTIVE)
  version            Int                  @default(1)
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  deletedAt          DateTime?            @db.Timestamptz(6)
  deletedByActorId   String?              @db.Uuid
  createdByActorId   String?              @db.Uuid
  updatedByActorId   String?              @db.Uuid
  auditCorrelationId String?              @db.Uuid
  dataClassification String               @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  email              String               @unique @db.Citext
  emailVerified      Boolean              @default(false)
  emailVerifiedAt    DateTime?            @db.Timestamptz(6)
  firstName          String?              @db.VarChar(100)
  lastName           String?              @db.VarChar(100)
  displayName        String?              @db.VarChar(255)
  avatarUrl          String?              @db.VarChar(500)
  passwordHash       String?              @db.VarChar(255)
  passwordSalt       String?              @db.VarChar(255)
  lastPasswordChange DateTime?            @db.Timestamptz(6)
  lastLoginAt        DateTime?            @db.Timestamptz(6)
  lastLoginIp        String?              @db.VarChar(45)
  loginAttempts      Int                  @default(0)
  lockedAt           DateTime?            @db.Timestamptz(6)
  lockedUntil        DateTime?            @db.Timestamptz(6)
  mfaEnabled         Boolean              @default(false)
  mfaSecret          String?              @db.VarChar(255)
  mfaBackupCodes     String[]             @db.VarChar(20)
  timezone           String               @default("UTC") @db.VarChar(50)
  locale             String               @default("en-US") @db.VarChar(10)
  invitedAt          DateTime?            @db.Timestamptz(6)
  invitedByUserId    String?              @db.Uuid
  onboardedAt        DateTime?            @db.Timestamptz(6)
  suspendedAt        DateTime?            @db.Timestamptz(6)
  suspendedReason    String?
  terminatedAt       DateTime?            @db.Timestamptz(6)
  terminationReason  String?
  metadata           Json?
  ApiKey             ApiKey[]
  AuthFactor         AuthFactor[]
  Member             Member[]
  PasswordResetToken PasswordResetToken[]
  Session            Session[]
  User               User?                @relation("UserToUser", fields: [invitedByUserId], references: [id])
  other_User         User[]               @relation("UserToUser")
  UserDevice         UserDevice[]

  // Actor audit relationships
  CreatedByActor Actor? @relation("UserCreatedByActor", fields: [createdByActorId], references: [id])
  UpdatedByActor Actor? @relation("UserUpdatedByActor", fields: [updatedByActorId], references: [id])
  DeletedByActor Actor? @relation("UserDeletedByActor", fields: [deletedByActorId], references: [id])

  @@index([auditCorrelationId])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([emailVerified])
  @@index([email])
  @@index([invitedByUserId])
  @@index([lastLoginAt])
  @@index([status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserDevice {
  id                                          String           @id @default(uuid(7)) @db.Uuid
  status                                      DeviceStatus     @default(PENDING_VERIFICATION)
  version                                     Int              @default(1)
  createdAt                                   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt                                   DateTime         @db.Timestamptz(6)
  tenantId                                    String           @db.Uuid
  deletedAt                                   DateTime?        @db.Timestamptz(6)
  deletedByActorId                            String?          @db.Uuid
  createdByActorId                            String?          @db.Uuid
  updatedByActorId                            String?          @db.Uuid
  auditCorrelationId                          String?          @db.Uuid
  dataClassification                          String           @default("CONFIDENTIAL")
  retentionPolicy                             RetentionPolicy?
  userId                                      String           @db.Uuid
  memberId                                    String?          @db.Uuid
  deviceFingerprint                           String           @unique @db.VarChar(255)
  deviceId                                    String?          @db.VarChar(255)
  deviceName                                  String?          @db.VarChar(255)
  deviceType                                  DeviceType       @default(OTHER)
  userAgent                                   String?
  browserName                                 String?          @db.VarChar(100)
  browserVersion                              String?          @db.VarChar(50)
  osName                                      String?          @db.VarChar(100)
  osVersion                                   String?          @db.VarChar(50)
  appVersion                                  String?          @db.VarChar(50)
  ipAddress                                   String?          @db.VarChar(45)
  ipCountry                                   String?          @db.VarChar(10)
  ipRegion                                    String?          @db.VarChar(100)
  ipCity                                      String?          @db.VarChar(100)
  screenResolution                            String?          @db.VarChar(20)
  colorDepth                                  Int?
  timezone                                    String?          @db.VarChar(50)
  language                                    String?          @db.VarChar(10)
  isTrusted                                   Boolean          @default(false)
  trustLevel                                  Int              @default(0)
  riskLevel                                   ImpactLevel      @default(MEDIUM)
  isVerified                                  Boolean          @default(false)
  verifiedAt                                  DateTime?        @db.Timestamptz(6)
  verificationMethod                          String?          @db.VarChar(50)
  verificationCode                            String?          @db.VarChar(10)
  verificationExpiry                          DateTime?        @db.Timestamptz(6)
  firstSeenAt                                 DateTime         @default(now()) @db.Timestamptz(6)
  lastSeenAt                                  DateTime         @default(now()) @db.Timestamptz(6)
  lastUsedAt                                  DateTime?        @db.Timestamptz(6)
  sessionCount                                Int              @default(0)
  compromisedAt                               DateTime?        @db.Timestamptz(6)
  compromiseReason                            String?
  compromiseEvidence                          Json?
  revokedAt                                   DateTime?        @db.Timestamptz(6)
  revokedReason                               String?
  revokedByMemberId                           String?          @db.Uuid
  isManaged                                   Boolean          @default(false)
  managementProfile                           String?          @db.VarChar(100)
  complianceStatus                            String?          @db.VarChar(50)
  deviceMetadata                              Json?
  securityMetadata                            Json?
  Member_UserDevice_memberIdToMember          Member?          @relation("UserDevice_memberIdToMember", fields: [memberId], references: [id], onDelete: Cascade)
  Member_UserDevice_revokedByMemberIdToMember Member?          @relation("UserDevice_revokedByMemberIdToMember", fields: [revokedByMemberId], references: [id])
  Tenant                                      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  User                                        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, deviceFingerprint])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([revokedByMemberId])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, browserName])
  @@index([tenantId, compromisedAt])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deviceType])
  @@index([tenantId, ipAddress])
  @@index([tenantId, isTrusted])
  @@index([tenantId, isVerified])
  @@index([tenantId, lastSeenAt])
  @@index([tenantId, memberId])
  @@index([tenantId, osName])
  @@index([tenantId, revokedAt])
  @@index([tenantId, status])
  @@index([tenantId, userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Vendor {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             VendorStatus           @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  vendorNumber       String                 @unique @db.VarChar(50)
  vendorName         String                 @db.VarChar(255)
  displayName        String?                @db.VarChar(255)
  vendorType         VendorType             @default(SUPPLIER)
  primaryEmail       String?                @db.Citext
  primaryPhone       String?                @db.VarChar(50)
  website            String?                @db.VarChar(500)
  addressLine1       String?                @db.VarChar(255)
  addressLine2       String?                @db.VarChar(255)
  city               String?                @db.VarChar(100)
  state              String?                @db.VarChar(50)
  postalCode         String?                @db.VarChar(20)
  country            String                 @default("US") @db.VarChar(2)
  paymentTerms       PaymentTerms?
  creditLimit        Decimal?               @db.Decimal(15, 2)
  leadTimeDays       Int?                   @default(7)
  riskRating         VendorRiskRating?
  complianceStatus   VendorComplianceStatus @default(PENDING)
  isPreferred        Boolean                @default(false)
  isApproved         Boolean                @default(false)
  approvedAt         DateTime?              @db.Timestamptz(6)
  approvedById       String?                @db.Uuid
  internalNotes      String?
  APBill             APBill[]
  ApprovalRule       ApprovalRule[]
  GoodsReceipt       GoodsReceipt[]
  JournalLine        JournalLine[]
  PurchaseOrder      PurchaseOrder[]
  RFQResponse        RFQResponse[]
  Member             Member?                @relation(fields: [tenantId, approvedById], references: [tenantId, id], onDelete: NoAction)
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  VendorContact      VendorContact[]
  VendorDocument     VendorDocument[]

  @@unique([tenantId, id])
  @@unique([tenantId, primaryEmail])
  @@unique([tenantId, vendorName])
  @@unique([tenantId, vendorNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, complianceStatus])
  @@index([tenantId, dataClassification])
  @@index([tenantId, isApproved])
  @@index([tenantId, isPreferred])
  @@index([tenantId, riskRating])
  @@index([tenantId, status])
  @@index([tenantId, vendorType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VendorContact {
  id                 String                 @id @default(uuid(7)) @db.Uuid
  status             VendorChildStatus      @default(ACTIVE)
  version            Int                    @default(1)
  createdAt          DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime               @db.Timestamptz(6)
  tenantId           String                 @db.Uuid
  deletedAt          DateTime?              @db.Timestamptz(6)
  deletedByActorId   String?                @db.Uuid
  createdByActorId   String?                @db.Uuid
  updatedByActorId   String?                @db.Uuid
  auditCorrelationId String?                @db.Uuid
  dataClassification String                 @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  contactType        VendorContactType      @default(PRIMARY)
  firstName          String                 @db.VarChar(100)
  lastName           String                 @db.VarChar(100)
  title              String?                @db.VarChar(100)
  department         String?                @db.VarChar(100)
  email              String?                @db.Citext
  phone              String?                @db.VarChar(20)
  mobile             String?                @db.VarChar(20)
  fax                String?                @db.VarChar(20)
  preferredMethod    PreferredContactMethod @default(EMAIL)
  isActive           Boolean                @default(true)
  isPrimary          Boolean                @default(false)
  lastContactedAt    DateTime?              @db.Timestamptz(6)
  bounceFlag         Boolean                @default(false)
  notes              String?
  languageCode       String?                @default("en") @db.VarChar(5)
  timezone           String?                @default("UTC") @db.VarChar(50)
  vendorId           String                 @db.Uuid
  Tenant             Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Vendor             Vendor                 @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, vendorId, contactType])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, contactType])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive])
  @@index([tenantId, isPrimary])
  @@index([tenantId, status])
  @@index([tenantId, vendorId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VendorDocument {
  id                 String                      @id @default(uuid(7)) @db.Uuid
  status             VendorChildStatus           @default(ACTIVE)
  version            Int                         @default(1)
  createdAt          DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                    @db.Timestamptz(6)
  tenantId           String                      @db.Uuid
  deletedAt          DateTime?                   @db.Timestamptz(6)
  deletedByActorId   String?                     @db.Uuid
  createdByActorId   String?                     @db.Uuid
  updatedByActorId   String?                     @db.Uuid
  auditCorrelationId String?                     @db.Uuid
  dataClassification String                      @default("CONFIDENTIAL")
  retentionPolicy    RetentionPolicy?
  documentType       VendorDocumentType
  documentName       String                      @db.VarChar(255)
  fileName           String                      @db.VarChar(255)
  filePath           String                      @db.VarChar(500)
  fileUrl            String                      @db.VarChar(500)
  mimeType           String?                     @db.VarChar(100)
  fileSize           Int?
  checksum           String?                     @db.VarChar(64)
  documentNumber     String?                     @db.VarChar(100)
  issuer             String?                     @db.VarChar(255)
  issuedDate         DateTime?                   @db.Date
  expirationDate     DateTime?                   @db.Date
  isRequired         Boolean                     @default(false)
  verificationStatus DocumentVerificationStatus? @default(PENDING)
  verifiedAt         DateTime?                   @db.Timestamptz(6)
  verifiedById       String?                     @db.Uuid
  description        String?
  notes              String?
  tags               String[]                    @db.VarChar(50)
  vendorId           String                      @db.Uuid
  Tenant             Tenant                      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Member             Member?                     @relation(fields: [tenantId, verifiedById], references: [tenantId, id], onDelete: NoAction)
  Vendor             Vendor                      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, vendorId, documentType, documentNumber])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, documentType])
  @@index([tenantId, expirationDate])
  @@index([tenantId, isRequired])
  @@index([tenantId, status])
  @@index([tenantId, vendorId])
  @@index([tenantId, verificationStatus])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model WBSItem {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             ProjectChildStatus @default(ACTIVE)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("INTERNAL")
  retentionPolicy    RetentionPolicy?
  code               String
  name               String
  description        String?
  level              Int                @default(1)
  parentId           String?            @db.Uuid
  projectId          String             @db.Uuid
  phaseId            String?            @db.Uuid
  ProjectTask        ProjectTask[]
  WBSItem            WBSItem?           @relation("WBSItemToWBSItem", fields: [tenantId, parentId], references: [tenantId, id])
  other_WBSItem      WBSItem[]          @relation("WBSItemToWBSItem")
  ProjectPhase       ProjectPhase?      @relation(fields: [tenantId, phaseId], references: [tenantId, id])
  Project            Project            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, projectId, code])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, level])
  @@index([tenantId, parentId])
  @@index([tenantId, phaseId])
  @@index([tenantId, projectId])
  @@index([tenantId, status])
}

model Webhook {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model WebhookDelivery {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model WebhookEndpoint {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model WebhookEvent {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  tenantId         String    @db.Uuid
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

model WebhookLog {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

model WorkType {
  id               String    @id @default(uuid(7)) @db.Uuid
  status           String    @default("ACTIVE")
  version          Int       @default(1)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @db.Timestamptz(6)
  deletedAt        DateTime? @db.Timestamptz(6)
  deletedByActorId String?   @db.Uuid
  createdByActorId String?   @db.Uuid
  updatedByActorId String?   @db.Uuid
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Worker {
  id                                               String                 @id @default(uuid(7)) @db.Uuid
  status                                           WorkerStatus           @default(ACTIVE)
  version                                          Int                    @default(1)
  createdAt                                        DateTime               @default(now()) @db.Timestamptz(6)
  updatedAt                                        DateTime               @db.Timestamptz(6)
  tenantId                                         String                 @db.Uuid
  deletedAt                                        DateTime?              @db.Timestamptz(6)
  deletedByActorId                                 String?                @db.Uuid
  createdByActorId                                 String?                @db.Uuid
  updatedByActorId                                 String?                @db.Uuid
  auditCorrelationId                               String?                @db.Uuid
  dataClassification                               String                 @default("CONFIDENTIAL")
  retentionPolicy                                  RetentionPolicy?
  personId                                         String                 @db.Uuid
  employeeNumber                                   String                 @unique @db.VarChar(20)
  badgeNumber                                      String?                @db.VarChar(20)
  hireDate                                         DateTime               @db.Date
  originalHireDate                                 DateTime?              @db.Date
  isActive                                         Boolean                @default(true)
  isEligibleRehire                                 Boolean                @default(true)
  workerType                                       String                 @default("EMPLOYEE") @db.VarChar(20)
  exemptStatus                                     Boolean                @default(false)
  unionMember                                      Boolean                @default(false)
  workersCompClass                                 String?                @db.VarChar(50)
  emergencyContactName                             String?                @db.VarChar(200)
  emergencyContactPhone                            String?                @db.VarChar(50)
  AbsenceBalance                                   AbsenceBalance[]
  BenefitEnrollment                                BenefitEnrollment[]
  Certification                                    Certification[]
  CompensationPlan                                 CompensationPlan[]
  Employment_Employment_tenantId_managerIdToWorker Employment[]           @relation("Employment_tenantId_managerIdToWorker")
  Employment_Employment_tenantId_workerIdToWorker  Employment[]           @relation("Employment_tenantId_workerIdToWorker")
  JobProfileAssignment                             JobProfileAssignment[]
  Leave                                            Leave[]
  PayGroupAssignment                               PayGroupAssignment[]
  PerformanceGoal                                  PerformanceGoal[]
  PerformanceReview                                PerformanceReview[]
  PositionAssignment                               PositionAssignment[]
  Timesheet                                        Timesheet[]
  TrainingEnrollment                               TrainingEnrollment[]
  Person                                           Person                 @relation(fields: [personId], references: [id])
  Tenant                                           Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, employeeNumber])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, exemptStatus])
  @@index([tenantId, hireDate])
  @@index([tenantId, isActive])
  @@index([tenantId, personId])
  @@index([tenantId, unionMember])
  @@index([tenantId, workerType])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model external_data_policies {
  id                    String                   @id @default(uuid(7)) @db.Uuid
  status                ExternalDataPolicyStatus @default(ACTIVE)
  version               Int                      @default(1)
  createdAt             DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                 @db.Timestamptz(6)
  tenantId              String                   @db.Uuid
  deletedAt             DateTime?                @db.Timestamptz(6)
  deletedByActorId      String?                  @db.Uuid
  createdByActorId      String?                  @db.Uuid
  updatedByActorId      String?                  @db.Uuid
  auditCorrelationId    String?                  @db.Uuid
  dataClassification    String                   @default("CONFIDENTIAL")
  retentionPolicy       RetentionPolicy?
  policyName            String                   @db.VarChar(200)
  description           String?
  policyType            ExternalDataPolicyType   @default(ENTITY_BASED)
  entityTypes           String?
  dataCategories        String?
  restrictionLevel      DataRestrictionLevel     @default(REVIEW_REQUIRED)
  allowExternalShare    Boolean                  @default(false)
  requireApproval       Boolean                  @default(true)
  applyRedaction        Boolean                  @default(true)
  applyWatermark        Boolean                  @default(true)
  blockCompletely       Boolean                  @default(false)
  businessJustification String?
  complianceFramework   String?                  @db.VarChar(100)
  riskLevel             PolicyRiskLevel          @default(MEDIUM)
  conditionalRules      String?
  exceptionCriteria     String?
  approvalWorkflowId    String?                  @db.Uuid
  escalationRules       String?
  policyPriority        Int                      @default(100)
  executionOrder        Int                      @default(1)
  isActive              Boolean                  @default(true)
  totalApplications     Int                      @default(0)
  successfulBlocks      Int                      @default(0)
  failedApplications    Int                      @default(0)
  lastAppliedAt         DateTime?                @db.Timestamptz(6)
  ApprovalRule          ApprovalRule?            @relation(fields: [approvalWorkflowId], references: [id])
  Tenant                Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  external_share_audits external_share_audits[]
  redaction_rules       redaction_rules[]
  watermark_policies    watermark_policies[]

  @@unique([tenantId, id])
  @@unique([tenantId, policyName])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, policyPriority, executionOrder])
  @@index([tenantId, policyType, restrictionLevel])
  @@index([tenantId, riskLevel, complianceFramework])
  @@index([tenantId, status, isActive])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model external_share_audits {
  id                     String                   @id @default(uuid(7)) @db.Uuid
  status                 ExternalShareAuditStatus @default(LOGGED)
  version                Int                      @default(1)
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                 @db.Timestamptz(6)
  tenantId               String                   @db.Uuid
  deletedAt              DateTime?                @db.Timestamptz(6)
  deletedByActorId       String?                  @db.Uuid
  createdByActorId       String?                  @db.Uuid
  updatedByActorId       String?                  @db.Uuid
  auditCorrelationId     String?                  @db.Uuid
  dataClassification     String                   @default("AUDIT")
  retentionPolicy        RetentionPolicy?
  eventType              ExternalShareEventType   @default(DOCUMENT_ACCESS)
  eventCategory          String                   @db.VarChar(50)
  eventDescription       String?
  resourceType           String                   @db.VarChar(100)
  resourceId             String?                  @db.Uuid
  resourceName           String?                  @db.VarChar(500)
  resourcePath           String?
  resourceSize           Int?
  internalUserId         String?                  @db.Uuid
  externalUserId         String?                  @db.Uuid
  externalUserEmail      String?                  @db.VarChar(255)
  externalUserName       String?                  @db.VarChar(255)
  accessMethod           AccessMethod             @default(DIRECT_LINK)
  sessionId              String?                  @db.Uuid
  ipAddress              String?                  @db.VarChar(45)
  userAgent              String?
  deviceFingerprint      String?                  @db.VarChar(255)
  geolocation            String?                  @db.VarChar(100)
  policyId               String?                  @db.Uuid
  redactionRuleId        String?                  @db.Uuid
  watermarkPolicyId      String?                  @db.Uuid
  securityLevel          SecurityLevel            @default(STANDARD)
  accessGrantedAt        DateTime?                @db.Timestamptz(6)
  accessDuration         Int?
  accessCount            Int                      @default(1)
  downloadAttempted      Boolean                  @default(false)
  downloadCompleted      Boolean                  @default(false)
  policiesApplied        String?
  redactionApplied       Boolean                  @default(false)
  watermarkApplied       Boolean                  @default(false)
  accessBlocked          Boolean                  @default(false)
  approvalRequired       Boolean                  @default(false)
  riskScore              Float?                   @default(0.0)
  anomalyDetected        Boolean                  @default(false)
  complianceFlags        String?
  businessJustification  String?
  projectId              String?                  @db.Uuid
  businessEntityType     String?                  @db.VarChar(100)
  businessEntityId       String?                  @db.Uuid
  shareChannel           String?                  @db.VarChar(50)
  integrationId          String?                  @db.Uuid
  externalSystemId       String?                  @db.VarChar(100)
  responseCode           String?                  @db.VarChar(10)
  responseMessage        String?
  errorCode              String?                  @db.VarChar(50)
  errorMessage           String?
  requestHeaders         String?
  responseHeaders        String?
  networkPath            String?
  processingTime         Int?
  alertGenerated         Boolean                  @default(false)
  alertLevel             String?                  @db.VarChar(20)
  external_data_policies external_data_policies?  @relation(fields: [policyId], references: [id])
  redaction_rules        redaction_rules?         @relation(fields: [redactionRuleId], references: [id])
  Tenant                 Tenant                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  watermark_policies     watermark_policies?      @relation(fields: [watermarkPolicyId], references: [id])

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, businessEntityType, businessEntityId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, eventType, createdAt])
  @@index([tenantId, externalUserEmail, accessGrantedAt])
  @@index([tenantId, resourceType, resourceId])
  @@index([tenantId, riskScore, anomalyDetected])
  @@index([tenantId, securityLevel, accessBlocked])
  @@index([tenantId, shareChannel, integrationId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model redaction_rules {
  id                     String                  @id @default(uuid(7)) @db.Uuid
  status                 RedactionRuleStatus     @default(ACTIVE)
  version                Int                     @default(1)
  createdAt              DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                @db.Timestamptz(6)
  tenantId               String                  @db.Uuid
  deletedAt              DateTime?               @db.Timestamptz(6)
  deletedByActorId       String?                 @db.Uuid
  createdByActorId       String?                 @db.Uuid
  updatedByActorId       String?                 @db.Uuid
  auditCorrelationId     String?                 @db.Uuid
  dataClassification     String                  @default("CONFIDENTIAL")
  retentionPolicy        RetentionPolicy?
  ruleName               String                  @db.VarChar(200)
  description            String?
  ruleType               RedactionRuleType       @default(PATTERN_BASED)
  patternRegex           String?
  keywords               String?
  contextClues           String?
  useAIDetection         Boolean                 @default(false)
  aiModelProvider        String?                 @db.VarChar(50)
  confidenceThreshold    Float?                  @default(0.8)
  dataTypes              String?
  documentTypes          String?
  contentSources         String?
  redactionMethod        RedactionMethod         @default(REPLACE_WITH_MASK)
  maskCharacter          String?                 @default("*") @db.VarChar(5)
  preserveFormat         Boolean                 @default(true)
  preserveLength         Boolean                 @default(true)
  replacementText        String?                 @db.VarChar(100)
  dynamicReplacement     Boolean                 @default(false)
  policyId               String?                 @db.Uuid
  riskLevel              RedactionRiskLevel      @default(MEDIUM)
  complianceType         String?                 @db.VarChar(50)
  executionOrder         Int                     @default(100)
  processingTime         Int?
  accuracy               Float?
  totalApplications      Int                     @default(0)
  successfulRedactions   Int                     @default(0)
  falsePositives         Int                     @default(0)
  falseNegatives         Int                     @default(0)
  lastAppliedAt          DateTime?               @db.Timestamptz(6)
  requiresReview         Boolean                 @default(false)
  autoApprove            Boolean                 @default(true)
  feedbackWeight         Float                   @default(1.0)
  isActive               Boolean                 @default(true)
  external_share_audits  external_share_audits[]
  external_data_policies external_data_policies? @relation(fields: [policyId], references: [id])
  Tenant                 Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, ruleName])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, complianceType, riskLevel])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, ruleType, executionOrder])
  @@index([tenantId, status, isActive])
  @@index([tenantId, useAIDetection, aiModelProvider])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model watermark_policies {
  id                     String                  @id @default(uuid(7)) @db.Uuid
  status                 WatermarkPolicyStatus   @default(ACTIVE)
  version                Int                     @default(1)
  createdAt              DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                @db.Timestamptz(6)
  tenantId               String                  @db.Uuid
  deletedAt              DateTime?               @db.Timestamptz(6)
  deletedByActorId       String?                 @db.Uuid
  createdByActorId       String?                 @db.Uuid
  updatedByActorId       String?                 @db.Uuid
  auditCorrelationId     String?                 @db.Uuid
  dataClassification     String                  @default("INTERNAL")
  retentionPolicy        RetentionPolicy?
  policyName             String                  @db.VarChar(200)
  description            String?
  watermarkType          WatermarkType           @default(VISIBLE_TEXT)
  documentTypes          String?
  contentTypes           String?
  entityTypes            String?
  watermarkText          String?
  fontSize               Int?                    @default(12)
  fontColor              String?                 @default("#808080") @db.VarChar(10)
  opacity                Float?                  @default(0.3)
  rotation               Int?                    @default(45)
  position               WatermarkPosition       @default(CENTER)
  xOffset                Int?                    @default(0)
  yOffset                Int?                    @default(0)
  repeatPattern          Boolean                 @default(false)
  tileSpacing            Int?                    @default(100)
  isDigitalWatermark     Boolean                 @default(false)
  digitalPayload         String?
  steganographicKey      String?                 @db.VarChar(128)
  includeTenantName      Boolean                 @default(true)
  includeUserInfo        Boolean                 @default(true)
  includeTimestamp       Boolean                 @default(true)
  includeDocumentId      Boolean                 @default(true)
  includeIPAddress       Boolean                 @default(false)
  legalDisclaimer        String?
  copyrightNotice        String?
  confidentialityLevel   String?                 @db.VarChar(50)
  policyId               String?                 @db.Uuid
  triggerConditions      String?
  requiresApproval       Boolean                 @default(false)
  applyOnCreation        Boolean                 @default(false)
  applyOnShare           Boolean                 @default(true)
  applyOnDownload        Boolean                 @default(true)
  applyOnExport          Boolean                 @default(true)
  processingPriority     Int                     @default(100)
  maxFileSize            Int?                    @default(50000000)
  timeoutSeconds         Int?                    @default(30)
  isActive               Boolean                 @default(true)
  totalApplications      Int                     @default(0)
  successfulWatermarks   Int                     @default(0)
  failedApplications     Int                     @default(0)
  averageProcessingTime  Int?
  lastAppliedAt          DateTime?               @db.Timestamptz(6)
  external_share_audits  external_share_audits[]
  external_data_policies external_data_policies? @relation(fields: [policyId], references: [id])
  Tenant                 Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, id])
  @@unique([tenantId, policyName])
  @@index([createdAt], type: Brin)
  @@index([tenantId, applyOnShare, applyOnDownload])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, processingPriority, maxFileSize])
  @@index([tenantId, status, isActive])
  @@index([tenantId, watermarkType, position])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model weather_alert_deliveries {
  id                 String             @id @default(uuid(7)) @db.Uuid
  status             DeliveryStatus     @default(PENDING)
  version            Int                @default(1)
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime           @db.Timestamptz(6)
  tenantId           String             @db.Uuid
  deletedAt          DateTime?          @db.Timestamptz(6)
  deletedByActorId   String?            @db.Uuid
  createdByActorId   String?            @db.Uuid
  updatedByActorId   String?            @db.Uuid
  auditCorrelationId String?            @db.Uuid
  dataClassification String             @default("AUDIT")
  retentionPolicy    RetentionPolicy?
  alertId            String             @db.Uuid
  watchId            String?            @db.Uuid
  deliverySequence   Int                @default(1)
  deliveryChannel    DeliveryChannel
  targetType         DeliveryTargetType
  targetId           String?            @db.Uuid
  targetChannelId    String?            @db.Uuid
  targetMemberId     String?            @db.Uuid
  targetIdentifier   String?            @db.VarChar(255)
  messageTitle       String?            @db.VarChar(300)
  messageContent     String?
  messageFormat      String             @default("TEXT") @db.VarChar(20)
  attachmentCount    Int                @default(0)
  scheduledAt        DateTime?          @db.Timestamptz(6)
  deliveredAt        DateTime?          @db.Timestamptz(6)
  deliveryDuration   Int?
  attemptCount       Int                @default(1)
  deliveryStatus     DeliveryStatus     @default(PENDING)
  deliveryCode       String?            @db.VarChar(50)
  deliveryMessage    String?
  readAt             DateTime?          @db.Timestamptz(6)
  acknowledgedAt     DateTime?          @db.Timestamptz(6)
  responseTime       Int?
  engagementScore    Float?             @default(0.0)
  errorCode          String?            @db.VarChar(50)
  errorMessage       String?
  retryCount         Int                @default(0)
  nextRetryAt        DateTime?          @db.Timestamptz(6)
  providerMessageId  String?            @db.VarChar(255)
  providerMetadata   String?
  recipientTimezone  String?            @db.VarChar(50)
  recipientLocalTime DateTime?          @db.Timestamptz(6)
  deviceType         String?            @db.VarChar(50)
  weather_alerts     weather_alerts     @relation(fields: [tenantId, alertId], references: [tenantId, id], onDelete: Cascade)
  Tenant             Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Channel            Channel?           @relation(fields: [tenantId, targetChannelId], references: [tenantId, id], onDelete: NoAction)
  Member             Member?            @relation(fields: [tenantId, targetMemberId], references: [tenantId, id], onDelete: NoAction)
  weather_watches    weather_watches?   @relation(fields: [tenantId, watchId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, alertId, deliverySequence])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deliveredAt, readAt])
  @@index([tenantId, deliveryChannel, targetType])
  @@index([tenantId, deliveryStatus, attemptCount])
  @@index([tenantId, engagementScore, responseTime])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model weather_alerts {
  id                       String                     @id @default(uuid(7)) @db.Uuid
  status                   WeatherAlertStatus         @default(ACTIVE)
  version                  Int                        @default(1)
  createdAt                DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                   @db.Timestamptz(6)
  tenantId                 String                     @db.Uuid
  deletedAt                DateTime?                  @db.Timestamptz(6)
  deletedByActorId         String?                    @db.Uuid
  createdByActorId         String?                    @db.Uuid
  updatedByActorId         String?                    @db.Uuid
  auditCorrelationId       String?                    @db.Uuid
  dataClassification       String                     @default("OPERATIONAL")
  retentionPolicy          RetentionPolicy?
  severity                 WeatherSeverity            @default(MEDIUM)
  alertType                WeatherAlertType
  probabilityPct           Int                        @default(0)
  confidencePct            Int                        @default(0)
  entityType               WeatherEntityType
  entityId                 String                     @db.Uuid
  projectId                String?                    @db.Uuid
  taskId                   String?                    @db.Uuid
  latitude                 Decimal                    @db.Decimal(10, 8)
  longitude                Decimal                    @db.Decimal(11, 8)
  geoRadiusM               Int?                       @default(1000)
  locationName             String?                    @db.VarChar(255)
  issuedAt                 DateTime                   @db.Timestamptz(6)
  validFrom                DateTime                   @db.Timestamptz(6)
  validTo                  DateTime                   @db.Timestamptz(6)
  leadTimeMinutes          Int                        @default(0)
  sourceProvider           WeatherSource              @default(OPENWEATHER)
  sourceAlertId            String?                    @db.VarChar(100)
  sourcePayload            String?
  actionHint               WeatherActionHint          @default(MONITOR)
  recommendationText       String?
  riskLevel                WeatherRiskLevel           @default(MEDIUM)
  businessImpactScore      Float?                     @default(0.0)
  requiresApproval         Boolean                    @default(false)
  approvalRequestId        String?                    @db.Uuid
  escalationLevel          Int                        @default(0)
  ackStatus                AckStatus                  @default(NONE)
  ackByMemberId            String?                    @db.Uuid
  ackAt                    DateTime?                  @db.Timestamptz(6)
  closedAt                 DateTime?                  @db.Timestamptz(6)
  closeReason              String?                    @db.VarChar(100)
  notifiedCount            Int                        @default(0)
  deliverySuccessRate      Float?                     @default(1.0)
  snoozedUntil             DateTime?                  @db.Timestamptz(6)
  duplicateOfAlertId       String?                    @db.Uuid
  mlModelVersion           String?                    @db.VarChar(50)
  predictionAccuracy       Float?
  actualImpactScore        Float?
  weather_alert_deliveries weather_alert_deliveries[]
  Member                   Member?                    @relation(fields: [tenantId, ackByMemberId], references: [tenantId, id], onDelete: NoAction)
  ApprovalRequest          ApprovalRequest?           @relation(fields: [tenantId, approvalRequestId], references: [tenantId, id], onDelete: NoAction)
  weather_alerts           weather_alerts?            @relation("weather_alertsToweather_alerts", fields: [tenantId, duplicateOfAlertId], references: [tenantId, id], onDelete: NoAction)
  other_weather_alerts     weather_alerts[]           @relation("weather_alertsToweather_alerts")
  Tenant                   Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project                  Project?                   @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  Task                     Task?                      @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: NoAction)
  weather_incidents        weather_incidents[]

  @@unique([tenantId, entityType, entityId, alertType, validFrom, validTo])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, ackStatus, ackByMemberId])
  @@index([tenantId, alertType, riskLevel])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, entityType, entityId])
  @@index([tenantId, projectId, validFrom])
  @@index([tenantId, sourceProvider, issuedAt])
  @@index([tenantId, status, severity])
  @@index([tenantId, validTo, closedAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model weather_forecast_cache {
  id                 String            @id @default(uuid(7)) @db.Uuid
  status             String            @default("ACTIVE")
  version            Int               @default(1)
  createdAt          DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime          @db.Timestamptz(6)
  deletedAt          DateTime?         @db.Timestamptz(6)
  deletedByActorId   String?           @db.Uuid
  createdByActorId   String?           @db.Uuid
  updatedByActorId   String?           @db.Uuid
  auditCorrelationId String?           @db.Uuid
  dataClassification String            @default("PUBLIC")
  retentionPolicy    RetentionPolicy?
  latitude           Decimal           @db.Decimal(10, 8)
  longitude          Decimal           @db.Decimal(11, 8)
  geohash            String            @db.VarChar(12)
  locationName       String?           @db.VarChar(255)
  forecastTime       DateTime          @db.Timestamptz(6)
  issueTime          DateTime          @db.Timestamptz(6)
  validFrom          DateTime          @db.Timestamptz(6)
  validTo            DateTime          @db.Timestamptz(6)
  providerCode       String            @db.VarChar(50)
  providerDataId     String?           @db.VarChar(100)
  dataHash           String            @db.VarChar(64)
  weatherPayload     String
  rawPayload         String?
  dataVersion        String            @default("1.0") @db.VarChar(10)
  cacheKey           String            @unique(map: "weather_forecast_cache_key_unique") @db.VarChar(255)
  expiresAt          DateTime          @db.Timestamptz(6)
  lastAccessAt       DateTime?         @db.Timestamptz(6)
  accessCount        Int               @default(0)
  ingestDuration     Int?
  payloadSize        Int?
  compressionRatio   Float?
  confidenceScore    Float?            @default(0.8)
  dataCompleteness   Float?            @default(1.0)
  anomalyDetected    Boolean           @default(false)
  weather_providers  weather_providers @relation(fields: [providerCode], references: [providerCode])

  @@unique([geohash, forecastTime, validFrom, validTo, providerCode, dataHash])
  @@index([auditCorrelationId])
  @@index([cacheKey, lastAccessAt])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([forecastTime, expiresAt])
  @@index([geohash, validFrom, validTo])
  @@index([ingestDuration], type: Brin)
  @@index([providerCode, issueTime])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model weather_incidents {
  id                                                           String              @id @default(uuid(7)) @db.Uuid
  status                                                       IncidentStatus      @default(REPORTED)
  version                                                      Int                 @default(1)
  createdAt                                                    DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt                                                    DateTime            @db.Timestamptz(6)
  tenantId                                                     String              @db.Uuid
  deletedAt                                                    DateTime?           @db.Timestamptz(6)
  deletedByActorId                                             String?             @db.Uuid
  createdByActorId                                             String?             @db.Uuid
  updatedByActorId                                             String?             @db.Uuid
  auditCorrelationId                                           String?             @db.Uuid
  dataClassification                                           String              @default("CONFIDENTIAL")
  retentionPolicy                                              RetentionPolicy?
  incidentTitle                                                String              @db.VarChar(300)
  incidentType                                                 WeatherIncidentType @default(DELAY)
  severity                                                     IncidentSeverity    @default(MODERATE)
  priority                                                     IncidentPriority    @default(MEDIUM)
  relatedAlertId                                               String?             @db.Uuid
  weatherCondition                                             WeatherAlertType
  weatherSeverity                                              WeatherSeverity
  entityType                                                   WeatherEntityType
  entityId                                                     String              @db.Uuid
  projectId                                                    String?             @db.Uuid
  taskId                                                       String?             @db.Uuid
  occurredAt                                                   DateTime            @db.Timestamptz(6)
  discoveredAt                                                 DateTime            @db.Timestamptz(6)
  reportedAt                                                   DateTime?           @db.Timestamptz(6)
  resolvedAt                                                   DateTime?           @db.Timestamptz(6)
  impactHours                                                  Decimal?            @db.Decimal(8, 2)
  impactCost                                                   Decimal?            @db.Decimal(12, 2)
  indirectCost                                                 Decimal?            @db.Decimal(12, 2)
  recoveryTime                                                 Int?
  workersAffected                                              Int?                @default(0)
  safetyIncident                                               Boolean             @default(false)
  injuryCount                                                  Int?                @default(0)
  equipmentDamaged                                             Boolean             @default(false)
  assetDamageCount                                             Int?                @default(0)
  assetDamageCost                                              Decimal?            @db.Decimal(12, 2)
  deliveryDelay                                                Boolean             @default(false)
  clientImpact                                                 Boolean             @default(false)
  qualityIssue                                                 Boolean             @default(false)
  reworkRequired                                               Boolean             @default(false)
  responseActions                                              String?
  mitigationCost                                               Decimal?            @db.Decimal(12, 2)
  preventionCost                                               Decimal?            @db.Decimal(12, 2)
  description                                                  String?
  rootCause                                                    String?
  lessonsLearned                                               String?
  recommendations                                              String?
  reportedByMemberId                                           String              @db.Uuid
  verifiedByMemberId                                           String?             @db.Uuid
  approvedByMemberId                                           String?             @db.Uuid
  insuranceClaimId                                             String?             @db.VarChar(100)
  externalTicketId                                             String?             @db.VarChar(100)
  regulatoryReportId                                           String?             @db.VarChar(100)
  alertAccuracy                                                Float?
  responseEffectiveness                                        Float?
  preventionOpportunity                                        String?
  Member_weather_incidents_tenantId_approvedByMemberIdToMember Member?             @relation("weather_incidents_tenantId_approvedByMemberIdToMember", fields: [tenantId, approvedByMemberId], references: [tenantId, id], onDelete: NoAction)
  Tenant                                                       Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Project                                                      Project?            @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  weather_alerts                                               weather_alerts?     @relation(fields: [tenantId, relatedAlertId], references: [tenantId, id], onDelete: NoAction)
  Member_weather_incidents_tenantId_reportedByMemberIdToMember Member              @relation("weather_incidents_tenantId_reportedByMemberIdToMember", fields: [tenantId, reportedByMemberId], references: [tenantId, id])
  Task                                                         Task?               @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: NoAction)
  Member_weather_incidents_tenantId_verifiedByMemberIdToMember Member?             @relation("weather_incidents_tenantId_verifiedByMemberIdToMember", fields: [tenantId, verifiedByMemberId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, entityType, entityId])
  @@index([tenantId, incidentType, weatherCondition])
  @@index([tenantId, occurredAt, impactCost])
  @@index([tenantId, projectId, occurredAt])
  @@index([tenantId, relatedAlertId, alertAccuracy])
  @@index([tenantId, status, severity])
}

model weather_providers {
  id                     String                   @id @default(uuid(7)) @db.Uuid
  status                 String                   @default("ACTIVE")
  version                Int                      @default(1)
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                 @db.Timestamptz(6)
  deletedAt              DateTime?                @db.Timestamptz(6)
  deletedByActorId       String?                  @db.Uuid
  createdByActorId       String?                  @db.Uuid
  updatedByActorId       String?                  @db.Uuid
  auditCorrelationId     String?                  @db.Uuid
  dataClassification     String                   @default("INTERNAL")
  retentionPolicy        RetentionPolicy?
  providerCode           String                   @unique(map: "weather_providers_code_key") @db.VarChar(50)
  providerName           String                   @db.VarChar(200)
  providerType           WeatherSource            @default(OPENWEATHER)
  baseUrl                String                   @db.VarChar(500)
  authType               String                   @default("API_KEY") @db.VarChar(50)
  credentialsConfig      String?
  requestLimits          String?
  capabilities           String
  supportedRegions       String?
  maxForecastDays        Int                      @default(7)
  updateFrequency        Int                      @default(60)
  isActive               Boolean                  @default(true)
  priority               Int                      @default(100)
  reliabilityPct         Float                    @default(99.0)
  accuracyScore          Float                    @default(0.85)
  averageLatencyMs       Int                      @default(1000)
  totalRequests          Int                      @default(0)
  successfulRequests     Int                      @default(0)
  failedRequests         Int                      @default(0)
  averageResponseSize    Int?
  healthStatus           String                   @default("HEALTHY") @db.VarChar(20)
  lastHealthCheck        DateTime?                @db.Timestamptz(6)
  consecutiveFailures    Int                      @default(0)
  failureThreshold       Int                      @default(5)
  costPerRequest         Decimal?                 @db.Decimal(8, 6)
  monthlyCostLimit       Decimal?                 @db.Decimal(10, 2)
  currentMonthlyCost     Decimal                  @default(0) @db.Decimal(10, 2)
  weather_forecast_cache weather_forecast_cache[]

  @@index([auditCorrelationId])
  @@index([averageLatencyMs, accuracyScore])
  @@index([createdAt], type: Brin)
  @@index([dataClassification])
  @@index([deletedAt])
  @@index([healthStatus, reliabilityPct])
  @@index([status, isActive])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model weather_risk_factors {
  id                    String            @id @default(uuid(7)) @db.Uuid
  status                String            @default("ACTIVE")
  version               Int               @default(1)
  createdAt             DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime          @db.Timestamptz(6)
  tenantId              String            @db.Uuid
  deletedAt             DateTime?         @db.Timestamptz(6)
  deletedByActorId      String?           @db.Uuid
  createdByActorId      String?           @db.Uuid
  updatedByActorId      String?           @db.Uuid
  auditCorrelationId    String?           @db.Uuid
  dataClassification    String            @default("INTERNAL")
  retentionPolicy       RetentionPolicy?
  policyName            String            @db.VarChar(200)
  description           String?
  isActive              Boolean           @default(true)
  industry              WeatherIndustry
  activityCode          String?           @db.VarChar(100)
  activityName          String?           @db.VarChar(200)
  jurisdiction          String?           @db.VarChar(100)
  alertType             WeatherAlertType
  weatherMetric         WeatherMetric
  thresholdOperator     ThresholdOperator @default(GREATER_THAN_EQUAL)
  thresholdValue1       Decimal           @db.Decimal(8, 2)
  thresholdValue2       Decimal?          @db.Decimal(8, 2)
  measurementUnit       String            @db.VarChar(20)
  riskLevel             WeatherRiskLevel  @default(MEDIUM)
  severity              WeatherSeverity   @default(MEDIUM)
  actionHint            WeatherActionHint @default(MONITOR)
  businessImpactWeight  Float             @default(1.0)
  leadTimeMin           Int?              @default(60)
  postEventBufferMin    Int?              @default(30)
  requiresApproval      Boolean           @default(false)
  escalationThreshold   Int?              @default(2)
  effectiveFrom         DateTime          @default(now()) @db.Date
  effectiveTo           DateTime?         @db.Date
  seasonalApplicable    String?
  timeOfDayRestrictions String?
  applicationCount      Int               @default(0)
  accuracyRate          Float?
  falsePositiveRate     Float?
  lastUsedAt            DateTime?         @db.Timestamptz(6)
  mlModelId             String?           @db.VarChar(100)
  confidenceScore       Float?            @default(0.8)
  trainingDataPoints    Int?              @default(0)
  Tenant                Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  weather_watches       weather_watches[]

  @@unique([tenantId, id])
  @@unique([tenantId, industry, activityCode, alertType, weatherMetric])
  @@index([createdAt], type: Brin)
  @@index([tenantId, alertType, weatherMetric])
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, effectiveFrom, effectiveTo])
  @@index([tenantId, isActive, industry])
  @@index([tenantId, riskLevel, severity])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model weather_watches {
  id                                                            String                     @id @default(uuid(7)) @db.Uuid
  status                                                        String                     @default("ACTIVE")
  version                                                       Int                        @default(1)
  createdAt                                                     DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                                                     DateTime                   @db.Timestamptz(6)
  tenantId                                                      String                     @db.Uuid
  deletedAt                                                     DateTime?                  @db.Timestamptz(6)
  deletedByActorId                                              String?                    @db.Uuid
  createdByActorId                                              String?                    @db.Uuid
  updatedByActorId                                              String?                    @db.Uuid
  auditCorrelationId                                            String?                    @db.Uuid
  dataClassification                                            String                     @default("INTERNAL")
  retentionPolicy                                               RetentionPolicy?
  watchName                                                     String                     @db.VarChar(200)
  description                                                   String?
  isActive                                                      Boolean                    @default(true)
  entityType                                                    WeatherEntityType
  entityId                                                      String                     @db.Uuid
  projectId                                                     String?                    @db.Uuid
  taskId                                                        String?                    @db.Uuid
  minSeverity                                                   WeatherSeverity            @default(LOW)
  alertTypes                                                    String
  riskLevels                                                    String
  notifyRoles                                                   String?
  notifyMembers                                                 String?
  escalationRoles                                               String?
  deliveryChannels                                              String
  primaryChannelId                                              String?                    @db.Uuid
  escalationChannelId                                           String?                    @db.Uuid
  quietHours                                                    String?
  timezone                                                      String?                    @db.VarChar(50)
  businessHoursOnly                                             Boolean                    @default(false)
  snoozeUntil                                                   DateTime?                  @db.Timestamptz(6)
  maxAlertsPerHour                                              Int                        @default(5)
  cooldownMinutes                                               Int                        @default(15)
  overrideRiskPolicyId                                          String?                    @db.Uuid
  customThresholds                                              String?
  alertsReceived                                                Int                        @default(0)
  alertsAcknowledged                                            Int                        @default(0)
  averageResponseTime                                           Int?
  lastAlertAt                                                   DateTime?                  @db.Timestamptz(6)
  seasonalActive                                                String?
  validFrom                                                     DateTime?                  @db.Date
  validTo                                                       DateTime?                  @db.Date
  weather_alert_deliveries                                      weather_alert_deliveries[]
  Channel_weather_watches_tenantId_escalationChannelIdToChannel Channel?                   @relation("weather_watches_tenantId_escalationChannelIdToChannel", fields: [tenantId, escalationChannelId], references: [tenantId, id], onDelete: NoAction)
  Tenant                                                        Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  weather_risk_factors                                          weather_risk_factors?      @relation(fields: [tenantId, overrideRiskPolicyId], references: [tenantId, id], onDelete: NoAction)
  Channel_weather_watches_tenantId_primaryChannelIdToChannel    Channel?                   @relation("weather_watches_tenantId_primaryChannelIdToChannel", fields: [tenantId, primaryChannelId], references: [tenantId, id], onDelete: NoAction)
  Project                                                       Project?                   @relation(fields: [tenantId, projectId], references: [tenantId, id], onDelete: NoAction)
  Task                                                          Task?                      @relation(fields: [tenantId, taskId], references: [tenantId, id], onDelete: NoAction)

  @@unique([tenantId, entityType, entityId])
  @@unique([tenantId, id])
  @@index([createdAt], type: Brin)
  @@index([tenantId, auditCorrelationId])
  @@index([tenantId, dataClassification])
  @@index([tenantId, deletedAt])
  @@index([tenantId, isActive, entityType])
  @@index([tenantId, minSeverity, alertTypes])
  @@index([tenantId, projectId, isActive])
  @@index([tenantId, snoozeUntil, quietHours])
}

enum AIJobPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum AIJobStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
  PAUSED
  RETRYING
}

enum AIJobType {
  PROMPT_EXECUTION
  DOCUMENT_ANALYSIS
  EMBEDDING_GENERATION
  INSIGHT_GENERATION
  PLAYBOOK_RUN
  CUSTOM_ACTION
  BATCH_PROCESSING
  REAL_TIME_ANALYSIS
}

enum AIModelProvider {
  OPENAI
  ANTHROPIC
  AZURE_AI
  AWS_BEDROCK
  GOOGLE_AI
  HUGGING_FACE
  CUSTOM
  LOCAL
}

enum APBillStatus {
  DRAFT
  PENDING
  APPROVED
  SCHEDULED
  PARTIALLY_PAID
  PAID
  DISPUTED
  CANCELLED
  VOID
  OVERDUE
}

enum AccessMethod {
  DIRECT_LINK
  EMAIL_ATTACHMENT
  SHARED_FOLDER
  API_ENDPOINT
  INTEGRATION
  MOBILE_APP
  WEB_PORTAL
  DOWNLOAD_LINK
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  CUSTOMER
  FORMER
  SUSPENDED
  ARCHIVED
}

enum AckStatus {
  NONE
  PENDING
  ACKED
  DECLINED
  EXPIRED
}

enum ActionType {
  CREATE_RECORD
  UPDATE_RECORD
  DELETE_RECORD
  SEND_EMAIL
  SEND_MESSAGE
  CREATE_APPROVAL
  UPDATE_STATUS
  GENERATE_DOCUMENT
  CALL_API
  TRIGGER_WORKFLOW
  CUSTOM_SCRIPT
}

enum ActivityStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum AddressType {
  HOME // Personal/home address
  WORK // Work/office address
  MAILING // Correspondence address
  EMERGENCY // Emergency contact address
  TEMPORARY // Temporary address
  BILLING // Primary billing address
  SHIPPING // Shipping/delivery address
  JOB_SITE // Construction/project site
  CORPORATE // Corporate headquarters
  BRANCH // Branch office
  WAREHOUSE // Storage/warehouse location
  EQUIPMENT_YARD // Equipment staging area
}

enum AdjustmentType {
  CORRECTION
  RETROACTIVE_PAY
  BONUS_ADJUSTMENT
  TAX_ADJUSTMENT
  DEDUCTION_ADJUSTMENT
  MANUAL_ENTRY
}

enum AllocationStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
  OVERALLOCATED
}

enum AllocationType {
  FULL_TIME
  PART_TIME
  SHARED
  ON_DEMAND
  TEMPORARY
  CONTRACT
}

enum AllowanceType {
  CAR_ALLOWANCE
  PHONE_ALLOWANCE
  TOOL_ALLOWANCE
  MEAL_ALLOWANCE
  LODGING_ALLOWANCE
  SAFETY_EQUIPMENT
  UNIFORM_ALLOWANCE
  EDUCATION_ALLOWANCE
  TRAVEL_ALLOWANCE
}

enum ApiKeyScope {
  READ_ONLY
  READ_WRITE
  ADMIN
  BILLING
  REPORTING
  INTEGRATION
}

enum ApiKeyStatus {
  ACTIVE
  SUSPENDED
  REVOKED
  EXPIRED
}

enum ApprovalDecisionStatus {
  PENDING
  APPROVED
  REJECTED
  DELEGATED
  ESCALATED
  EXPIRED
  WITHDRAWN
  CANCELLED
}

enum ApprovalDecisionType {
  INDIVIDUAL
  BULK
  AUTOMATIC
  DELEGATED
  ESCALATED
  CONDITIONAL
}

enum ApprovalEntityType {
  PURCHASE_ORDER
  AP_BILL
  BILL_PAYMENT
  INVOICE
  JOURNAL_ENTRY
  PROJECT_CHANGE_ORDER
  ESTIMATE
  EXPENSE_REPORT
  TIMESHEET
  LEAVE_REQUEST
  PAYROLL_ADJUSTMENT
  CONTRACT
  BUDGET_CHANGE
}

enum ApprovalRequestPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum ApprovalRequestSource {
  AUTOMATIC
  MANUAL
  ESCALATED
  DELEGATED
  BULK_OPERATION
}

enum ApprovalRequestStatus {
  DRAFT
  PENDING
  IN_PROGRESS
  APPROVED
  PARTIALLY_APPROVED
  REJECTED
  CANCELLED
  ESCALATED
  EXPIRED
  WITHDRAWN
}

enum ApprovalRuleScope {
  GLOBAL
  DEPARTMENT
  PROJECT
  VENDOR
  CUSTOMER
  MODULE
}

enum ApprovalRuleStatus {
  ACTIVE
  INACTIVE
  DRAFT
  ARCHIVED
  SUSPENDED
}

enum ApprovalRuleType {
  AMOUNT_BASED
  ENTITY_BASED
  ATTRIBUTE_BASED
  CUSTOM
  SEQUENTIAL
  PARALLEL
  CONDITIONAL
}

enum ArtifactStatus {
  ACTIVE
  PROCESSING
  COMPLETED
  ARCHIVED
  DELETED
  CORRUPTED
}

enum ArtifactType {
  SIGNED_DOCUMENT
  CERTIFICATE
  AUDIT_TRAIL
  SUMMARY
  COMPLETION_CERTIFICATE
  EVIDENCE_PACKAGE
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  NEEDS_REPAIR
  OUT_OF_SERVICE
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  IN_MAINTENANCE
  RETIRED
  DISPOSED
  LOST
  STOLEN
}

enum AssignmentRole {
  OWNER
  ASSIGNEE
  REVIEWER
  OBSERVER
  CONTRIBUTOR
  APPROVER
}

enum AssignmentScope {
  GLOBAL
  TENANT
  PROJECT
  DEPARTMENT
  TEAM
  RESOURCE
}

enum AssignmentType {
  PRIMARY
  SECONDARY
  TEMPORARY
  ACTING
  INTERIM
}

enum AttachmentLinkStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DELETED
}

enum AttachmentLinkType {
  PROJECT_DOCUMENT
  TASK_ATTACHMENT
  ESTIMATE_ATTACHMENT
  INVOICE_ATTACHMENT
  CONTRACT_ATTACHMENT
  VENDOR_DOCUMENT
  EMPLOYEE_DOCUMENT
  GENERAL
}

enum AttachmentStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DELETED
}

enum AttachmentType {
  DOCUMENT
  IMAGE
  VIDEO
  AUDIO
  SPREADSHEET
  PRESENTATION
  PDF
  ARCHIVE
  OTHER
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  APPROVE
  REJECT
  ASSIGN
  TRANSFER
  EXPORT
  IMPORT
  BACKUP
  RESTORE
}

enum AuthFactorStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  COMPROMISED
  EXPIRED
}

enum AuthFactorType {
  TOTP
  SMS
  EMAIL
  WEBAUTHN
  BACKUP_CODE
  HARDWARE_TOKEN
}

enum AuthenticationMethod {
  EMAIL
  SMS
  PHONE_CALL
  KNOWLEDGE_BASED
  ID_VERIFICATION
  SOCIAL_LOGIN
  ACCESS_CODE
}

enum AuthenticationType {
  OAUTH2
  API_KEY
  BASIC_AUTH
  CERTIFICATE
  JWT
  SAML
  WEBHOOK
  CUSTOM
}

enum BankAccountStatus {
  ACTIVE
  INACTIVE
  VERIFICATION_REQUIRED
  VERIFICATION_FAILED
  SUSPENDED
  CLOSED
}

enum BankAccountType {
  CHECKING
  SAVINGS
  LOAN
  CREDIT_CARD
  WALLET
}

enum BenefitType {
  HEALTH_INSURANCE
  DENTAL_INSURANCE
  VISION_INSURANCE
  LIFE_INSURANCE
  DISABILITY_INSURANCE
  RETIREMENT_401K
  PENSION
  FLEXIBLE_SPENDING
  HEALTH_SAVINGS
  PAID_TIME_OFF
  STOCK_OPTIONS
  TUITION_REIMBURSEMENT
}

enum BidInvitationStatus {
  SENT
  VIEWED
  RESPONDED
  EXPIRED
  CANCELLED
}

enum BidStatus {
  DRAFT
  OPEN
  CLOSED
  AWARDED
  CANCELLED
}

enum BidSubmissionStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WITHDRAWN
  EXPIRED
}

enum BillApprovalDecision {
  PENDING
  APPROVED
  DECLINED
  ESCALATED
  CANCELLED
}

enum BillingAccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  VERIFICATION_FAILED
  CLOSED
}

enum BudgetPeriod {
  ANNUAL
  QUARTERLY
  MONTHLY
}

enum BudgetStatus {
  DRAFT
  APPROVED
  ACTIVE
  FROZEN
  EXCEEDED
}

enum CRMChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum CatalogStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
  ARCHIVED
}

enum ChangeOrderApprovalDecision {
  PENDING
  APPROVED
  DECLINED
  ESCALATED
  CANCELLED
}

enum ChangeOrderChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ChangeOrderDocumentType {
  ATTACHMENT
  CONTRACT
  SIGNATURE
  OTHER
}

enum ChangeOrderLineStatus {
  ACTIVE
  REMOVED
}

enum ChangeOrderStatus {
  PENDING
  APPROVED
  DECLINED
  CANCELLED
  IMPLEMENTED
}

enum ChannelMemberRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
  GUEST
  READ_ONLY
  BOT
}

enum ChannelMemberStatus {
  ACTIVE
  INACTIVE
  INVITED
  MUTED
  BANNED
  LEFT
  KICKED
}

enum ChannelStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  SUSPENDED
  LOCKED
  DELETED
}

enum ChannelType {
  PUBLIC
  PRIVATE
  PROJECT
  DEPARTMENT
  TEAM
  ANNOUNCEMENT
  INTEGRATION
  TEMPORARY
}

enum ChannelVisibility {
  TENANT_WIDE
  DEPARTMENT_ONLY
  PROJECT_TEAM
  INVITED_ONLY
  MANAGERS_ONLY
}

enum ChargebackStatus {
  RECEIVED
  EVIDENCE_REQUIRED
  UNDER_REVIEW
  WON
  LOST
  ACCEPTED
  DISPUTED
  ARBITRATION
}

enum ChunkType {
  PARAGRAPH
  PAGE
  SECTION
  TABLE
  IMAGE_CAPTION
  HEADER
  FOOTER
  METADATA
}

enum ClockStatus {
  CLOCKED_IN
  CLOCKED_OUT
  BREAK
  LUNCH
  OFFLINE
}

enum CommunicationAttachmentStatus {
  UPLOADING
  UPLOADED
  PROCESSING
  READY
  FAILED
  QUARANTINED
  DELETED
}

enum CommunicationAttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  ARCHIVE
  SPREADSHEET
  PRESENTATION
  CODE
  TEXT
  OTHER
}

enum CommunicationMessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum CommunicationMessageStatus {
  SENT
  DELIVERED
  READ
  EDITED
  DELETED
  HIDDEN
  FLAGGED
  MODERATED
}

enum CommunicationMessageType {
  TEXT
  SYSTEM
  ANNOUNCEMENT
  THREAD_REPLY
  MENTION
  FILE_SHARE
  INTEGRATION
  POLL
  REMINDER
}

enum CompensationType {
  SALARY
  HOURLY
  COMMISSION
  PIECE_RATE
  BONUS
  OVERTIME
  ALLOWANCE
  STIPEND
}

enum ComplianceLevel {
  BASIC
  STANDARD
  ENTERPRISE
  SOC2
}

enum ConnectionHealthStatus {
  HEALTHY
  WARNING
  CRITICAL
  UNKNOWN
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  PRIMARY
  SECONDARY
  ARCHIVED
}

enum ContactType {
  PHONE
  EMAIL
  SMS
  EMERGENCY
  WORK_PHONE
  MOBILE
}

enum CostCenterStatus {
  ACTIVE
  INACTIVE
  BUDGET_FROZEN
  ARCHIVED
}

enum CostCenterType {
  DEPARTMENT
  PROJECT
  LOCATION
  FUNCTION
  PRODUCT
}

enum CoverageLevel {
  EMPLOYEE_ONLY
  EMPLOYEE_SPOUSE
  EMPLOYEE_CHILDREN
  FAMILY
}

enum CreditMemoStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ISSUED
  APPLIED
  CANCELLED
  VOID
}

enum CurrencyCode {
  USD
  EUR
  GBP
  CAD
  AUD
  JPY
  CHF
  CNY
  INR
  BRL
  MXN
  KRW
  SGD
  HKD
  NOK
  SEK
  DKK
  PLN
  CZK
  HUF
  RUB
  ZAR
  NZD
  THB
  MYR
  IDR
  PHP
  VND
  TWD
  ILS
  AED
  SAR
  EGP
  TRY
  CLP
  COP
  PEN
  ARS
  UYU
}

enum CurrencyRateSource {
  MANUAL
  AUTOMATED
  BANK_FEED
  API_SERVICE
  GOVERNMENT
  CENTRAL_BANK
}

enum CurrencyRateStatus {
  ACTIVE
  INACTIVE
  HISTORICAL
  SUSPENDED
}

enum CurrencyRateType {
  SPOT
  AVERAGE
  CLOSING
  BUDGET
  FIXED
  HISTORICAL
}

enum DataIsolationLevel {
  SHARED_DATABASE
  DEDICATED_SCHEMA
  DEDICATED_DATABASE
  DEDICATED_INSTANCE
}

enum DataRestrictionLevel {
  ALLOW
  REVIEW_REQUIRED
  AUTO_REDACT
  WATERMARK_ONLY
  BLOCK
  RESTRICTED
}

enum DataSyncDirection {
  IMPORT_ONLY
  EXPORT_ONLY
  BIDIRECTIONAL
  DISABLED
}

enum DataType {
  STRING
  INTEGER
  DECIMAL
  BOOLEAN
  DATE
  DATETIME
  JSON
  ARRAY
  BINARY
  UUID
  EMAIL
  URL
  PHONE
  CUSTOM
}

enum DebitCreditIndicator {
  DEBIT
  CREDIT
}

enum DeductionType {
  HEALTH_INSURANCE
  DENTAL_INSURANCE
  VISION_INSURANCE
  LIFE_INSURANCE
  RETIREMENT_401K
  RETIREMENT_403B
  FLEXIBLE_SPENDING
  HEALTH_SAVINGS
  PARKING
  UNION_DUES
  GARNISHMENT
  CHILD_SUPPORT
  LOAN_REPAYMENT
}

enum DeliveryChannel {
  PUSH
  EMAIL
  SMS
  CHANNEL
  DIRECT_MESSAGE
  WEBHOOK
  API
  DASHBOARD
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  READ
  ACKNOWLEDGED
  FAILED
  CANCELLED
  EXPIRED
}

enum DeliveryTargetType {
  MEMBER
  CHANNEL
  DIRECT_CHAT
  EMAIL_ADDRESS
  PHONE_NUMBER
  WEBHOOK_URL
  API_ENDPOINT
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
  RESTRUCTURING
  ARCHIVED
}

enum DepartmentType {
  EXECUTIVE
  HUMAN_RESOURCES
  FINANCE_ACCOUNTING
  OPERATIONS
  SALES_MARKETING
  ENGINEERING
  CONSTRUCTION
  SAFETY_QUALITY
  INFORMATION_TECHNOLOGY
  LEGAL_COMPLIANCE
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

enum DeviceStatus {
  ACTIVE
  INACTIVE
  COMPROMISED
  REVOKED
  PENDING_VERIFICATION
}

enum DeviceType {
  MOBILE
  DESKTOP
  TABLET
  BROWSER
  API_CLIENT
  OTHER
}

enum DirectChatStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  BLOCKED
  RESTRICTED
  DELETED
}

enum DirectChatType {
  PERSONAL
  BUSINESS
  SUPPORT
  ESCALATED
  TEMPORARY
}

enum DocumentIndexStatus {
  PENDING
  INDEXING
  INDEXED
  FAILED
  OUTDATED
  DELETED
}

enum DocumentType {
  DRIVERS_LICENSE
  PASSPORT
  I9
  VISA
  SOCIAL_SECURITY_CARD
  BIRTH_CERTIFICATE
  GREEN_CARD
  WORK_PERMIT
}

enum DocumentVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
  UNDER_REVIEW
}

enum DunningLevel {
  FIRST_NOTICE
  SECOND_NOTICE
  FINAL_NOTICE
  COLLECTION_AGENCY
  LEGAL_ACTION
}

enum DunningNoticeStatus {
  DRAFT
  SENT
  ACKNOWLEDGED
  DISPUTED
  RESOLVED
  ESCALATED
}

enum ESignatureStatus {
  DRAFT
  SENT
  DELIVERED
  PARTIALLY_SIGNED
  SIGNED
  COMPLETED
  DECLINED
  VOIDED
  EXPIRED
  AUTHENTICATION_FAILED
}

enum EmbeddingModel {
  TEXT_EMBEDDING_ADA_002
  TEXT_EMBEDDING_3_SMALL
  TEXT_EMBEDDING_3_LARGE
  SENTENCE_TRANSFORMERS
  COHERE_EMBED
  AZURE_TEXT_EMBEDDING
  CUSTOM_MODEL
}

enum EmploymentStatus {
  ACTIVE
  TERMINATED
  LEAVE_OF_ABSENCE
  SUSPENDED
  RETIRED
  DECEASED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERN
  CONSULTANT
}

enum EncryptionMethod {
  AES_256_GCM
  RSA_4096
  KMS_MANAGED
  HASHICORP_VAULT
  AZURE_KEY_VAULT
  AWS_SECRETS_MANAGER
  GCP_SECRET_MANAGER
}

enum EnrollmentStatus {
  ACTIVE
  TERMINATED
  SUSPENDED
  PENDING
  DECLINED
}

enum EscalationLevel {
  NONE
  MANAGER
  DIRECTOR
  EXECUTIVE
  BOARD
}

enum EstimateApprovalDecision {
  PENDING
  APPROVED
  DECLINED
  CANCELLED
  ESCALATED
}

enum EstimateChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum EstimateDiscountType {
  NONE
  PERCENTAGE
  FIXED_AMOUNT
  VOLUME
  EARLY_PAYMENT
  PROMOTIONAL
}

enum EstimateStatus {
  DRAFT
  SENT
  VIEWED
  CLIENT_APPROVED
  CLIENT_DECLINED
  APPROVED
  DECLINED
  CONVERTED
  EXPIRED
  CANCELLED
}

enum EstimateTaxType {
  NONE
  SALES_TAX
  VAT
  GST
  CUSTOM
}

enum EstimateTermType {
  PAYMENT
  DELIVERY
  WARRANTY
  CANCELLATION
  SCOPE
  LIABILITY
  COMPLIANCE
}

enum EventType {
  TENANT_PROVISIONED
  TENANT_SUSPENDED
  TENANT_ACTIVATED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELED
  USAGE_RECORDED
  FEATURE_FLAG_TOGGLED
  BILLING_CYCLE_COMPLETED
  AUDIT_LOG_CREATED
  USER_INVITED
  USER_ACTIVATED
  PROJECT_CREATED
  PROJECT_COMPLETED
  ESTIMATE_APPROVED
  INVOICE_GENERATED
}

enum ExpenseChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ExpenseReportStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

enum ExpenseStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  PAID
  DISPUTED
}

enum ExternalAccessLevel {
  VIEW_ONLY
  DOWNLOAD
  COMMENT
  LIMITED_EDIT
  FULL_COLLABORATE
}

enum ExternalDataPolicyStatus {
  DRAFT
  ACTIVE
  SUSPENDED
  UNDER_REVIEW
  DEPRECATED
  ARCHIVED
}

enum ExternalDataPolicyType {
  ENTITY_BASED
  CONTENT_BASED
  USER_BASED
  INTEGRATION_BASED
  GLOBAL
  CONDITIONAL
}

enum ExternalShareAuditStatus {
  LOGGED
  PENDING_REVIEW
  REVIEWED
  FLAGGED
  RESOLVED
  ARCHIVED
}

enum ExternalShareEventType {
  DOCUMENT_ACCESS
  DOCUMENT_DOWNLOAD
  DOCUMENT_SHARE
  MESSAGE_SHARE
  LINK_ACCESS
  API_ACCESS
  EXPORT_DATA
  INTEGRATION_SYNC
}

enum ExternalShareStatus {
  ACTIVE
  EXPIRED
  REVOKED
  SUSPENDED
  USED
  DISABLED
}

enum ExternalShareType {
  CHANNEL_ACCESS
  MESSAGE_VIEW
  FILE_DOWNLOAD
  DOCUMENT_VIEW
  THREAD_VIEW
  TEMPORARY_ACCESS
  COLLABORATION
}

enum FLSAClassification {
  EXEMPT
  NON_EXEMPT
}

enum FeatureFlagScope {
  GLOBAL
  TENANT
  USER
  ROLE
}

enum FeeType {
  PROCESSING_FEE
  TRANSACTION_FEE
  CURRENCY_CONVERSION
  CHARGEBACK_FEE
  REFUND_FEE
  MONTHLY_FEE
  OTHER
}

enum FileCategory {
  CONTRACT
  INVOICE
  PLAN
  PHOTO
  DOCUMENT
  DRAWING
  SPECIFICATION
  REPORT
  CERTIFICATE
  OTHER
}

enum FileObjectStatus {
  ACTIVE
  ARCHIVED
  QUARANTINED
  DELETED
  CORRUPTED
}

enum GLAccountCategory {
  CURRENT_ASSET
  FIXED_ASSET
  INTANGIBLE_ASSET
  CURRENT_LIABILITY
  LONG_TERM_LIABILITY
  EQUITY
  OPERATING_REVENUE
  NON_OPERATING_REVENUE
  OPERATING_EXPENSE
  NON_OPERATING_EXPENSE
  COST_OF_SALES
  ADMINISTRATIVE
  SELLING
}

enum GLAccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  ARCHIVED
  DEPRECATED
}

enum GLAccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
  COST_OF_GOODS_SOLD
  OTHER_INCOME
  OTHER_EXPENSE
}

enum GenderType {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum GoalType {
  PERFORMANCE
  DEVELOPMENT
  BEHAVIORAL
  STRATEGIC
  PERSONAL
}

enum GoodsInspectionStatus {
  NOT_REQUIRED
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  CONDITIONAL
}

enum GoodsReceiptStatus {
  DRAFT
  PENDING
  PARTIALLY_RECEIVED
  RECEIVED
  DISCREPANCY
  RETURNED
  CLOSED
}

enum HRWorkforceChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum HolidayType {
  FEDERAL
  STATE
  COMPANY
  RELIGIOUS
  CULTURAL
  FLOATING
  PERSONAL
}

enum ImpactLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  EMERGENCY
}

enum IncidentSeverity {
  MINOR
  MODERATE
  MAJOR
  CRITICAL
  CATASTROPHIC
}

enum IncidentStatus {
  REPORTED
  INVESTIGATING
  CONFIRMED
  RESOLVED
  CLOSED
  CANCELLED
}

enum InsightSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
  BLOCKING
}

enum InsightStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
  IMPLEMENTED
  IGNORED
  EXPIRED
}

enum InsightType {
  RISK_ASSESSMENT
  COMPLIANCE_CHECK
  ANOMALY_DETECTION
  PREDICTION
  RECOMMENDATION
  CLASSIFICATION
  SENTIMENT_ANALYSIS
  QUALITY_SCORE
}

enum InspectionApprovalDecision {
  PENDING
  APPROVED
  DECLINED
  ESCALATED
  CANCELLED
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  PASSED
  FAILED
  RESCHEDULED
}

enum IntegrationCapability {
  READ_ONLY
  WRITE_ONLY
  BIDIRECTIONAL
  REAL_TIME
  BULK_IMPORT
  BULK_EXPORT
  WEBHOOK_SUPPORT
  FILE_UPLOAD
  FILE_DOWNLOAD
  STREAMING
}

enum IntegrationCategory {
  FINANCIAL
  COMMUNICATION
  DOCUMENT_STORAGE
  CRM
  PROJECT_MANAGEMENT
  ERP
  ESIGNATURE
  PAYMENT
  ANALYTICS
  AUTOMATION
  HR_PAYROLL
  COMPLIANCE
  OTHER
}

enum IntegrationConnectionStatus {
  ACTIVE
  INACTIVE
  CONNECTING
  AUTHENTICATING
  ERROR
  EXPIRED
  REVOKED
  SUSPENDED
  RECONNECTING
}

enum IntegrationConnectorStatus {
  ENABLED
  DISABLED
  CONFIGURING
  ERROR
  PENDING_APPROVAL
  SUSPENDED
  MIGRATING
}

enum IntegrationEnvironment {
  PRODUCTION
  SANDBOX
  STAGING
  DEVELOPMENT
}

enum IntegrationProviderStatus {
  ACTIVE
  MAINTENANCE
  DEPRECATED
  BETA
  DISCONTINUED
  SUSPENDED
}

enum InventoryChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum InventoryItemStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
  OUT_OF_STOCK
  LOW_STOCK
  ARCHIVED
}

enum InventoryTransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
  REVERSED
}

enum InventoryTransactionType {
  RECEIPT
  ISSUE
  TRANSFER
  ADJUSTMENT
  COUNT
  RETURN
  CONSUMPTION
  PRODUCTION
}

enum InvoiceChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum InvoiceLineItemType {
  SERVICE
  PRODUCT
  LABOR
  MATERIAL
  EXPENSE
  EQUIPMENT
}

enum InvoiceStatus {
  DRAFT
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum InvoiceTaxType {
  SALES
  VAT
  GST
  EXCISE
  CUSTOM
  NONE
}

enum JobLevel {
  ENTRY
  JUNIOR
  SENIOR
  PRINCIPAL
  EXECUTIVE
}

enum JobPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
  EMERGENCY
}

enum JobProfileStatus {
  ACTIVE
  INACTIVE
  UNDER_REVIEW
  ARCHIVED
}

enum JournalEntrySource {
  MANUAL
  INVOICE
  BILL
  PAYMENT
  PAYROLL
  DEPRECIATION
  ADJUSTMENT
  SYSTEM
  INTEGRATION
}

enum JournalEntryStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  POSTED
  REVERSED
  CANCELLED
  LOCKED
}

enum JournalEntryType {
  STANDARD
  ADJUSTING
  CLOSING
  REVERSING
  RECURRING
  SYSTEM_GENERATED
}

enum JournalLineStatus {
  ACTIVE
  INACTIVE
  CORRECTED
  REVERSED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
  ARCHIVED
}

enum LeaveStatus {
  REQUESTED
  APPROVED
  ACTIVE
  COMPLETED
  CANCELLED
  DENIED
}

enum LeaveType {
  VACATION
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  FAMILY_MEDICAL
  BEREAVEMENT
  JURY_DUTY
  MILITARY
  SABBATICAL
  UNPAID
}

enum LocationStatus {
  ACTIVE
  INACTIVE
  TEMPORARY_CLOSURE
  PERMANENTLY_CLOSED
  ARCHIVED
}

enum LocationType {
  SITE
  OFFICE
  WAREHOUSE
  STAGING_AREA
}

enum LogCategory {
  SYSTEM
  BUSINESS
  INTEGRATION
  SECURITY
  PERFORMANCE
  ERROR
  AUDIT
}

enum LogLevel {
  TRACE
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum LogType {
  EXECUTION
  API_REQUEST
  API_RESPONSE
  DATA_TRANSFORMATION
  VALIDATION
  ERROR_HANDLING
  PERFORMANCE
  SECURITY
  AUDIT
  CUSTOM
}

// Observability enums for nullable-safe rollout in JobRun/JobSchedule/SystemLog
enum JobRunStatus {
  QUEUED
  RUNNING
  SUCCEEDED
  FAILED
  CANCELLED
  TIMEOUT
  RETRIED
  SKIPPED
}

enum JobScheduleStatus {
  ACTIVE
  PAUSED
  DISABLED
  ARCHIVED
}

enum DeploymentEnvironment {
  PRODUCTION
  STAGING
  TEST
  DEVELOPMENT
}

enum MappingDirection {
  IMPORT
  EXPORT
  BIDIRECTIONAL
}

enum MappingStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
  TESTING
  ERROR
}

enum MappingType {
  FIELD_MAPPING
  VALUE_TRANSFORMATION
  LOOKUP_TABLE
  CALCULATED_FIELD
  CONDITIONAL_MAPPING
  AGGREGATION
  CUSTOM_SCRIPT
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
  DOMESTIC_PARTNERSHIP
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  TERMINATED
  INVITED
}

enum MessageFormat {
  TEXT
  MARKDOWN
  HTML
  RICH_TEXT
}

enum MigrationStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
  ROLLBACK_IN_PROGRESS
  ROLLBACK_COMPLETED
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
  AT_RISK
  BLOCKED
}

enum MilestoneType {
  PROJECT_START
  PROJECT_END
  PHASE_COMPLETE
  DELIVERY
  PAYMENT
  APPROVAL
  REVIEW
  TESTING
  DEPLOYMENT
  CUSTOM
}

enum NameType {
  LEGAL
  PREFERRED
  MAIDEN
  ALIAS
  PROFESSIONAL
}

enum NotificationChannel {
  EMAIL
  PUSH
  SMS
  IN_APP
  WEBHOOK
}

enum NotificationLevel {
  ALL
  MENTIONS_ONLY
  DIRECT_MESSAGES
  IMPORTANT_ONLY
  MUTED
}

enum OpportunityStatus {
  PROSPECTING
  QUALIFICATION
  NEEDS_ANALYSIS
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
  ARCHIVED
}

enum OrgUnitStatus {
  ACTIVE
  INACTIVE
  RESTRUCTURING
  ARCHIVED
}

enum OrgUnitType {
  COMPANY
  DIVISION
  DEPARTMENT
  TEAM
  PROJECT_GROUP
  COST_CENTER
}

enum OvertimeRuleType {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum OvertimeType {
  DAILY
  WEEKLY
  SEVENTH_DAY
  HOLIDAY
  DOUBLE_TIME
}

enum PayFrequency {
  WEEKLY
  BIWEEKLY
  SEMI_MONTHLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum PayGroupStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum PayStatementDeliveryMethod {
  EMAIL
  PAPER
  PORTAL
  MOBILE_APP
}

enum PayStatementStatus {
  DRAFT
  GENERATED
  DELIVERED
  VIEWED
  ARCHIVED
}

enum PayType {
  REGULAR
  OVERTIME
  DOUBLE_TIME
  HOLIDAY
  VACATION
  SICK
  BONUS
  COMMISSION
  ALLOWANCE
  REIMBURSEMENT
}

enum PaymentChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum PaymentDirection {
  INBOUND
  OUTBOUND
}

enum PaymentMethodTokenStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  REVOKED
  COMPROMISED
}

enum PaymentMethodType {
  CASH
  CHECK
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  ACH
  WIRE
  PAYPAL
  STRIPE
  OTHER
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  SQUARE
  BRAINTREE
  AUTHORIZE_NET
  ADYEN
  RAZORPAY
  INTERNAL
}

enum PaymentScheduleStatus {
  PENDING
  DUE
  OVERDUE
  PAID
  PARTIALLY_PAID
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentTermStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum PaymentTerms {
  DUE_ON_RECEIPT
  NET_15
  NET_30
  NET_45
  NET_60
  EOM_30
  CUSTOM
}

enum PayoutStatus {
  DRAFT
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
}

enum PayrollAdjustmentType {
  CORRECTION
  BONUS
  DEDUCTION
  OVERTIME
  VACATION
  SICK_LEAVE
  HOLIDAY
  CUSTOM
}

enum PayrollItemStatus {
  DRAFT
  CALCULATED
  APPROVED
  PAID
  CANCELLED
  REVERSED
}

enum PayrollItemType {
  SALARY
  HOURLY
  OVERTIME
  BONUS
  COMMISSION
  ALLOWANCE
  DEDUCTION
  REIMBURSEMENT
  TAX
  BENEFIT
}

enum PayrollPaymentMethod {
  BANK_ACCOUNT
  CHECK_PRINTING
  CASH_DISBURSEMENT
  WIRE_SERVICE
  ACH_NETWORK
  CARD_LOADING
  CRYPTO_WALLET
  THIRD_PARTY
}

enum PayrollPaymentMethodType {
  DIRECT_DEPOSIT
  CHECK
  CASH
  WIRE_TRANSFER
  PREPAID_CARD
}

enum PayrollPaymentType {
  DIRECT_DEPOSIT
  CHECK
  CASH
  WIRE_TRANSFER
  ACH
  PREPAID_CARD
  CRYPTO
  CUSTOM
}

enum PayrollRunStatus {
  DRAFT
  CALCULATING
  CALCULATED
  REVIEWING
  APPROVED
  PROCESSING
  COMPLETED
  CANCELLED
  ERROR
}

enum PayrollRunType {
  REGULAR
  SUPPLEMENTAL
  BONUS
  CORRECTION
  YEAR_END
  FINAL
}

enum PayrollTaxType {
  FEDERAL
  STATE
  LOCAL
  FICA
  MEDICARE
  UNEMPLOYMENT
  DISABILITY
  CUSTOM
}

enum PerformanceRating {
  EXCEEDS_EXPECTATIONS
  MEETS_EXPECTATIONS
  BELOW_EXPECTATIONS
  UNSATISFACTORY
  NOT_RATED
}

enum PermissionScope {
  GLOBAL
  TENANT
  PROJECT
  ESTIMATE
  INVOICE
  TASK
  INVENTORY
}

enum PersonStatus {
  ACTIVE
  INACTIVE
  DECEASED
  ARCHIVED
}

enum PlatformTenantChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum PlaybookStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
  DEPRECATED
}

enum PlaybookTrigger {
  MANUAL
  SCHEDULED
  EVENT_DRIVEN
  API_CALL
  WEBHOOK
  FILE_UPLOAD
  ENTITY_CHANGE
}

enum PolicyRiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
  CRITICAL
}

enum PositionBudgetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum PositionStatus {
  ACTIVE
  VACANT
  ON_HOLD
  ELIMINATED
  FROZEN
}

enum PositionType {
  PERMANENT
  TEMPORARY
  CONTRACT
  INTERN
  CONSULTANT
  SEASONAL
}

enum PreferredContactMethod {
  EMAIL
  PHONE
  SMS
  PORTAL
  MAIL
}

enum ProcurementApprovalStatus {
  PENDING
  APPROVED
  DECLINED
  ESCALATED
  CANCELLED
  DELEGATED
}

enum ProcurementChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  CANCELLED
}

enum ProcurementUnitOfMeasure {
  EA
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
  KG
  LB
  TON
  M
  FT
  IN
  M2
  M3
  L
  GAL
  BOX
  CASE
  PALLET
  LOT
  SET
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
  MASTER
}

enum ProjectChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
  CLOSED
  ARCHIVED
}

enum PromptParameterType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
  JSON
  FILE_REFERENCE
  ENTITY_REFERENCE
}

enum PromptTemplateType {
  COMPLETION
  CHAT
  CLASSIFICATION
  SUMMARIZATION
  EXTRACTION
  TRANSLATION
  CODE_GENERATION
  ANALYSIS
}

enum PurchaseOrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  SENT
  ACKNOWLEDGED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
  CLOSED
}

enum QualityGrade {
  A
  B
  C
  D
  REJECT
}

enum QuoteStatus {
  DRAFT
  PENDING
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED
  CANCELLED
}

enum InsuranceType {
  GENERAL_LIABILITY
  WORKERS_COMPENSATION
  PROFESSIONAL_LIABILITY
  COMMERCIAL_AUTO
  BUILDERS_RISK
  COMMERCIAL_PROPERTY
  CYBER_LIABILITY
  EMPLOYMENT_PRACTICES
  DIRECTORS_OFFICERS
  SURETY_BOND
  PERFORMANCE_BOND
  PAYMENT_BOND
  BID_BOND
  MAINTENANCE_BOND
}

enum InsuranceStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING_RENEWAL
  SUSPENDED
  DECLINED
  UNDER_REVIEW
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_REVISION
  ESCALATED
  CANCELLED
  EXPIRED
}

enum CustomerSegmentType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  GOVERNMENT
  MUNICIPAL
  INSTITUTIONAL
  NON_PROFIT
  INFRASTRUCTURE
  HEALTHCARE
  EDUCATION
  HOSPITALITY
  RETAIL
}

enum CommissionType {
  PERCENTAGE
  FLAT_AMOUNT
  TIERED_PERCENTAGE
  SLIDING_SCALE
  BONUS_BASED
  MILESTONE_BASED
}

enum RFIReplyType {
  RESPONSE
  CLARIFICATION
  FOLLOW_UP
}

enum RFIStatus {
  SUBMITTED
  UNDER_REVIEW
  CLARIFICATION_REQUESTED
  ANSWERED
  CLOSED
}

enum RFQResponseStatus {
  DRAFT
  SUBMITTED
  REVISED
  EVALUATED
  AWARDED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum RFQStatus {
  DRAFT
  PUBLISHED
  RESPONSES_RECEIVED
  EVALUATING
  AWARDED
  CANCELLED
  CLOSED
}

enum RFQType {
  STANDARD
  EMERGENCY
  BLANKET
  SERVICES
  CONSTRUCTION
  IT_SERVICES
  PROFESSIONAL
}

enum ReadStatus {
  DELIVERED
  READ
  ACKNOWLEDGED
  ARCHIVED
  IGNORED
}

enum ReasonCodeCategory {
  FINANCIAL
  POLICY
  TECHNICAL
  LEGAL
  RESOURCE
  TIMELINE
  QUALITY
  COMPLIANCE
  OTHER
}

enum ReasonCodeStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  DEPRECATED
}

enum ReasonCodeType {
  APPROVAL
  REJECTION
  DELEGATION
  ESCALATION
  CANCELLATION
  WITHDRAWAL
  CONDITIONAL
  GENERAL
}

enum RecipientStatus {
  PENDING
  SENT
  DELIVERED
  VIEWED
  SIGNED
  DECLINED
  AUTHENTICATION_FAILED
  EXPIRED
}

enum RecipientType {
  SIGNER
  APPROVER
  VIEWER
  CARBON_COPY
  WITNESS
  NOTARY
}

enum ReconciliationStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ADJUSTED
  CANCELLED
}

enum RedactionMethod {
  REPLACE_WITH_MASK
  REPLACE_WITH_TEXT
  REMOVE_COMPLETELY
  BLUR_VISUAL
  ENCRYPT_IN_PLACE
}

enum RedactionRiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RedactionRuleStatus {
  DRAFT
  TESTING
  ACTIVE
  SUSPENDED
  DEPRECATED
  ARCHIVED
}

enum RedactionRuleType {
  PATTERN_BASED
  KEYWORD_BASED
  AI_ENHANCED
  CONTEXT_AWARE
  HYBRID
}

enum RefundStatus {
  DRAFT
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
}

enum ReimbursementStatus {
  SUBMITTED
  PENDING_APPROVAL
  APPROVED
  REJECTED
  PAID
  CANCELLED
}

enum ReimbursementType {
  MILEAGE
  MEALS
  LODGING
  TRAVEL
  SUPPLIES
  EQUIPMENT
  TRAINING
  PHONE
  INTERNET
  OTHER
}

enum RelationshipType {
  SPOUSE
  CHILD
  DOMESTIC_PARTNER
  DEPENDENT
  BENEFICIARY
}

enum ResourceType {
  HUMAN
  EQUIPMENT
  MATERIAL
  BUDGET
  SOFTWARE
  FACILITY
}

enum RetentionPolicy {
  DAYS_30
  DAYS_90
  MONTHS_6
  YEAR_1
  YEARS_3
  YEARS_7
  YEARS_10
  PERMANENT
}

enum RetryStrategy {
  NONE
  LINEAR
  EXPONENTIAL
  CUSTOM
}

enum ReviewStatus {
  DRAFT
  SUBMITTED
  COMPLETED
  APPROVED
  CANCELLED
}

enum ReviewType {
  ANNUAL
  QUARTERLY
  PROBATIONARY
  MID_YEAR
  PROJECT_BASED
  EXIT
}

enum RiskStatus {
  IDENTIFIED
  ANALYZING
  MITIGATING
  MONITORING
  CLOSED
}

enum RoleType {
  SYSTEM
  CUSTOM
  INHERITED
}

enum SafetyRating {
  A_EXCELLENT
  B_GOOD
  C_SATISFACTORY
  D_NEEDS_IMPROVEMENT
  F_UNSATISFACTORY
  NOT_RATED
  UNDER_REVIEW
  EXEMPT
}

enum ScheduleExceptionType {
  HOLIDAY
  MAINTENANCE
  WEATHER_DELAY
  RESOURCE_UNAVAILABLE
  EMERGENCY
  CUSTOM
}

enum ScheduleStatus {
  DRAFT
  ACTIVE
  BASELINED
  ARCHIVED
  CANCELLED
}

enum SecretStatus {
  ACTIVE
  EXPIRED
  REVOKED
  PENDING_ROTATION
  ROTATING
  INACTIVE
}

enum SecretType {
  API_KEY
  OAUTH_ACCESS_TOKEN
  OAUTH_REFRESH_TOKEN
  CLIENT_SECRET
  CERTIFICATE
  PRIVATE_KEY
  PUBLIC_KEY
  PASSWORD
  WEBHOOK_SECRET
  ENCRYPTION_KEY
  CUSTOM
}

enum SecurityLevel {
  PUBLIC
  STANDARD
  ENHANCED
  RESTRICTED
  CONFIDENTIAL
  TOP_SECRET
}

enum SessionStatus {
  ACTIVE
  EXPIRED
  REVOKED
  TERMINATED
}

enum ServiceAccountStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
  REVOKED
}

enum ServiceAccountType {
  API
  INTEGRATION
  AUTOMATION
  MONITORING
  WEBHOOK
  SCHEDULED_JOB
}

enum SignatureIntentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum SignatureIntentType {
  SIGN
  INITIAL
  APPROVE
  DECLINE
  VIEW
  DATE
  TEXT
  CHECKBOX
  DROPDOWN
}

enum SignatureSessionStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  TERMINATED
  ERROR
}

enum SignatureType {
  ELECTRONIC
  DIGITAL
  WET_INK
  CLICK_TO_SIGN
  BIOMETRIC
}

enum StakeholderRole {
  OWNER
  APPROVER
  REVIEWER
  OBSERVER
  CONTRIBUTOR
}

enum StatementLineStatus {
  PENDING
  MATCHED
  RECONCILED
  DISPUTED
  VOIDED
}

enum StorageProvider {
  S3
  GCP
  AZURE
  LOCAL
  CLOUDFLARE
}

enum SubmittalApprovalDecision {
  PENDING
  APPROVED
  DECLINED
  ESCALATED
  CANCELLED
}

enum SubmittalItemStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum SubmittalStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  RESUBMIT
}

enum SubscriptionInterval {
  MONTHLY
  QUARTERLY
  YEARLY
  WEEKLY
  DAILY
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
  PENDING_CANCELLATION
}

enum SyncDirection {
  IMPORT
  EXPORT
  BIDIRECTIONAL
}

enum SyncJobStatus {
  QUEUED
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
  TIMEOUT
  PARTIAL_SUCCESS
  RETRYING
  PAUSED
  SCHEDULED
}

enum SyncJobType {
  FULL_SYNC
  INCREMENTAL_SYNC
  MANUAL_SYNC
  SCHEDULED_SYNC
  WEBHOOK_TRIGGERED
  DEPENDENCY_SYNC
  RECOVERY_SYNC
  TEST_SYNC
}

enum TaskAttachmentType {
  DOCUMENT
  IMAGE
  VIDEO
  AUDIO
  SPREADSHEET
  PRESENTATION
  OTHER
}

enum TaskChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  URGENT
}

enum TaskType {
  ADMINISTRATIVE
  MAINTENANCE
  OPERATIONAL
  TRAINING
  COMPLIANCE
  QUALITY_CONTROL
  CUSTOMER_SERVICE
  RESEARCH
  DOCUMENTATION
  CUSTOM
}

enum TaxCalculationMethod {
  PERCENTAGE
  FIXED_AMOUNT
  GRADUATED
  COMPOUND
}

enum TaxJurisdictionStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  MERGED
  SPLIT
}

enum TaxJurisdictionType {
  COUNTRY
  STATE
  PROVINCE
  COUNTY
  CITY
  MUNICIPALITY
  DISTRICT
  ZONE
  OTHER
}

enum TaxRateStatus {
  ACTIVE
  INACTIVE
  SCHEDULED
  EXPIRED
  SUSPENDED
}

enum TaxRateType {
  SALES_TAX
  VAT
  GST
  EXCISE
  CUSTOMS
  WITHHOLDING
  PAYROLL
  PROPERTY
  MUNICIPAL
  OTHER
}

enum TaxType {
  FEDERAL_INCOME
  STATE_INCOME
  LOCAL_INCOME
  SOCIAL_SECURITY
  MEDICARE
  STATE_UNEMPLOYMENT
  STATE_DISABILITY
  CITY_TAX
  COUNTY_TAX
}

enum TemplateStatus {
  DRAFT
  TESTING
  ACTIVE
  DEPRECATED
  ARCHIVED
  RETIRED
}

enum TenantDeploymentType {
  SHARED
  DEDICATED
  HYBRID
  ON_PREMISE
}

enum TenantRegion {
  US_EAST_1
  US_WEST_1
  US_WEST_2
  EU_WEST_1
  EU_CENTRAL_1
  AP_SOUTHEAST_1
  AP_NORTHEAST_1
  CA_CENTRAL_1
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_ACTIVATION
  MIGRATING
  ARCHIVED
  DELETED
}

enum TenantTier {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum TerminationReason {
  VOLUNTARY
  INVOLUNTARY
  REDUCTION_IN_FORCE
  END_OF_CONTRACT
  RETIREMENT
  DECEASED
  JOB_ABANDONMENT
  PERFORMANCE
  MISCONDUCT
}

enum ThemePreference {
  LIGHT
  DARK
  SYSTEM
  HIGH_CONTRAST
}

enum ThresholdOperator {
  GREATER_THAN
  GREATER_THAN_EQUAL
  LESS_THAN
  LESS_THAN_EQUAL
  EQUAL
  NOT_EQUAL
  BETWEEN
  OUTSIDE
}

enum TimeClockStatus {
  CLOCKED_IN
  CLOCKED_OUT
  BREAK_IN
  BREAK_OUT
  LUNCH_IN
  LUNCH_OUT
}

enum TimePayrollChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TimesheetApprovalDecision {
  PENDING
  APPROVED
  DECLINED
  ESCALATED
  CANCELLED
}

enum TimesheetApprovalType {
  STANDARD
  EMERGENCY
  DELEGATED
}

enum TimesheetEntryStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum TimesheetEntryType {
  REGULAR
  OVERTIME
  BREAK
  LUNCH
}

enum TimesheetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum TokenType {
  ACCESS_TOKEN
  REFRESH_TOKEN
  API_KEY
  SESSION_TOKEN
  BEARER_TOKEN
  JWT_TOKEN
  CERTIFICATE
}

enum TrainingStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
  EXPIRED
}

enum UsageMetric {
  API_CALLS
  STORAGE_GB
  PROJECTS
  USERS
  DOCUMENTS
  BANDWIDTH_GB
  COMPUTE_HOURS
  TRANSACTIONS
  REPORTS_GENERATED
  INTEGRATIONS
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INVITED
  PENDING_VERIFICATION
  LOCKED
  DELETED
}

enum ValidationRule {
  REQUIRED
  MIN_LENGTH
  MAX_LENGTH
  PATTERN
  UNIQUE
  RANGE
  FORMAT
  CUSTOM
}

enum VendorChildStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum VendorComplianceStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

enum VendorContactType {
  PRIMARY
  BILLING
  PURCHASING
  TECHNICAL
  SUPPORT
  LEGAL
  EXECUTIVE
  ACCOUNTS_PAYABLE
}

enum VendorDocumentType {
  CONTRACT
  INSURANCE
  LICENSE
  CERTIFICATION
  W9_FORM
  BANK_INFO
  SAFETY_CERT
  QUALITY_CERT
  ISO_CERT
  SOC_REPORT
  AUDIT_REPORT
  FINANCIAL_STMT
}

enum VendorRiskRating {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum VendorStatus {
  DRAFT
  PENDING_APPROVAL
  ACTIVE
  INACTIVE
  ON_HOLD
  SUSPENDED
  BLACKLISTED
  ARCHIVED
}

enum VendorType {
  SUPPLIER
  SERVICE_PROVIDER
  CONTRACTOR
  CONSULTANT
  DISTRIBUTOR
  MANUFACTURER
  RESELLER
  GOVERNMENT
  NONPROFIT
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
  REQUIRES_UPDATE
}

enum VirusScanStatus {
  PENDING
  CLEAN
  INFECTED
  QUARANTINED
  ERROR
  SKIPPED
}

enum WatermarkPolicyStatus {
  DRAFT
  ACTIVE
  SUSPENDED
  DEPRECATED
  ARCHIVED
}

enum WatermarkPosition {
  CENTER
  TOP_LEFT
  TOP_RIGHT
  BOTTOM_LEFT
  BOTTOM_RIGHT
  HEADER
  FOOTER
  DIAGONAL
  CUSTOM
}

enum WatermarkType {
  VISIBLE_TEXT
  VISIBLE_IMAGE
  DIGITAL_SIGNATURE
  STEGANOGRAPHIC
  QR_CODE
  BARCODE
  HYBRID
}

enum WeatherActionHint {
  MONITOR
  PREPARE
  MITIGATE
  RESCHEDULE
  PAUSE
  EVACUATE
  SHELTER
  ESCALATE
  DOCUMENT
}

enum WeatherAlertStatus {
  ACTIVE
  ACKNOWLEDGED
  SNOOZED
  ESCALATED
  RESOLVED
  CANCELLED
  EXPIRED
  SUPERSEDED
}

enum WeatherAlertType {
  RAIN
  STORM
  THUNDERSTORM
  WIND
  HAIL
  SNOW
  LIGHTNING
  TORNADO
  HURRICANE
  FLOOD
  HEAT
  COLD
  FOG
  ICE
  DROUGHT
  WILDFIRE
  AIR_QUALITY
  UV_INDEX
  SEISMIC
  TSUNAMI
}

enum WeatherEntityType {
  PROJECT
  PROJECT_TASK
  TASK
  RESOURCE
  LOCATION
}

enum WeatherIncidentType {
  DELAY
  STOPPAGE
  DAMAGE
  SAFETY
  QUALITY
  COST
  SCHEDULE
  RESOURCE
}

enum WeatherIndustry {
  CONSTRUCTION
  ROOFING
  LOGISTICS
  AGRICULTURE
  ENERGY
  MANUFACTURING
  TELECOMMUNICATIONS
  MINING
  AVIATION
  MARITIME
  EMERGENCY_SERVICES
  EVENTS
  OTHER
}

enum WeatherMetric {
  TEMPERATURE
  PRECIPITATION
  WIND_SPEED
  WIND_GUST
  HUMIDITY
  PRESSURE
  VISIBILITY
  UV_INDEX
  HEAT_INDEX
  WIND_CHILL
  DEW_POINT
  SNOW_DEPTH
  HAIL_SIZE
  LIGHTNING_STRIKES
}

enum WeatherRiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
  EXTREME
}

enum WeatherSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EXTREME
}

enum WeatherSource {
  NOAA
  OPENWEATHER
  TOMORROW
  ACCUWEATHER
  WEATHERAPI
  CLIMACELL
  DARK_SKY
  WEATHER_UNDERGROUND
  CUSTOM
  OTHER
}

enum WorkItemStatus {
  DRAFT
  OPEN
  IN_PROGRESS
  ON_HOLD
  BLOCKED
  RESOLVED
  COMPLETED
  CLOSED
  CANCELLED
}

enum WorkLocation {
  OFFICE
  REMOTE
  HYBRID
  FIELD
}

enum WorkScheduleType {
  FULL_TIME
  PART_TIME
  FLEX
  CONTRACTOR
}

enum WorkerStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
  SUSPENDED
  ARCHIVED
}

// Fraud Shield & Delegations Enums
enum FraudPolicyStatus {
  ACTIVE
  INACTIVE
  TESTING
  SUSPENDED
  ARCHIVED
}

enum FraudPolicyType {
  TRANSACTION_MONITORING
  BEHAVIORAL_ANALYSIS
  VELOCITY_CHECKING
  PATTERN_DETECTION
  ANOMALY_DETECTION
  COMPLIANCE_MONITORING
  RISK_SCORING
}

enum FraudRuleStatus {
  ACTIVE
  INACTIVE
  TESTING
  SUSPENDED
  ARCHIVED
}

enum FraudRuleType {
  THRESHOLD
  VELOCITY
  PATTERN
  BEHAVIORAL
  ML_BASED
  STATISTICAL
  RULE_BASED
  COMPOSITE
}

enum RuleConditionType {
  SQL
  JSON
  EXPRESSION
  SCRIPT
}

enum RuleOperator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN_OR_EQUAL
  CONTAINS
  NOT_CONTAINS
  IN
  NOT_IN
  BETWEEN
  REGEX_MATCH
}

enum AggregationFunction {
  SUM
  COUNT
  AVG
  MIN
  MAX
  STDDEV
  VARIANCE
  DISTINCT_COUNT
}

enum RuleFrequency {
  REAL_TIME
  BATCH_HOURLY
  BATCH_DAILY
  BATCH_WEEKLY
  ON_DEMAND
}

enum FraudAction {
  ALERT
  BLOCK
  REVIEW
  ESCALATE
  LOG_ONLY
  QUARANTINE
  SUSPEND_ACCOUNT
  REQUIRE_VERIFICATION
}

enum AuditFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  ON_DEMAND
}

enum AnomalyStatus {
  DETECTED
  INVESTIGATING
  CONFIRMED
  FALSE_POSITIVE
  RESOLVED
  ESCALATED
  IGNORED
}

enum AnomalyType {
  STATISTICAL
  BEHAVIORAL
  PATTERN
  VELOCITY
  VOLUME
  TEMPORAL
  CONTEXTUAL
  COLLECTIVE
}

enum AnomalySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CaseStatus {
  OPEN
  INVESTIGATING
  PENDING_REVIEW
  RESOLVED
  CLOSED
  ESCALATED
  SUSPENDED
}

enum CaseActionType {
  COMMENT
  INVESTIGATION
  ESCALATION
  RESOLUTION
  NOTIFICATION
  REMEDIATION
  DOCUMENTATION
  APPROVAL
  REJECTION
  STATUS_CHANGE
  ASSIGNMENT
  ATTACHMENT
}

enum DelegationStatus {
  ACTIVE
  PENDING_APPROVAL
  APPROVED
  REJECTED
  EXPIRED
  REVOKED
  SUSPENDED
}

enum ScopeType {
  ENTITY
  GEOGRAPHIC
  ORGANIZATIONAL
  USER_ROLE
  TRANSACTION
  TIME_BASED
  CHANNEL
  CUSTOM
}

enum RiskLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
  CRITICAL
}

enum FeatureType {
  NUMERICAL
  CATEGORICAL
  TEMPORAL
  TEXTUAL
  BOOLEAN
  COMPOSITE
  DERIVED
  AGGREGATED
}

enum FeatureDataType {
  INTEGER
  DECIMAL
  STRING
  BOOLEAN
  DATE
  DATETIME
  JSON
  ARRAY
}

enum CasePriority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum CaseCategory {
  ANOMALY_DETECTION
  FRAUD_PREVENTION
  COMPLIANCE_VIOLATION
  SECURITY_INCIDENT
  DATA_QUALITY
  OPERATIONAL_RISK
  FINANCIAL_RISK
  REGULATORY_BREACH
}

enum BusinessImpact {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  MINIMAL
}

enum ResolutionCategory {
  TRUE_POSITIVE
  FALSE_POSITIVE
  INCONCLUSIVE
  DUPLICATE
  INVALID
  ESCALATED
  DEFERRED
}

enum ActionResultStatus {
  SUCCESS
  FAILED
  PENDING
  CANCELLED
  PARTIAL
}

enum DelegationType {
  PERMISSION
  ROLE
  RESOURCE_ACCESS
  APPROVAL_AUTHORITY
  ADMINISTRATIVE
  EMERGENCY
  TEMPORARY
}

enum ConstraintViolationAction {
  BLOCK
  WARN
  LOG_ONLY
  REQUIRE_APPROVAL
  ESCALATE
  TERMINATE_SESSION
}

enum DelegationConstraintType {
  TIME_WINDOW
  DATE_RANGE
  IP_RESTRICTION
  LOCATION_RESTRICTION
  USAGE_LIMIT
  AMOUNT_LIMIT
  RESOURCE_RESTRICTION
  APPROVAL_REQUIREMENT
  DEVICE_RESTRICTION
  SECURITY_LEVEL
  CONTEXT_VALIDATION
}

enum ActorStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  LOCKED
  EXPIRED
  ARCHIVED
}

enum ActorType {
  USER
  SERVICE_ACCOUNT
  API_KEY
  SYSTEM
  INTEGRATION
  WEBHOOK
  AUTOMATION
  MONITORING
}

// =============================================================================
// ROOMPLAN MODULE ENUMS
// =============================================================================

enum RoomScanStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum RoomFileType {
  USDZ
  OBJ
  GLTF
  IMAGE
  JSON
}

enum RoomModelType {
  ROOM
  FLOORPLAN
  BUILDING
}

enum MeasurementUnit {
  METER
  FOOT
  INCH
  CM
}

enum RoomObjectType {
  WALL
  DOOR
  WINDOW
  TABLE
  BED
  SOFA
  CHAIR
  CUSTOM
}

enum RoomSurfaceType {
  WALL
  CEILING
  FLOOR
  OTHER
}

enum RoomExportType {
  PDF
  DXF
  DWG
  JSON
  IMAGE
}

enum RoomProcessingStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

enum RoomJobType {
  RECONSTRUCT_MODEL
  GENERATE_BLUEPRINT
  EXPORT_FILE
}

enum RoomPresetType {
  SCAN
  EXPORT
}

enum Axis {
  X
  Y
  Z
}
